
module LinkedList where

import Either

primitive type List : * -> *

primitive foldList : {a} Either () (a, List a) -> List a
primitive unfoldList : {a} List a -> Either () (a, List a)

nil : {a} List a
nil = foldList (Left ())

cons : {a} a -> List a -> List a
cons x l = foldList (Right (x,l))

is_elem_spec : [64] -> List [64] -> [64]
is_elem_spec x l =
  either (\ _ -> 0) (\ (y,l') -> if x == y then 1 else is_elem_spec x l')
         (unfoldList l)

sorted_insert_spec : [64] -> List [64] -> List [64]
sorted_insert_spec x l =
  either (\ _ -> cons x nil)
         (\ (y,l') -> if x <=$ y then cons x (cons y l')
                      else cons y (sorted_insert_spec x l'))
         (unfoldList l)
