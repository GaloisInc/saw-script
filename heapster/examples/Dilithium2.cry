
module Dilithium2 where

infixr 1 &

(&) : {a, b} a -> (a -> b) -> b
x & f = f x

// params.h

type SEEDBYTES = 32
type CRHBYTES = 64
type TRBYTES = 64
type RNDBYTES = 32
type N = 256
type Q = 8380417
type D = 13
type ROOT_OF_UNITY = 1753
type K = 4
type L = 4
type ETA = 2
type TAU = 39
type BETA = 78
type GAMMA1 = (2 ^^ 17) // (1 << 17)
type GAMMA2 = ((Q-1)/88)
type OMEGA = 80
type CTILDEBYTES = 32
type POLYT1_PACKEDBYTES = 320
type POLYT0_PACKEDBYTES = 416
type POLYVECH_PACKEDBYTES = (OMEGA + K)
type POLYZ_PACKEDBYTES = 576
type POLYW1_PACKEDBYTES = 192
type POLYETA_PACKEDBYTES = 96
type CRYPTO_PUBLICKEYBYTES = (SEEDBYTES + K*POLYT1_PACKEDBYTES)
type CRYPTO_SECRETKEYBYTES = (2*SEEDBYTES
                              + TRBYTES
                              + L*POLYETA_PACKEDBYTES
                              + K*POLYETA_PACKEDBYTES
                              + K*POLYT0_PACKEDBYTES)
type CRYPTO_BYTES = (CTILDEBYTES + L*POLYZ_PACKEDBYTES + POLYVECH_PACKEDBYTES)


// randombytes.c

primitive randombytes : {n} [n][8]


// fips202.c

type keccak_state = ([25][64], [32])

primitive shake256_init : keccak_state
primitive shake256_absorb : {n} keccak_state -> [n][8] -> (keccak_state, [n][8])
primitive shake256_finalize : keccak_state -> keccak_state
primitive shake256_squeeze : {n} keccak_state -> ([n][8], keccak_state)
primitive shake256 : {m, n} [n][8] -> ([m][8], [n][8])

// poly.c

type poly = [N][32]

primitive poly_challenge : [SEEDBYTES][8] -> (poly, [SEEDBYTES][8])
primitive poly_ntt : poly -> poly


// polyvec.c

type polyvecl = [L]poly
type polyveck = [K]poly

primitive polyvec_matrix_expand : [SEEDBYTES][8] -> ([K]polyvecl, [SEEDBYTES][8])
primitive polyvec_matrix_pointwise_montgomery : [K]polyvecl -> polyvecl -> (polyveck, [K]polyvecl, polyvecl)
primitive polyvecl_uniform_eta : [CRHBYTES][8] -> [16] -> (polyvecl, [CRHBYTES][8])
primitive polyvecl_uniform_gamma1 : [CRHBYTES][8] -> [16] -> (polyvecl, [CRHBYTES][8])
primitive polyvecl_reduce : polyvecl -> polyvecl
primitive polyvecl_add : polyvecl -> polyvecl -> (polyvecl, polyvecl)
primitive polyvecl_ntt : polyvecl -> polyvecl
primitive polyvecl_invntt_tomont : polyvecl -> polyvecl
primitive polyvecl_pointwise_poly_montgomery : poly -> polyvecl -> (polyvecl, poly, polyvecl)
primitive polyvecl_chknorm : polyvecl -> [32] -> (polyvecl, [32])
primitive polyveck_uniform_eta : [CRHBYTES][8] -> [16] -> (polyveck, [CRHBYTES][8])
primitive polyveck_reduce : polyveck -> polyveck
primitive polyveck_caddq : polyveck -> polyveck
primitive polyveck_add : polyveck -> polyveck -> (polyveck, polyveck)
primitive polyveck_sub : polyveck -> polyveck -> (polyveck, polyveck)
primitive polyveck_shiftl : polyveck -> polyveck
primitive polyveck_ntt : polyveck -> polyveck
primitive polyveck_invntt_tomont : polyveck -> polyveck
primitive polyveck_pointwise_poly_montgomery : poly -> polyveck -> (polyveck, poly, polyveck)
primitive polyveck_chknorm : polyveck -> [32] -> (polyveck, [32])
primitive polyveck_power2round : polyveck -> (polyveck, polyveck)
primitive polyveck_decompose : polyveck -> (polyveck, polyveck)
primitive polyveck_make_hint : polyveck -> polyveck -> (polyveck, polyveck, polyveck, [32])
primitive polyveck_use_hint : polyveck -> polyveck -> (polyveck, polyveck)
primitive polyveck_pack_w1 : polyveck -> ([K*POLYW1_PACKEDBYTES][8], polyveck)

// packing.c

primitive pack_pk : [SEEDBYTES][8] -> polyveck ->
                    ([CRYPTO_PUBLICKEYBYTES][8], [SEEDBYTES][8], polyveck)
primitive unpack_pk : [CRYPTO_PUBLICKEYBYTES][8] ->
                      ([SEEDBYTES][8], polyveck, [CRYPTO_PUBLICKEYBYTES][8])
primitive pack_sk : [SEEDBYTES][8] -> [TRBYTES][8] -> [SEEDBYTES][8] ->
                    polyveck -> polyvecl -> polyveck ->
                    ([CRYPTO_SECRETKEYBYTES][8],
                     [SEEDBYTES][8], [TRBYTES][8], [SEEDBYTES][8], 
                     polyveck, polyvecl, polyveck)
primitive unpack_sk : [CRYPTO_SECRETKEYBYTES][8] ->
                      ([SEEDBYTES][8], [TRBYTES][8], [SEEDBYTES][8], 
                       polyveck, polyvecl, polyveck, [CRYPTO_SECRETKEYBYTES][8])
primitive pack_sig : [CTILDEBYTES][8] -> polyvecl -> polyveck ->
                     ([CRYPTO_BYTES][8], [CTILDEBYTES][8], polyvecl, polyveck)
primitive unpack_sig : [CRYPTO_BYTES][8] ->
                       ([CTILDEBYTES][8], polyvecl, polyveck, [CRYPTO_BYTES][8],
                        [32])


// sign.c - crypto_sign_keypair

crypto_sign_keypair :
  ([CRYPTO_PUBLICKEYBYTES][8], [CRYPTO_SECRETKEYBYTES][8], [32])
crypto_sign_keypair =
  /* Get randomness for rho, rhoprime and key */
  randombytes`{SEEDBYTES} & \seedbuf_rand_0 ->
  shake256 seedbuf_rand_0 & \(seedbuf_0, seedbuf_rand_1) ->
  take seedbuf_0 & \rho_0 ->
  take (drop`{SEEDBYTES} seedbuf_0) & \rhoprime_0 ->
  take (drop`{SEEDBYTES + CRHBYTES} seedbuf_0) & \key_0 ->

  /* Expand matrix */
  polyvec_matrix_expand rho_0 & \(mat_0, rho_1) ->
  
  /* Sample short vectors s1 and s2 */
  polyvecl_uniform_eta rhoprime_0 0 & \(s1_0, rhoprime_1) ->
  polyveck_uniform_eta rhoprime_1 `L & \(s2_0, rhoprime_2) ->
  
  /* Matrix-vector multiplication */
  s1_0 & \s1hat_0 ->
  polyvecl_ntt s1hat_0 & \s1hat_1 ->
  polyvec_matrix_pointwise_montgomery mat_0 s1hat_1 & \(t1_0, mat_1, s1hat_2) ->
  polyveck_reduce t1_0 & \t1_1 ->
  polyveck_invntt_tomont t1_1 & \t1_2 ->

  /* Add error vector s2 */
  polyveck_add t1_2 s2_0 & \(t1_3, s2_1) ->

  /* Extract t1 and write public key */
  polyveck_caddq t1_3 & \t1_4 ->
  polyveck_power2round t1_4 & \(t1_5, t0_0) ->
  pack_pk rho_1 t1_5 & \(pk_0, rho_2, t1_6) ->

  /* Compute H(rho, t1) and write secret key */
  shake256 pk_0 & \(tr_0, pk_1) ->
  pack_sk rho_2 tr_0 key_0 t0_0 s1_0 s2_1 & \(sk_0, rho_3, tr_1, key_1, t0_1, s1_1, s2_2) ->
  
  (pk_1, sk_0, 0)


// sign.c - crypto_sign_signature

crypto_sign_signature : {mlen}
  [mlen][8] -> [CRYPTO_SECRETKEYBYTES][8] ->
  ([CRYPTO_BYTES][8], [64], [mlen][8], [CRYPTO_SECRETKEYBYTES][8], [32])
crypto_sign_signature m_0 sk_0 =
  zero & \nonce_0 ->

  unpack_sk sk_0 & \(rho_0, tr_0, key_0, t0_0, s1_0, s2_0, sk_1) ->

  /* Compute mu = CRH(tr, msg) */
  shake256_init & \state_0 ->
  shake256_absorb`{TRBYTES} state_0 tr_0 & \(state_1, tr_1) ->
  shake256_absorb`{mlen} state_1 m_0 & \(state_2, m_1) ->
  shake256_finalize state_2 & \state_3 ->
  shake256_squeeze`{CRHBYTES} state_3 & \(mu_0, state_4) ->

  zero & \rnd_0 ->
  shake256_init & \state_5 ->
  shake256_absorb`{SEEDBYTES} state_5 key_0 & \(state_6, key_1) ->
  shake256_absorb`{RNDBYTES} state_6 rnd_0 & \(state_7, rnd_1) ->
  shake256_absorb`{CRHBYTES} state_7 mu_0 & \(state_8, mu_1) ->
  shake256_finalize state_8 & \state_9 ->
  shake256_squeeze`{CRHBYTES} state_9 & \(rhoprime_0, state_10) ->

  /* Expand matrix and transform vectors */
  polyvec_matrix_expand rho_0 & \(mat_0, rho_1) ->
  polyvecl_ntt s1_0 & \s1_1 ->
  polyveck_ntt s2_0 & \s2_1 ->
  polyveck_ntt t0_0 & \t0_1 ->

  crypto_sign_signature_rej rhoprime_0 nonce_0 mat_0 mu_1 s1_1 s2_1 t0_1 m_1 sk_1

crypto_sign_signature_rej : {mlen}
  [CRHBYTES][8] -> [16] -> [K]polyvecl -> [CRHBYTES][8] -> polyvecl ->
  polyveck -> polyveck -> [mlen][8] -> [CRYPTO_SECRETKEYBYTES][8] ->
  ([CRYPTO_BYTES][8], [64], [mlen][8], [CRYPTO_SECRETKEYBYTES][8], [32])
crypto_sign_signature_rej rhoprime_0 nonce_0 mat_0 mu_1 s1_1 s2_1 t0_1 m_1 sk_1 =
  /* Sample intermediate vector y */
  polyvecl_uniform_gamma1 rhoprime_0 nonce_0 & \(y_0, rhoprime_1) ->
  (nonce_0 + 1) & \nonce_1 ->

  /* Matrix-vector multiplication */
  y_0 & \z_0 ->
  polyvecl_ntt z_0 & \z_1 ->
  polyvec_matrix_pointwise_montgomery mat_0 z_1 & \(w1_0, mat_1, z_2) ->
  polyveck_reduce w1_0 & \w1_1 ->
  polyveck_invntt_tomont w1_1 & \w1_2 ->

  /* Decompose w and call the random oracle */
  polyveck_caddq w1_2 & \w1_3 ->
  polyveck_decompose w1_3 & \(w1_4, w0_0) ->
  polyveck_pack_w1 w1_4 & \(sig_w1_packedbytes_0, w1_5) ->

  shake256_init & \state_11 ->
  shake256_absorb state_11 mu_1 & \(state_12, mu_2) ->
  shake256_absorb state_12 sig_w1_packedbytes_0 & \(state_13, sig_w1_packedbytes_1) ->
  shake256_finalize state_13 & \state_14 ->
  shake256_squeeze`{CTILDEBYTES} state_14 & \(sig_ctildebytes_0, state_15) ->
  poly_challenge sig_ctildebytes_0 & \(cp_0, sig_ctildebytes_1) ->
  poly_ntt cp_0 & \cp_1 ->

  /* Compute z, reject if it reveals secret */
  polyvecl_pointwise_poly_montgomery cp_1 s1_1 & \(z_3, cp_2, s1_2) ->
  polyvecl_invntt_tomont z_3 & \z_4 ->
  polyvecl_add z_4 y_0 & \(z_5, y_1) ->
  polyvecl_reduce z_5 & \z_6 ->
  polyvecl_chknorm z_6 (`GAMMA1 - `BETA) & \(z_7, polyvecl_chknorm_z_res) ->
  if polyvecl_chknorm_z_res != 0 then
    crypto_sign_signature_rej rhoprime_1 nonce_1 mat_1 mu_2 s1_2 s2_1 t0_1 m_1 sk_1 else

  /* Check that subtracting cs2 does not change high bits of w and low bits
   * do not reveal secret information */
  polyveck_pointwise_poly_montgomery cp_2 s2_1 & \(h_0, cp_3, s2_2) ->
  polyveck_invntt_tomont h_0 & \h_1 ->
  polyveck_sub w0_0 h_1 & \(w0_1, h_2) ->
  polyveck_reduce w0_1 & \w0_2 ->
  polyveck_chknorm w0_2 (`GAMMA2 - `BETA) & \(w0_3, polyveck_chknorm_w0_res) ->
  if polyveck_chknorm_w0_res != 0 then
    crypto_sign_signature_rej rhoprime_1 nonce_1 mat_1 mu_2 s1_2 s2_2 t0_1 m_1 sk_1 else

  /* Compute hints for w1 */
  polyveck_pointwise_poly_montgomery cp_3 t0_1 & \(h_3, cp_4, t0_2) ->
  polyveck_invntt_tomont h_3 & \h_4 ->
  polyveck_reduce h_4 & \h_5 ->
  polyveck_chknorm h_5 (`GAMMA2) & \(h_6, polyveck_chknorm_h_res) ->
  if polyveck_chknorm_h_res != 0 then
    crypto_sign_signature_rej rhoprime_1 nonce_1 mat_1 mu_2 s1_2 s2_2 t0_2 m_1 sk_1 else

  polyveck_add w0_3 h_6 & \(w0_4, h_7) ->
  polyveck_make_hint w0_4 w1_5 & \(h_8, w0_5, w1_6, n_0) ->
  if n_0 > `OMEGA then
    crypto_sign_signature_rej rhoprime_1 nonce_1 mat_1 mu_2 s1_2 s2_2 t0_2 m_1 sk_1 else

  /* Write signature */
  pack_sig sig_ctildebytes_1 z_7 h_8 & \(sig_0, sig_ctildebytes_2, z_8, h_9) ->
  (`CRYPTO_BYTES) & \siglen_0 ->
  (sig_0, siglen_0, m_1, sk_1, 0)


// sign.c - crypto_sign

crypto_sign : {mlen} Literal mlen [64] =>
  [mlen][8] -> [CRYPTO_SECRETKEYBYTES][8] ->
  ([CRYPTO_BYTES][8], [mlen][8], [64], [mlen][8], [CRYPTO_SECRETKEYBYTES][8], [32])
crypto_sign m_0 sk_0 =
  m_0 & \sm_plus_CRYPTO_BYTES_0 ->
  crypto_sign_signature sm_plus_CRYPTO_BYTES_0 sk_0
    & \(sm_up_to_CRYPTOBYTES_0, smlen_0, sm_plus_CRYPTO_BYTES_1, sk_1, _) ->
  (smlen_0 + `mlen) & \smlen_1 ->
  (sm_up_to_CRYPTOBYTES_0, sm_plus_CRYPTO_BYTES_1, smlen_1, m_0, sk_0, 0)


// sign.c - crypto_sign_verify

crypto_sign_verify : {slen, mlen} Literal slen [64] =>
  [CRYPTO_BYTES][8] -> [mlen][8] -> [CRYPTO_PUBLICKEYBYTES][8] ->
  ([CRYPTO_BYTES][8], [mlen][8], [CRYPTO_PUBLICKEYBYTES][8], [32])
crypto_sign_verify sig_0 m_0 pk_0 =
  if (`slen : [64]) != `CRYPTO_BYTES then
    (sig_0, m_0, pk_0, 0xffffffff) else

  unpack_pk pk_0 & \(rho_0, t1_0, pk_1) ->
  unpack_sig sig_0 & \(c_0, z_0, h_0, sig_1, unpack_sig_res) ->
  if unpack_sig_res != 0 then
    (sig_1, m_0, pk_1, 0xffffffff) else
  polyvecl_chknorm z_0 (`GAMMA1 - `BETA) & \(z_1, polyvecl_chknorm_res) ->
  if polyvecl_chknorm_res != 0 then
    (sig_1, m_0, pk_1, 0xffffffff) else
  
  /* Compute CRH(H(rho, t1), msg) */
  shake256 pk_1 & \(mu_0, pk_2) ->
  shake256_init & \state_0 ->
  shake256_absorb`{CRHBYTES} state_0 mu_0 & \(state_1, mu_1) ->
  shake256_absorb`{mlen} state_1 m_0 & \(state_2, m_1) ->
  shake256_finalize state_2 & \state_3 ->
  shake256_squeeze`{CRHBYTES} state_3 & \(mu_2, state_4) ->

  /* Matrix-vector multiplication; compute Az - c2^dt1 */
  poly_challenge c_0 & \(cp_0, c_1) ->
  polyvec_matrix_expand rho_0 & \(mat_0, rho_1) ->

  polyvecl_ntt z_1 & \z_2 ->
  polyvec_matrix_pointwise_montgomery mat_0 z_2 & \(w1_0, mat_1, z_3) ->

  poly_ntt cp_0 & \cp_1 ->
  polyveck_shiftl t1_0 & \t1_1 ->
  polyveck_ntt t1_1 & \t1_2 ->
  polyveck_pointwise_poly_montgomery cp_1 t1_2 & \(t1_prime_0, cp_2, t1_3) ->

  polyveck_sub w1_0 t1_prime_0 & \(w1_1, t1_prime_1) ->
  polyveck_reduce w1_1 & \w1_2 ->
  polyveck_invntt_tomont w1_2 & \w1_3 ->

  /* Reconstruct w1 */
  polyveck_caddq w1_3 & \w1_4 ->
  polyveck_use_hint w1_4 h_0 & \(w1_5, h_1) ->
  polyveck_pack_w1 w1_5 & \(buf_0, w1_6) ->

  /* Call random oracle and verify challenge */
  shake256_init & \state_5 ->
  shake256_absorb`{CRHBYTES} state_5 mu_2 & \(state_6, mu_3) ->
  shake256_absorb`{K*POLYW1_PACKEDBYTES} state_6 buf_0 & \(state_7, buf_1) ->
  shake256_finalize state_7 & \state_8 ->
  shake256_squeeze`{CTILDEBYTES} state_8 & \(c2_0, state_9) ->
  loop sig_1 m_1 pk_2 c_1 c2_0 0
  where loop : [CRYPTO_BYTES][8] -> [mlen][8] -> [CRYPTO_PUBLICKEYBYTES][8] ->
               [CTILDEBYTES][8] -> [CTILDEBYTES][8] -> [32] ->
               ([CRYPTO_BYTES][8], [mlen][8], [CRYPTO_PUBLICKEYBYTES][8], [32])
        loop sig_1 m_1 pk_2 c_1 c2_0 i =
          if i < `CTILDEBYTES
          then if c_1 @ i != c2_0 @ i
               then (sig_1, m_1, pk_2, -1)
               else loop sig_1 m_1 pk_2 c_1 c2_0 (i+1)
          else (sig_1, m_1, pk_2, 0)
