-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.9 from Parser.y
-----------------------------------------------------------------------------

state 56 contains 10 shift/reduce conflicts.
state 58 contains 10 shift/reduce conflicts.

rule 53 is unused
rule 54 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> TopStatement                       (0)
	TopStatement -> 'let' Declarations1                (1)
	TopStatement -> name '::' CType                    (2)
	TopStatement -> 'type' name '=' CType              (3)
	TopStatement -> 'import' Import                    (4)
	BlockStatement -> Expr                             (5)
	BlockStatement -> name '=' Expr                    (6)
	BlockStatement -> name '::' CType                  (7)
	BlockStatement -> 'let' Declarations1              (8)
	Declaration -> name Args MaybeType '=' Expr        (9)
	Import -> name                                     (10)
	Import -> name '(' CommaSepNames ')'               (11)
	Import -> name 'as' name                           (12)
	Import -> name '(' CommaSepNames ')' 'as' name     (13)
	Arg -> name                                        (14)
	Arg -> '(' name ':' PType ')'                      (15)
	Expr -> Primitive                                  (16)
	Expr -> Application                                (17)
	Primitive -> UnsafePrimitive                       (18)
	Primitive -> SafePrimitive                         (19)
	Application -> SafePrimitive Primitive             (20)
	Application -> Application Primitive               (21)
	UnsafePrimitive -> 'fun' Args1 MaybeType '->' Expr   (22)
	UnsafePrimitive -> 'let' Declarations1 'in' Expr   (23)
	UnsafePrimitive -> SafePrimitive infixOp Expr      (24)
	SafePrimitive -> bits MaybeType                    (25)
	SafePrimitive -> string MaybeType                  (26)
	SafePrimitive -> int MaybeType                     (27)
	SafePrimitive -> name MaybeType                    (28)
	SafePrimitive -> '(' Expr ')'                      (29)
	SafePrimitive -> ' [' CommaSepExprs ']' MaybeType   (30)
	SafePrimitive -> '{' CommaSepFields '}' MaybeType   (31)
	SafePrimitive -> 'do' '{' SemiSepBlockStmts '}'    (32)
	SafePrimitive -> SafePrimitive '.' name MaybeType   (33)
	SafePrimitive -> SafePrimitive '[' Expr ']' MaybeType   (34)
	Field -> name ':' Expr                             (35)
	Field -> string ':' Expr                           (36)
	CType -> 'integer'                                 (37)
	CType -> name                                      (38)
	CType -> '[' int ']'                               (39)
	CType -> ' [' int ']'                              (40)
	PType -> 'integer'                                 (41)
	PType -> name                                      (42)
	PType -> '[' int ']'                               (43)
	PType -> ' [' int ']'                              (44)
	MaybeType ->                                       (45)
	MaybeType -> ':' PType                             (46)
	Declarations1 -> Declaration                       (47)
	Declarations1 -> Declaration 'and' Declarations1   (48)
	Args ->                                            (49)
	Args -> Args1                                      (50)
	Args1 -> Arg                                       (51)
	Args1 -> Arg Args1                                 (52)
	SemiSepTopStmts ->                                 (53)
	SemiSepTopStmts -> TopStatement ';' SemiSepTopStmts   (54)
	SemiSepBlockStmts ->                               (55)
	SemiSepBlockStmts -> BlockStatement ';' SemiSepBlockStmts   (56)
	CommaSepExprs ->                                   (57)
	CommaSepExprs -> CommaSepExprs1                    (58)
	CommaSepExprs1 -> Expr                             (59)
	CommaSepExprs1 -> Expr ',' CommaSepExprs1          (60)
	CommaSepFields ->                                  (61)
	CommaSepFields -> CommaSepFields1                  (62)
	CommaSepFields1 -> Field                           (63)
	CommaSepFields1 -> Field ',' CommaSepFields1       (64)
	CommaSepNames ->                                   (65)
	CommaSepNames -> CommaSepNames1                    (66)
	CommaSepNames1 -> name                             (67)
	CommaSepNames1 -> name ',' CommaSepNames1          (68)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'import'       { T.Keyword    _ "import" }
	'as'           { T.Keyword    _ "as" }
	'let'          { T.Keyword    _ "let" }
	'and'          { T.Keyword    _ "and" }
	'fun'          { T.Keyword    _ "fun" }
	'in'           { T.Keyword    _ "in" }
	'type'         { T.Keyword    _ "type" }
	'do'           { T.Keyword    _ "do" }
	'integer'      { T.Keyword    _ "integer" }
	'='            { T.Infix      _ "=" }
	'->'           { T.Infix      _ "->" }
	';'            { T.Infix      _ ";" }
	','            { T.Infix      _ "," }
	':'            { T.Infix      _ ":" }
	'::'           { T.Infix      _ "::" }
	'('            { T.OutfixL    _ "(" }
	')'            { T.OutfixR    _ ")" }
	' ['           { T.OutfixL    _ "[" }
	']'            { T.OutfixR    _ "]" }
	'{'            { T.OutfixL    _ "{" }
	'}'            { T.OutfixR    _ "}" }
	'['            { T.Postfix    _ "[" }
	'.'            { T.Postfix    _ "." }
	infixOp        { T.Infix      _ $$ }
	bits           { T.Bitfield   _ $$ }
	string         { T.String     _ $$ }
	int            { T.Integer    _ $$ }
	name           { T.Identifier _ $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	TopStatement    rules 1, 2, 3, 4
	BlockStatement  rules 5, 6, 7, 8
	Declaration     rule  9
	Import          rules 10, 11, 12, 13
	Arg             rules 14, 15
	Expr            rules 16, 17
	Primitive       rules 18, 19
	Application     rules 20, 21
	UnsafePrimitive rules 22, 23, 24
	SafePrimitive   rules 25, 26, 27, 28, 29, 30, 31, 32, 33, 34
	Field           rules 35, 36
	CType           rules 37, 38, 39, 40
	PType           rules 41, 42, 43, 44
	MaybeType       rules 45, 46
	Declarations1   rules 47, 48
	Args            rules 49, 50
	Args1           rules 51, 52
	SemiSepTopStmts rules 53, 54
	SemiSepBlockStmts rules 55, 56
	CommaSepExprs   rules 57, 58
	CommaSepExprs1  rules 59, 60
	CommaSepFields  rules 61, 62
	CommaSepFields1 rules 63, 64
	CommaSepNames   rules 65, 66
	CommaSepNames1  rules 67, 68

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'import'       shift, and enter state 4
	'let'          shift, and enter state 2
	'type'         shift, and enter state 5
	name           shift, and enter state 6

	TopStatement   goto state 3

State 1


	'let'          shift, and enter state 2


State 2

	TopStatement -> 'let' . Declarations1               (rule 1)

	name           shift, and enter state 13

	Declaration    goto state 11
	Declarations1  goto state 12

State 3

	%start_parse -> TopStatement .                      (rule 0)

	%eof           accept


State 4

	TopStatement -> 'import' . Import                   (rule 4)

	name           shift, and enter state 10

	Import         goto state 9

State 5

	TopStatement -> 'type' . name '=' CType             (rule 3)

	name           shift, and enter state 8


State 6

	TopStatement -> name . '::' CType                   (rule 2)

	'::'           shift, and enter state 7


State 7

	TopStatement -> name '::' . CType                   (rule 2)

	'integer'      shift, and enter state 24
	' ['           shift, and enter state 25
	'['            shift, and enter state 26
	name           shift, and enter state 27

	CType          goto state 23

State 8

	TopStatement -> 'type' name . '=' CType             (rule 3)

	'='            shift, and enter state 22


State 9

	TopStatement -> 'import' Import .                   (rule 4)

	%eof           reduce using rule 4


State 10

	Import -> name .                                    (rule 10)
	Import -> name . '(' CommaSepNames ')'              (rule 11)
	Import -> name . 'as' name                          (rule 12)
	Import -> name . '(' CommaSepNames ')' 'as' name    (rule 13)

	'as'           shift, and enter state 20
	'('            shift, and enter state 21
	%eof           reduce using rule 10


State 11

	Declarations1 -> Declaration .                      (rule 47)
	Declarations1 -> Declaration . 'and' Declarations1    (rule 48)

	'and'          shift, and enter state 19
	'in'           reduce using rule 47
	';'            reduce using rule 47
	%eof           reduce using rule 47


State 12

	TopStatement -> 'let' Declarations1 .               (rule 1)

	%eof           reduce using rule 1


State 13

	Declaration -> name . Args MaybeType '=' Expr       (rule 9)

	'='            reduce using rule 49
	':'            reduce using rule 49
	'('            shift, and enter state 17
	name           shift, and enter state 18

	Arg            goto state 14
	Args           goto state 15
	Args1          goto state 16

State 14

	Args1 -> Arg .                                      (rule 51)
	Args1 -> Arg . Args1                                (rule 52)

	'='            reduce using rule 51
	'->'           reduce using rule 51
	':'            reduce using rule 51
	'('            shift, and enter state 17
	name           shift, and enter state 18

	Arg            goto state 14
	Args1          goto state 39

State 15

	Declaration -> name Args . MaybeType '=' Expr       (rule 9)

	'='            reduce using rule 45
	':'            shift, and enter state 38

	MaybeType      goto state 37

State 16

	Args -> Args1 .                                     (rule 50)

	'='            reduce using rule 50
	':'            reduce using rule 50


State 17

	Arg -> '(' . name ':' PType ')'                     (rule 15)

	name           shift, and enter state 36


State 18

	Arg -> name .                                       (rule 14)

	'='            reduce using rule 14
	'->'           reduce using rule 14
	':'            reduce using rule 14
	'('            reduce using rule 14
	name           reduce using rule 14


State 19

	Declarations1 -> Declaration 'and' . Declarations1    (rule 48)

	name           shift, and enter state 13

	Declaration    goto state 11
	Declarations1  goto state 35

State 20

	Import -> name 'as' . name                          (rule 12)

	name           shift, and enter state 34


State 21

	Import -> name '(' . CommaSepNames ')'              (rule 11)
	Import -> name '(' . CommaSepNames ')' 'as' name    (rule 13)

	')'            reduce using rule 65
	name           shift, and enter state 33

	CommaSepNames  goto state 31
	CommaSepNames1 goto state 32

State 22

	TopStatement -> 'type' name '=' . CType             (rule 3)

	'integer'      shift, and enter state 24
	' ['           shift, and enter state 25
	'['            shift, and enter state 26
	name           shift, and enter state 27

	CType          goto state 30

State 23

	TopStatement -> name '::' CType .                   (rule 2)

	%eof           reduce using rule 2


State 24

	CType -> 'integer' .                                (rule 37)

	';'            reduce using rule 37
	%eof           reduce using rule 37


State 25

	CType -> ' [' . int ']'                             (rule 40)

	int            shift, and enter state 29


State 26

	CType -> '[' . int ']'                              (rule 39)

	int            shift, and enter state 28


State 27

	CType -> name .                                     (rule 38)

	';'            reduce using rule 38
	%eof           reduce using rule 38


State 28

	CType -> '[' int . ']'                              (rule 39)

	']'            shift, and enter state 50


State 29

	CType -> ' [' int . ']'                             (rule 40)

	']'            shift, and enter state 49


State 30

	TopStatement -> 'type' name '=' CType .             (rule 3)

	%eof           reduce using rule 3


State 31

	Import -> name '(' CommaSepNames . ')'              (rule 11)
	Import -> name '(' CommaSepNames . ')' 'as' name    (rule 13)

	')'            shift, and enter state 48


State 32

	CommaSepNames -> CommaSepNames1 .                   (rule 66)

	')'            reduce using rule 66


State 33

	CommaSepNames1 -> name .                            (rule 67)
	CommaSepNames1 -> name . ',' CommaSepNames1         (rule 68)

	','            shift, and enter state 47
	')'            reduce using rule 67


State 34

	Import -> name 'as' name .                          (rule 12)

	%eof           reduce using rule 12


State 35

	Declarations1 -> Declaration 'and' Declarations1 .    (rule 48)

	'in'           reduce using rule 48
	';'            reduce using rule 48
	%eof           reduce using rule 48


State 36

	Arg -> '(' name . ':' PType ')'                     (rule 15)

	':'            shift, and enter state 46


State 37

	Declaration -> name Args MaybeType . '=' Expr       (rule 9)

	'='            shift, and enter state 45


State 38

	MaybeType -> ':' . PType                            (rule 46)

	'integer'      shift, and enter state 41
	' ['           shift, and enter state 42
	'['            shift, and enter state 43
	name           shift, and enter state 44

	PType          goto state 40

State 39

	Args1 -> Arg Args1 .                                (rule 52)

	'='            reduce using rule 52
	'->'           reduce using rule 52
	':'            reduce using rule 52


State 40

	MaybeType -> ':' PType .                            (rule 46)

	'let'          reduce using rule 46
	'and'          reduce using rule 46
	'fun'          reduce using rule 46
	'in'           reduce using rule 46
	'do'           reduce using rule 46
	'='            reduce using rule 46
	'->'           reduce using rule 46
	';'            reduce using rule 46
	','            reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	' ['           reduce using rule 46
	']'            reduce using rule 46
	'{'            reduce using rule 46
	'}'            reduce using rule 46
	'['            reduce using rule 46
	'.'            reduce using rule 46
	infixOp        reduce using rule 46
	bits           reduce using rule 46
	string         reduce using rule 46
	int            reduce using rule 46
	name           reduce using rule 46
	%eof           reduce using rule 46


State 41

	PType -> 'integer' .                                (rule 41)

	'let'          reduce using rule 41
	'and'          reduce using rule 41
	'fun'          reduce using rule 41
	'in'           reduce using rule 41
	'do'           reduce using rule 41
	'='            reduce using rule 41
	'->'           reduce using rule 41
	';'            reduce using rule 41
	','            reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	' ['           reduce using rule 41
	']'            reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	'['            reduce using rule 41
	'.'            reduce using rule 41
	infixOp        reduce using rule 41
	bits           reduce using rule 41
	string         reduce using rule 41
	int            reduce using rule 41
	name           reduce using rule 41
	%eof           reduce using rule 41


State 42

	PType -> ' [' . int ']'                             (rule 44)

	int            shift, and enter state 70


State 43

	PType -> '[' . int ']'                              (rule 43)

	int            shift, and enter state 69


State 44

	PType -> name .                                     (rule 42)

	'let'          reduce using rule 42
	'and'          reduce using rule 42
	'fun'          reduce using rule 42
	'in'           reduce using rule 42
	'do'           reduce using rule 42
	'='            reduce using rule 42
	'->'           reduce using rule 42
	';'            reduce using rule 42
	','            reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	' ['           reduce using rule 42
	']'            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	'['            reduce using rule 42
	'.'            reduce using rule 42
	infixOp        reduce using rule 42
	bits           reduce using rule 42
	string         reduce using rule 42
	int            reduce using rule 42
	name           reduce using rule 42
	%eof           reduce using rule 42


State 45

	Declaration -> name Args MaybeType '=' . Expr       (rule 9)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 54
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58

State 46

	Arg -> '(' name ':' . PType ')'                     (rule 15)

	'integer'      shift, and enter state 41
	' ['           shift, and enter state 42
	'['            shift, and enter state 43
	name           shift, and enter state 44

	PType          goto state 53

State 47

	CommaSepNames1 -> name ',' . CommaSepNames1         (rule 68)

	name           shift, and enter state 33

	CommaSepNames1 goto state 52

State 48

	Import -> name '(' CommaSepNames ')' .              (rule 11)
	Import -> name '(' CommaSepNames ')' . 'as' name    (rule 13)

	'as'           shift, and enter state 51
	%eof           reduce using rule 11


State 49

	CType -> ' [' int ']' .                             (rule 40)

	';'            reduce using rule 40
	%eof           reduce using rule 40


State 50

	CType -> '[' int ']' .                              (rule 39)

	';'            reduce using rule 39
	%eof           reduce using rule 39


State 51

	Import -> name '(' CommaSepNames ')' 'as' . name    (rule 13)

	name           shift, and enter state 96


State 52

	CommaSepNames1 -> name ',' CommaSepNames1 .         (rule 68)

	')'            reduce using rule 68


State 53

	Arg -> '(' name ':' PType . ')'                     (rule 15)

	')'            shift, and enter state 95


State 54

	Declaration -> name Args MaybeType '=' Expr .       (rule 9)

	'and'          reduce using rule 9
	'in'           reduce using rule 9
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 55

	Expr -> Primitive .                                 (rule 16)

	'let'          reduce using rule 16
	'and'          reduce using rule 16
	'fun'          reduce using rule 16
	'in'           reduce using rule 16
	'do'           reduce using rule 16
	';'            reduce using rule 16
	','            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	' ['           reduce using rule 16
	']'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	bits           reduce using rule 16
	string         reduce using rule 16
	int            reduce using rule 16
	name           reduce using rule 16
	%eof           reduce using rule 16


State 56

	Expr -> Application .                               (rule 17)
	Application -> Application . Primitive              (rule 21)

	'let'          shift, and enter state 59
			(reduce using rule 17)

	'and'          reduce using rule 17
	'fun'          shift, and enter state 60
			(reduce using rule 17)

	'in'           reduce using rule 17
	'do'           shift, and enter state 61
			(reduce using rule 17)

	';'            reduce using rule 17
	','            reduce using rule 17
	'('            shift, and enter state 62
			(reduce using rule 17)

	')'            reduce using rule 17
	' ['           shift, and enter state 63
			(reduce using rule 17)

	']'            reduce using rule 17
	'{'            shift, and enter state 64
			(reduce using rule 17)

	'}'            reduce using rule 17
	bits           shift, and enter state 65
			(reduce using rule 17)

	string         shift, and enter state 66
			(reduce using rule 17)

	int            shift, and enter state 67
			(reduce using rule 17)

	name           shift, and enter state 68
			(reduce using rule 17)

	%eof           reduce using rule 17

	Primitive      goto state 94
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 90

State 57

	Primitive -> UnsafePrimitive .                      (rule 18)

	'let'          reduce using rule 18
	'and'          reduce using rule 18
	'fun'          reduce using rule 18
	'in'           reduce using rule 18
	'do'           reduce using rule 18
	';'            reduce using rule 18
	','            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	' ['           reduce using rule 18
	']'            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	bits           reduce using rule 18
	string         reduce using rule 18
	int            reduce using rule 18
	name           reduce using rule 18
	%eof           reduce using rule 18


State 58

	Primitive -> SafePrimitive .                        (rule 19)
	Application -> SafePrimitive . Primitive            (rule 20)
	UnsafePrimitive -> SafePrimitive . infixOp Expr     (rule 24)
	SafePrimitive -> SafePrimitive . '.' name MaybeType    (rule 33)
	SafePrimitive -> SafePrimitive . '[' Expr ']' MaybeType    (rule 34)

	'let'          shift, and enter state 59
			(reduce using rule 19)

	'and'          reduce using rule 19
	'fun'          shift, and enter state 60
			(reduce using rule 19)

	'in'           reduce using rule 19
	'do'           shift, and enter state 61
			(reduce using rule 19)

	';'            reduce using rule 19
	','            reduce using rule 19
	'('            shift, and enter state 62
			(reduce using rule 19)

	')'            reduce using rule 19
	' ['           shift, and enter state 63
			(reduce using rule 19)

	']'            reduce using rule 19
	'{'            shift, and enter state 64
			(reduce using rule 19)

	'}'            reduce using rule 19
	'['            shift, and enter state 91
	'.'            shift, and enter state 92
	infixOp        shift, and enter state 93
	bits           shift, and enter state 65
			(reduce using rule 19)

	string         shift, and enter state 66
			(reduce using rule 19)

	int            shift, and enter state 67
			(reduce using rule 19)

	name           shift, and enter state 68
			(reduce using rule 19)

	%eof           reduce using rule 19

	Primitive      goto state 89
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 90

State 59

	UnsafePrimitive -> 'let' . Declarations1 'in' Expr    (rule 23)

	name           shift, and enter state 13

	Declaration    goto state 11
	Declarations1  goto state 88

State 60

	UnsafePrimitive -> 'fun' . Args1 MaybeType '->' Expr    (rule 22)

	'('            shift, and enter state 17
	name           shift, and enter state 18

	Arg            goto state 14
	Args1          goto state 87

State 61

	SafePrimitive -> 'do' . '{' SemiSepBlockStmts '}'    (rule 32)

	'{'            shift, and enter state 86


State 62

	SafePrimitive -> '(' . Expr ')'                     (rule 29)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 85
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58

State 63

	SafePrimitive -> ' [' . CommaSepExprs ']' MaybeType    (rule 30)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	']'            reduce using rule 57
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 82
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58
	CommaSepExprs  goto state 83
	CommaSepExprs1 goto state 84

State 64

	SafePrimitive -> '{' . CommaSepFields '}' MaybeType    (rule 31)

	'}'            reduce using rule 61
	string         shift, and enter state 80
	name           shift, and enter state 81

	Field          goto state 77
	CommaSepFields goto state 78
	CommaSepFields1goto state 79

State 65

	SafePrimitive -> bits . MaybeType                   (rule 25)

	'let'          reduce using rule 45
	'and'          reduce using rule 45
	'fun'          reduce using rule 45
	'in'           reduce using rule 45
	'do'           reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	':'            shift, and enter state 38
	'('            reduce using rule 45
	')'            reduce using rule 45
	' ['           reduce using rule 45
	']'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	'['            reduce using rule 45
	'.'            reduce using rule 45
	infixOp        reduce using rule 45
	bits           reduce using rule 45
	string         reduce using rule 45
	int            reduce using rule 45
	name           reduce using rule 45
	%eof           reduce using rule 45

	MaybeType      goto state 76

State 66

	SafePrimitive -> string . MaybeType                 (rule 26)

	'let'          reduce using rule 45
	'and'          reduce using rule 45
	'fun'          reduce using rule 45
	'in'           reduce using rule 45
	'do'           reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	':'            shift, and enter state 38
	'('            reduce using rule 45
	')'            reduce using rule 45
	' ['           reduce using rule 45
	']'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	'['            reduce using rule 45
	'.'            reduce using rule 45
	infixOp        reduce using rule 45
	bits           reduce using rule 45
	string         reduce using rule 45
	int            reduce using rule 45
	name           reduce using rule 45
	%eof           reduce using rule 45

	MaybeType      goto state 75

State 67

	SafePrimitive -> int . MaybeType                    (rule 27)

	'let'          reduce using rule 45
	'and'          reduce using rule 45
	'fun'          reduce using rule 45
	'in'           reduce using rule 45
	'do'           reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	':'            shift, and enter state 38
	'('            reduce using rule 45
	')'            reduce using rule 45
	' ['           reduce using rule 45
	']'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	'['            reduce using rule 45
	'.'            reduce using rule 45
	infixOp        reduce using rule 45
	bits           reduce using rule 45
	string         reduce using rule 45
	int            reduce using rule 45
	name           reduce using rule 45
	%eof           reduce using rule 45

	MaybeType      goto state 74

State 68

	SafePrimitive -> name . MaybeType                   (rule 28)

	'let'          reduce using rule 45
	'and'          reduce using rule 45
	'fun'          reduce using rule 45
	'in'           reduce using rule 45
	'do'           reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	':'            shift, and enter state 38
	'('            reduce using rule 45
	')'            reduce using rule 45
	' ['           reduce using rule 45
	']'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	'['            reduce using rule 45
	'.'            reduce using rule 45
	infixOp        reduce using rule 45
	bits           reduce using rule 45
	string         reduce using rule 45
	int            reduce using rule 45
	name           reduce using rule 45
	%eof           reduce using rule 45

	MaybeType      goto state 73

State 69

	PType -> '[' int . ']'                              (rule 43)

	']'            shift, and enter state 72


State 70

	PType -> ' [' int . ']'                             (rule 44)

	']'            shift, and enter state 71


State 71

	PType -> ' [' int ']' .                             (rule 44)

	'let'          reduce using rule 44
	'and'          reduce using rule 44
	'fun'          reduce using rule 44
	'in'           reduce using rule 44
	'do'           reduce using rule 44
	'='            reduce using rule 44
	'->'           reduce using rule 44
	';'            reduce using rule 44
	','            reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	' ['           reduce using rule 44
	']'            reduce using rule 44
	'{'            reduce using rule 44
	'}'            reduce using rule 44
	'['            reduce using rule 44
	'.'            reduce using rule 44
	infixOp        reduce using rule 44
	bits           reduce using rule 44
	string         reduce using rule 44
	int            reduce using rule 44
	name           reduce using rule 44
	%eof           reduce using rule 44


State 72

	PType -> '[' int ']' .                              (rule 43)

	'let'          reduce using rule 43
	'and'          reduce using rule 43
	'fun'          reduce using rule 43
	'in'           reduce using rule 43
	'do'           reduce using rule 43
	'='            reduce using rule 43
	'->'           reduce using rule 43
	';'            reduce using rule 43
	','            reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	' ['           reduce using rule 43
	']'            reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	'['            reduce using rule 43
	'.'            reduce using rule 43
	infixOp        reduce using rule 43
	bits           reduce using rule 43
	string         reduce using rule 43
	int            reduce using rule 43
	name           reduce using rule 43
	%eof           reduce using rule 43


State 73

	SafePrimitive -> name MaybeType .                   (rule 28)

	'let'          reduce using rule 28
	'and'          reduce using rule 28
	'fun'          reduce using rule 28
	'in'           reduce using rule 28
	'do'           reduce using rule 28
	';'            reduce using rule 28
	','            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	' ['           reduce using rule 28
	']'            reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	'['            reduce using rule 28
	'.'            reduce using rule 28
	infixOp        reduce using rule 28
	bits           reduce using rule 28
	string         reduce using rule 28
	int            reduce using rule 28
	name           reduce using rule 28
	%eof           reduce using rule 28


State 74

	SafePrimitive -> int MaybeType .                    (rule 27)

	'let'          reduce using rule 27
	'and'          reduce using rule 27
	'fun'          reduce using rule 27
	'in'           reduce using rule 27
	'do'           reduce using rule 27
	';'            reduce using rule 27
	','            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	' ['           reduce using rule 27
	']'            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	'['            reduce using rule 27
	'.'            reduce using rule 27
	infixOp        reduce using rule 27
	bits           reduce using rule 27
	string         reduce using rule 27
	int            reduce using rule 27
	name           reduce using rule 27
	%eof           reduce using rule 27


State 75

	SafePrimitive -> string MaybeType .                 (rule 26)

	'let'          reduce using rule 26
	'and'          reduce using rule 26
	'fun'          reduce using rule 26
	'in'           reduce using rule 26
	'do'           reduce using rule 26
	';'            reduce using rule 26
	','            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	' ['           reduce using rule 26
	']'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	'['            reduce using rule 26
	'.'            reduce using rule 26
	infixOp        reduce using rule 26
	bits           reduce using rule 26
	string         reduce using rule 26
	int            reduce using rule 26
	name           reduce using rule 26
	%eof           reduce using rule 26


State 76

	SafePrimitive -> bits MaybeType .                   (rule 25)

	'let'          reduce using rule 25
	'and'          reduce using rule 25
	'fun'          reduce using rule 25
	'in'           reduce using rule 25
	'do'           reduce using rule 25
	';'            reduce using rule 25
	','            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	' ['           reduce using rule 25
	']'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	'['            reduce using rule 25
	'.'            reduce using rule 25
	infixOp        reduce using rule 25
	bits           reduce using rule 25
	string         reduce using rule 25
	int            reduce using rule 25
	name           reduce using rule 25
	%eof           reduce using rule 25


State 77

	CommaSepFields1 -> Field .                          (rule 63)
	CommaSepFields1 -> Field . ',' CommaSepFields1      (rule 64)

	','            shift, and enter state 113
	'}'            reduce using rule 63


State 78

	SafePrimitive -> '{' CommaSepFields . '}' MaybeType    (rule 31)

	'}'            shift, and enter state 112


State 79

	CommaSepFields -> CommaSepFields1 .                 (rule 62)

	'}'            reduce using rule 62


State 80

	Field -> string . ':' Expr                          (rule 36)

	':'            shift, and enter state 111


State 81

	Field -> name . ':' Expr                            (rule 35)

	':'            shift, and enter state 110


State 82

	CommaSepExprs1 -> Expr .                            (rule 59)
	CommaSepExprs1 -> Expr . ',' CommaSepExprs1         (rule 60)

	','            shift, and enter state 109
	']'            reduce using rule 59


State 83

	SafePrimitive -> ' [' CommaSepExprs . ']' MaybeType    (rule 30)

	']'            shift, and enter state 108


State 84

	CommaSepExprs -> CommaSepExprs1 .                   (rule 58)

	']'            reduce using rule 58


State 85

	SafePrimitive -> '(' Expr . ')'                     (rule 29)

	')'            shift, and enter state 107


State 86

	SafePrimitive -> 'do' '{' . SemiSepBlockStmts '}'    (rule 32)

	'let'          shift, and enter state 105
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	'}'            reduce using rule 55
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 106

	BlockStatement goto state 102
	Expr           goto state 103
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58
	SemiSepBlockStmtsgoto state 104

State 87

	UnsafePrimitive -> 'fun' Args1 . MaybeType '->' Expr    (rule 22)

	'->'           reduce using rule 45
	':'            shift, and enter state 38

	MaybeType      goto state 101

State 88

	UnsafePrimitive -> 'let' Declarations1 . 'in' Expr    (rule 23)

	'in'           shift, and enter state 100


State 89

	Application -> SafePrimitive Primitive .            (rule 20)

	'let'          reduce using rule 20
	'and'          reduce using rule 20
	'fun'          reduce using rule 20
	'in'           reduce using rule 20
	'do'           reduce using rule 20
	';'            reduce using rule 20
	','            reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	' ['           reduce using rule 20
	']'            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	bits           reduce using rule 20
	string         reduce using rule 20
	int            reduce using rule 20
	name           reduce using rule 20
	%eof           reduce using rule 20


State 90

	Primitive -> SafePrimitive .                        (rule 19)
	UnsafePrimitive -> SafePrimitive . infixOp Expr     (rule 24)
	SafePrimitive -> SafePrimitive . '.' name MaybeType    (rule 33)
	SafePrimitive -> SafePrimitive . '[' Expr ']' MaybeType    (rule 34)

	'let'          reduce using rule 19
	'and'          reduce using rule 19
	'fun'          reduce using rule 19
	'in'           reduce using rule 19
	'do'           reduce using rule 19
	';'            reduce using rule 19
	','            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	' ['           reduce using rule 19
	']'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	'['            shift, and enter state 91
	'.'            shift, and enter state 92
	infixOp        shift, and enter state 93
	bits           reduce using rule 19
	string         reduce using rule 19
	int            reduce using rule 19
	name           reduce using rule 19
	%eof           reduce using rule 19


State 91

	SafePrimitive -> SafePrimitive '[' . Expr ']' MaybeType    (rule 34)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 99
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58

State 92

	SafePrimitive -> SafePrimitive '.' . name MaybeType    (rule 33)

	name           shift, and enter state 98


State 93

	UnsafePrimitive -> SafePrimitive infixOp . Expr     (rule 24)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 97
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58

State 94

	Application -> Application Primitive .              (rule 21)

	'let'          reduce using rule 21
	'and'          reduce using rule 21
	'fun'          reduce using rule 21
	'in'           reduce using rule 21
	'do'           reduce using rule 21
	';'            reduce using rule 21
	','            reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	' ['           reduce using rule 21
	']'            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	bits           reduce using rule 21
	string         reduce using rule 21
	int            reduce using rule 21
	name           reduce using rule 21
	%eof           reduce using rule 21


State 95

	Arg -> '(' name ':' PType ')' .                     (rule 15)

	'='            reduce using rule 15
	'->'           reduce using rule 15
	':'            reduce using rule 15
	'('            reduce using rule 15
	name           reduce using rule 15


State 96

	Import -> name '(' CommaSepNames ')' 'as' name .    (rule 13)

	%eof           reduce using rule 13


State 97

	UnsafePrimitive -> SafePrimitive infixOp Expr .     (rule 24)

	'let'          reduce using rule 24
	'and'          reduce using rule 24
	'fun'          reduce using rule 24
	'in'           reduce using rule 24
	'do'           reduce using rule 24
	';'            reduce using rule 24
	','            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	' ['           reduce using rule 24
	']'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	bits           reduce using rule 24
	string         reduce using rule 24
	int            reduce using rule 24
	name           reduce using rule 24
	%eof           reduce using rule 24


State 98

	SafePrimitive -> SafePrimitive '.' name . MaybeType    (rule 33)

	'let'          reduce using rule 45
	'and'          reduce using rule 45
	'fun'          reduce using rule 45
	'in'           reduce using rule 45
	'do'           reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	':'            shift, and enter state 38
	'('            reduce using rule 45
	')'            reduce using rule 45
	' ['           reduce using rule 45
	']'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	'['            reduce using rule 45
	'.'            reduce using rule 45
	infixOp        reduce using rule 45
	bits           reduce using rule 45
	string         reduce using rule 45
	int            reduce using rule 45
	name           reduce using rule 45
	%eof           reduce using rule 45

	MaybeType      goto state 128

State 99

	SafePrimitive -> SafePrimitive '[' Expr . ']' MaybeType    (rule 34)

	']'            shift, and enter state 127


State 100

	UnsafePrimitive -> 'let' Declarations1 'in' . Expr    (rule 23)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 126
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58

State 101

	UnsafePrimitive -> 'fun' Args1 MaybeType . '->' Expr    (rule 22)

	'->'           shift, and enter state 125


State 102

	SemiSepBlockStmts -> BlockStatement . ';' SemiSepBlockStmts    (rule 56)

	';'            shift, and enter state 124


State 103

	BlockStatement -> Expr .                            (rule 5)

	';'            reduce using rule 5


State 104

	SafePrimitive -> 'do' '{' SemiSepBlockStmts . '}'    (rule 32)

	'}'            shift, and enter state 123


State 105

	BlockStatement -> 'let' . Declarations1             (rule 8)
	UnsafePrimitive -> 'let' . Declarations1 'in' Expr    (rule 23)

	name           shift, and enter state 13

	Declaration    goto state 11
	Declarations1  goto state 122

State 106

	BlockStatement -> name . '=' Expr                   (rule 6)
	BlockStatement -> name . '::' CType                 (rule 7)
	SafePrimitive -> name . MaybeType                   (rule 28)

	'let'          reduce using rule 45
	'fun'          reduce using rule 45
	'do'           reduce using rule 45
	'='            shift, and enter state 120
	';'            reduce using rule 45
	':'            shift, and enter state 38
	'::'           shift, and enter state 121
	'('            reduce using rule 45
	' ['           reduce using rule 45
	'{'            reduce using rule 45
	'['            reduce using rule 45
	'.'            reduce using rule 45
	infixOp        reduce using rule 45
	bits           reduce using rule 45
	string         reduce using rule 45
	int            reduce using rule 45
	name           reduce using rule 45

	MaybeType      goto state 73

State 107

	SafePrimitive -> '(' Expr ')' .                     (rule 29)

	'let'          reduce using rule 29
	'and'          reduce using rule 29
	'fun'          reduce using rule 29
	'in'           reduce using rule 29
	'do'           reduce using rule 29
	';'            reduce using rule 29
	','            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	' ['           reduce using rule 29
	']'            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	'['            reduce using rule 29
	'.'            reduce using rule 29
	infixOp        reduce using rule 29
	bits           reduce using rule 29
	string         reduce using rule 29
	int            reduce using rule 29
	name           reduce using rule 29
	%eof           reduce using rule 29


State 108

	SafePrimitive -> ' [' CommaSepExprs ']' . MaybeType    (rule 30)

	'let'          reduce using rule 45
	'and'          reduce using rule 45
	'fun'          reduce using rule 45
	'in'           reduce using rule 45
	'do'           reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	':'            shift, and enter state 38
	'('            reduce using rule 45
	')'            reduce using rule 45
	' ['           reduce using rule 45
	']'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	'['            reduce using rule 45
	'.'            reduce using rule 45
	infixOp        reduce using rule 45
	bits           reduce using rule 45
	string         reduce using rule 45
	int            reduce using rule 45
	name           reduce using rule 45
	%eof           reduce using rule 45

	MaybeType      goto state 119

State 109

	CommaSepExprs1 -> Expr ',' . CommaSepExprs1         (rule 60)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 82
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58
	CommaSepExprs1 goto state 118

State 110

	Field -> name ':' . Expr                            (rule 35)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 117
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58

State 111

	Field -> string ':' . Expr                          (rule 36)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 116
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58

State 112

	SafePrimitive -> '{' CommaSepFields '}' . MaybeType    (rule 31)

	'let'          reduce using rule 45
	'and'          reduce using rule 45
	'fun'          reduce using rule 45
	'in'           reduce using rule 45
	'do'           reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	':'            shift, and enter state 38
	'('            reduce using rule 45
	')'            reduce using rule 45
	' ['           reduce using rule 45
	']'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	'['            reduce using rule 45
	'.'            reduce using rule 45
	infixOp        reduce using rule 45
	bits           reduce using rule 45
	string         reduce using rule 45
	int            reduce using rule 45
	name           reduce using rule 45
	%eof           reduce using rule 45

	MaybeType      goto state 115

State 113

	CommaSepFields1 -> Field ',' . CommaSepFields1      (rule 64)

	string         shift, and enter state 80
	name           shift, and enter state 81

	Field          goto state 77
	CommaSepFields1goto state 114

State 114

	CommaSepFields1 -> Field ',' CommaSepFields1 .      (rule 64)

	'}'            reduce using rule 64


State 115

	SafePrimitive -> '{' CommaSepFields '}' MaybeType .    (rule 31)

	'let'          reduce using rule 31
	'and'          reduce using rule 31
	'fun'          reduce using rule 31
	'in'           reduce using rule 31
	'do'           reduce using rule 31
	';'            reduce using rule 31
	','            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	' ['           reduce using rule 31
	']'            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	'['            reduce using rule 31
	'.'            reduce using rule 31
	infixOp        reduce using rule 31
	bits           reduce using rule 31
	string         reduce using rule 31
	int            reduce using rule 31
	name           reduce using rule 31
	%eof           reduce using rule 31


State 116

	Field -> string ':' Expr .                          (rule 36)

	','            reduce using rule 36
	'}'            reduce using rule 36


State 117

	Field -> name ':' Expr .                            (rule 35)

	','            reduce using rule 35
	'}'            reduce using rule 35


State 118

	CommaSepExprs1 -> Expr ',' CommaSepExprs1 .         (rule 60)

	']'            reduce using rule 60


State 119

	SafePrimitive -> ' [' CommaSepExprs ']' MaybeType .    (rule 30)

	'let'          reduce using rule 30
	'and'          reduce using rule 30
	'fun'          reduce using rule 30
	'in'           reduce using rule 30
	'do'           reduce using rule 30
	';'            reduce using rule 30
	','            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	' ['           reduce using rule 30
	']'            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	'['            reduce using rule 30
	'.'            reduce using rule 30
	infixOp        reduce using rule 30
	bits           reduce using rule 30
	string         reduce using rule 30
	int            reduce using rule 30
	name           reduce using rule 30
	%eof           reduce using rule 30


State 120

	BlockStatement -> name '=' . Expr                   (rule 6)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 133
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58

State 121

	BlockStatement -> name '::' . CType                 (rule 7)

	'integer'      shift, and enter state 24
	' ['           shift, and enter state 25
	'['            shift, and enter state 26
	name           shift, and enter state 27

	CType          goto state 132

State 122

	BlockStatement -> 'let' Declarations1 .             (rule 8)
	UnsafePrimitive -> 'let' Declarations1 . 'in' Expr    (rule 23)

	'in'           shift, and enter state 100
	';'            reduce using rule 8


State 123

	SafePrimitive -> 'do' '{' SemiSepBlockStmts '}' .    (rule 32)

	'let'          reduce using rule 32
	'and'          reduce using rule 32
	'fun'          reduce using rule 32
	'in'           reduce using rule 32
	'do'           reduce using rule 32
	';'            reduce using rule 32
	','            reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	' ['           reduce using rule 32
	']'            reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	'['            reduce using rule 32
	'.'            reduce using rule 32
	infixOp        reduce using rule 32
	bits           reduce using rule 32
	string         reduce using rule 32
	int            reduce using rule 32
	name           reduce using rule 32
	%eof           reduce using rule 32


State 124

	SemiSepBlockStmts -> BlockStatement ';' . SemiSepBlockStmts    (rule 56)

	'let'          shift, and enter state 105
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	'}'            reduce using rule 55
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 106

	BlockStatement goto state 102
	Expr           goto state 103
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58
	SemiSepBlockStmtsgoto state 131

State 125

	UnsafePrimitive -> 'fun' Args1 MaybeType '->' . Expr    (rule 22)

	'let'          shift, and enter state 59
	'fun'          shift, and enter state 60
	'do'           shift, and enter state 61
	'('            shift, and enter state 62
	' ['           shift, and enter state 63
	'{'            shift, and enter state 64
	bits           shift, and enter state 65
	string         shift, and enter state 66
	int            shift, and enter state 67
	name           shift, and enter state 68

	Expr           goto state 130
	Primitive      goto state 55
	Application    goto state 56
	UnsafePrimitivegoto state 57
	SafePrimitive  goto state 58

State 126

	UnsafePrimitive -> 'let' Declarations1 'in' Expr .    (rule 23)

	'let'          reduce using rule 23
	'and'          reduce using rule 23
	'fun'          reduce using rule 23
	'in'           reduce using rule 23
	'do'           reduce using rule 23
	';'            reduce using rule 23
	','            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	' ['           reduce using rule 23
	']'            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	bits           reduce using rule 23
	string         reduce using rule 23
	int            reduce using rule 23
	name           reduce using rule 23
	%eof           reduce using rule 23


State 127

	SafePrimitive -> SafePrimitive '[' Expr ']' . MaybeType    (rule 34)

	'let'          reduce using rule 45
	'and'          reduce using rule 45
	'fun'          reduce using rule 45
	'in'           reduce using rule 45
	'do'           reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	':'            shift, and enter state 38
	'('            reduce using rule 45
	')'            reduce using rule 45
	' ['           reduce using rule 45
	']'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	'['            reduce using rule 45
	'.'            reduce using rule 45
	infixOp        reduce using rule 45
	bits           reduce using rule 45
	string         reduce using rule 45
	int            reduce using rule 45
	name           reduce using rule 45
	%eof           reduce using rule 45

	MaybeType      goto state 129

State 128

	SafePrimitive -> SafePrimitive '.' name MaybeType .    (rule 33)

	'let'          reduce using rule 33
	'and'          reduce using rule 33
	'fun'          reduce using rule 33
	'in'           reduce using rule 33
	'do'           reduce using rule 33
	';'            reduce using rule 33
	','            reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	' ['           reduce using rule 33
	']'            reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	'['            reduce using rule 33
	'.'            reduce using rule 33
	infixOp        reduce using rule 33
	bits           reduce using rule 33
	string         reduce using rule 33
	int            reduce using rule 33
	name           reduce using rule 33
	%eof           reduce using rule 33


State 129

	SafePrimitive -> SafePrimitive '[' Expr ']' MaybeType .    (rule 34)

	'let'          reduce using rule 34
	'and'          reduce using rule 34
	'fun'          reduce using rule 34
	'in'           reduce using rule 34
	'do'           reduce using rule 34
	';'            reduce using rule 34
	','            reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	' ['           reduce using rule 34
	']'            reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	'['            reduce using rule 34
	'.'            reduce using rule 34
	infixOp        reduce using rule 34
	bits           reduce using rule 34
	string         reduce using rule 34
	int            reduce using rule 34
	name           reduce using rule 34
	%eof           reduce using rule 34


State 130

	UnsafePrimitive -> 'fun' Args1 MaybeType '->' Expr .    (rule 22)

	'let'          reduce using rule 22
	'and'          reduce using rule 22
	'fun'          reduce using rule 22
	'in'           reduce using rule 22
	'do'           reduce using rule 22
	';'            reduce using rule 22
	','            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	' ['           reduce using rule 22
	']'            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	bits           reduce using rule 22
	string         reduce using rule 22
	int            reduce using rule 22
	name           reduce using rule 22
	%eof           reduce using rule 22


State 131

	SemiSepBlockStmts -> BlockStatement ';' SemiSepBlockStmts .    (rule 56)

	'}'            reduce using rule 56


State 132

	BlockStatement -> name '::' CType .                 (rule 7)

	';'            reduce using rule 7


State 133

	BlockStatement -> name '=' Expr .                   (rule 6)

	';'            reduce using rule 6


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 69
Number of terminals: 28
Number of non-terminals: 26
Number of states: 134
