-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.9 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_happyParse -> Statement                     (0)
	Statement -> 'let' Declarations1                   (1)
	Statement -> name '::' Type                        (2)
	Statement -> name Exprs                            (3)
	Statement -> 'type' name '=' Type                  (4)
	Statement -> 'import' Import                       (5)
	Declaration -> name Args MaybeType '=' Expr        (6)
	Declarations1 -> Declaration                       (7)
	Declarations1 -> Declaration 'and' Declarations1   (8)
	Arg -> name                                        (9)
	Arg -> '(' name ':' Type ')'                       (10)
	Args ->                                            (11)
	Args -> Args1                                      (12)
	Args1 -> Arg                                       (13)
	Args1 -> Arg Args1                                 (14)
	Import -> name                                     (15)
	Import -> name '(' CommaSepNames ')'               (16)
	Import -> name 'as' name                           (17)
	Import -> name '(' CommaSepNames ')' 'as' name     (18)
	Expr -> UnsafeExpr                                 (19)
	Expr -> SafeExpr                                   (20)
	UnsafeExpr -> 'fun' Args MaybeType '->' Expr       (21)
	UnsafeExpr -> SafeExpr Exprs1                      (22)
	UnsafeExpr -> 'let' Declarations1 'in' Expr        (23)
	SafeExpr -> bits MaybeType                         (24)
	SafeExpr -> string MaybeType                       (25)
	SafeExpr -> int MaybeType                          (26)
	SafeExpr -> name MaybeType                         (27)
	SafeExpr -> Record MaybeType                       (28)
	SafeExpr -> '(' Expr ')' MaybeType                 (29)
	SafeExpr -> ' [' CommaSepExprs ']'                 (30)
	SafeExpr -> 'do' '{' SemiSepStatements '}'         (31)
	SafeExpr -> SafeExpr '.' name                      (32)
	SafeExpr -> SafeExpr '[' Expr ']'                  (33)
	SemiSepStatements ->                               (34)
	SemiSepStatements -> Statement ';' SemiSepStatements   (35)
	Type -> 'integer'                                  (36)
	Type -> name                                       (37)
	Type -> '[' int ']'                                (38)
	Type -> ' [' int ']'                               (39)
	Type -> '[' Type ']'                               (40)
	Type -> ' [' Type ']'                              (41)
	MaybeType ->                                       (42)
	MaybeType -> ':' Type                              (43)
	Exprs ->                                           (44)
	Exprs -> Exprs1                                    (45)
	Exprs1 -> 'let' Args MaybeType '->' Expr           (46)
	Exprs1 -> SafeExpr Exprs1                          (47)
	CommaSepExprs ->                                   (48)
	CommaSepExprs -> CommaSepExprs1                    (49)
	CommaSepExprs1 -> Expr                             (50)
	CommaSepExprs1 -> Expr ',' CommaSepExprs1          (51)
	Record -> '{' CommaSepFields '}'                   (52)
	Field -> name ':' Expr                             (53)
	Field -> string ':' Expr                           (54)
	CommaSepFields ->                                  (55)
	CommaSepFields -> CommaSepFields1                  (56)
	CommaSepFields1 -> Field                           (57)
	CommaSepFields1 -> Field ',' CommaSepFields1       (58)
	CommaSepNames ->                                   (59)
	CommaSepNames -> CommaSepNames1                    (60)
	CommaSepNames1 -> name                             (61)
	CommaSepNames1 -> name ',' CommaSepNames1          (62)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'import'       { T.Keyword _ "import" }
	'as'           { T.Keyword _ "as" }
	'let'          { T.Keyword _ "let" }
	'and'          { T.Keyword _ "and" }
	'fun'          { T.Keyword _ "fun" }
	'in'           { T.Keyword _ "in" }
	'type'         { T.Keyword _ "type" }
	'do'           { T.Keyword _ "do" }
	'integer'      { T.Keyword _ "integer" }
	'='            { T.Infix _ "=" }
	'->'           { T.Infix _ "->" }
	';'            { T.Infix _ ";" }
	','            { T.Infix _ "," }
	':'            { T.Infix _ ":" }
	'::'           { T.Infix _ "::" }
	'('            { T.OutfixL _ "(" }
	')'            { T.OutfixR _ ")" }
	' ['           { T.OutfixL _ "[" }
	']'            { T.OutfixR _ "]" }
	'{'            { T.OutfixL _ "{" }
	'}'            { T.OutfixR _ "}" }
	'['            { T.Postfix _ '[' }
	'.'            { T.Postfix _ '.' }
	bits           { T.Bitfield _ _ }
	string         { T.String _ _ }
	int            { T.Integer _ _ }
	name           { T.Identifier _ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_happyParse rule  0
	Statement       rules 1, 2, 3, 4, 5
	Declaration     rule  6
	Declarations1   rules 7, 8
	Arg             rules 9, 10
	Args            rules 11, 12
	Args1           rules 13, 14
	Import          rules 15, 16, 17, 18
	Expr            rules 19, 20
	UnsafeExpr      rules 21, 22, 23
	SafeExpr        rules 24, 25, 26, 27, 28, 29, 30, 31, 32, 33
	SemiSepStatements rules 34, 35
	Type            rules 36, 37, 38, 39, 40, 41
	MaybeType       rules 42, 43
	Exprs           rules 44, 45
	Exprs1          rules 46, 47
	CommaSepExprs   rules 48, 49
	CommaSepExprs1  rules 50, 51
	Record          rule  52
	Field           rules 53, 54
	CommaSepFields  rules 55, 56
	CommaSepFields1 rules 57, 58
	CommaSepNames   rules 59, 60
	CommaSepNames1  rules 61, 62

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'import'       shift, and enter state 4
	'let'          shift, and enter state 2
	'type'         shift, and enter state 5
	name           shift, and enter state 6

	Statement      goto state 3

State 1


	'let'          shift, and enter state 2


State 2

	Statement -> 'let' . Declarations1                  (rule 1)

	name           shift, and enter state 26

	Declaration    goto state 24
	Declarations1  goto state 25

State 3

	%start_happyParse -> Statement .                    (rule 0)

	%eof           accept


State 4

	Statement -> 'import' . Import                      (rule 5)

	name           shift, and enter state 23

	Import         goto state 22

State 5

	Statement -> 'type' . name '=' Type                 (rule 4)

	name           shift, and enter state 21


State 6

	Statement -> name . '::' Type                       (rule 2)
	Statement -> name . Exprs                           (rule 3)

	'let'          shift, and enter state 11
	'do'           shift, and enter state 12
	';'            reduce using rule 44
	'::'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20
	%eof           reduce using rule 44

	SafeExpr       goto state 7
	Exprs          goto state 8
	Exprs1         goto state 9
	Record         goto state 10

State 7

	SafeExpr -> SafeExpr . '.' name                     (rule 32)
	SafeExpr -> SafeExpr . '[' Expr ']'                 (rule 33)
	Exprs1 -> SafeExpr . Exprs1                         (rule 47)

	'let'          shift, and enter state 11
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	'['            shift, and enter state 63
	'.'            shift, and enter state 64
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	SafeExpr       goto state 7
	Exprs1         goto state 62
	Record         goto state 10

State 8

	Statement -> name Exprs .                           (rule 3)

	';'            reduce using rule 3
	%eof           reduce using rule 3


State 9

	Exprs -> Exprs1 .                                   (rule 45)

	';'            reduce using rule 45
	%eof           reduce using rule 45


State 10

	SafeExpr -> Record . MaybeType                      (rule 28)

	'let'          reduce using rule 42
	'and'          reduce using rule 42
	'in'           reduce using rule 42
	'do'           reduce using rule 42
	';'            reduce using rule 42
	','            reduce using rule 42
	':'            shift, and enter state 37
	'('            reduce using rule 42
	')'            reduce using rule 42
	' ['           reduce using rule 42
	']'            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	'['            reduce using rule 42
	'.'            reduce using rule 42
	bits           reduce using rule 42
	string         reduce using rule 42
	int            reduce using rule 42
	name           reduce using rule 42
	%eof           reduce using rule 42

	MaybeType      goto state 61

State 11

	Exprs1 -> 'let' . Args MaybeType '->' Expr          (rule 46)

	'->'           reduce using rule 11
	':'            reduce using rule 11
	'('            shift, and enter state 30
	name           shift, and enter state 31

	Arg            goto state 27
	Args           goto state 60
	Args1          goto state 29

State 12

	SafeExpr -> 'do' . '{' SemiSepStatements '}'        (rule 31)

	'{'            shift, and enter state 59


State 13

	Statement -> name '::' . Type                       (rule 2)

	'integer'      shift, and enter state 55
	' ['           shift, and enter state 56
	'['            shift, and enter state 57
	name           shift, and enter state 58

	Type           goto state 54

State 14

	SafeExpr -> '(' . Expr ')' MaybeType                (rule 29)

	'let'          shift, and enter state 51
	'fun'          shift, and enter state 52
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Expr           goto state 53
	UnsafeExpr     goto state 47
	SafeExpr       goto state 48
	Record         goto state 10

State 15

	SafeExpr -> ' [' . CommaSepExprs ']'                (rule 30)

	'let'          shift, and enter state 51
	'fun'          shift, and enter state 52
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	']'            reduce using rule 48
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Expr           goto state 46
	UnsafeExpr     goto state 47
	SafeExpr       goto state 48
	CommaSepExprs  goto state 49
	CommaSepExprs1 goto state 50
	Record         goto state 10

State 16

	Record -> '{' . CommaSepFields '}'                  (rule 52)

	'}'            reduce using rule 55
	string         shift, and enter state 44
	name           shift, and enter state 45

	Field          goto state 41
	CommaSepFields goto state 42
	CommaSepFields1goto state 43

State 17

	SafeExpr -> bits . MaybeType                        (rule 24)

	'let'          reduce using rule 42
	'and'          reduce using rule 42
	'in'           reduce using rule 42
	'do'           reduce using rule 42
	';'            reduce using rule 42
	','            reduce using rule 42
	':'            shift, and enter state 37
	'('            reduce using rule 42
	')'            reduce using rule 42
	' ['           reduce using rule 42
	']'            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	'['            reduce using rule 42
	'.'            reduce using rule 42
	bits           reduce using rule 42
	string         reduce using rule 42
	int            reduce using rule 42
	name           reduce using rule 42
	%eof           reduce using rule 42

	MaybeType      goto state 40

State 18

	SafeExpr -> string . MaybeType                      (rule 25)

	'let'          reduce using rule 42
	'and'          reduce using rule 42
	'in'           reduce using rule 42
	'do'           reduce using rule 42
	';'            reduce using rule 42
	','            reduce using rule 42
	':'            shift, and enter state 37
	'('            reduce using rule 42
	')'            reduce using rule 42
	' ['           reduce using rule 42
	']'            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	'['            reduce using rule 42
	'.'            reduce using rule 42
	bits           reduce using rule 42
	string         reduce using rule 42
	int            reduce using rule 42
	name           reduce using rule 42
	%eof           reduce using rule 42

	MaybeType      goto state 39

State 19

	SafeExpr -> int . MaybeType                         (rule 26)

	'let'          reduce using rule 42
	'and'          reduce using rule 42
	'in'           reduce using rule 42
	'do'           reduce using rule 42
	';'            reduce using rule 42
	','            reduce using rule 42
	':'            shift, and enter state 37
	'('            reduce using rule 42
	')'            reduce using rule 42
	' ['           reduce using rule 42
	']'            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	'['            reduce using rule 42
	'.'            reduce using rule 42
	bits           reduce using rule 42
	string         reduce using rule 42
	int            reduce using rule 42
	name           reduce using rule 42
	%eof           reduce using rule 42

	MaybeType      goto state 38

State 20

	SafeExpr -> name . MaybeType                        (rule 27)

	'let'          reduce using rule 42
	'and'          reduce using rule 42
	'in'           reduce using rule 42
	'do'           reduce using rule 42
	';'            reduce using rule 42
	','            reduce using rule 42
	':'            shift, and enter state 37
	'('            reduce using rule 42
	')'            reduce using rule 42
	' ['           reduce using rule 42
	']'            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	'['            reduce using rule 42
	'.'            reduce using rule 42
	bits           reduce using rule 42
	string         reduce using rule 42
	int            reduce using rule 42
	name           reduce using rule 42
	%eof           reduce using rule 42

	MaybeType      goto state 36

State 21

	Statement -> 'type' name . '=' Type                 (rule 4)

	'='            shift, and enter state 35


State 22

	Statement -> 'import' Import .                      (rule 5)

	';'            reduce using rule 5
	%eof           reduce using rule 5


State 23

	Import -> name .                                    (rule 15)
	Import -> name . '(' CommaSepNames ')'              (rule 16)
	Import -> name . 'as' name                          (rule 17)
	Import -> name . '(' CommaSepNames ')' 'as' name    (rule 18)

	'as'           shift, and enter state 33
	';'            reduce using rule 15
	'('            shift, and enter state 34
	%eof           reduce using rule 15


State 24

	Declarations1 -> Declaration .                      (rule 7)
	Declarations1 -> Declaration . 'and' Declarations1    (rule 8)

	'and'          shift, and enter state 32
	'in'           reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 25

	Statement -> 'let' Declarations1 .                  (rule 1)

	';'            reduce using rule 1
	%eof           reduce using rule 1


State 26

	Declaration -> name . Args MaybeType '=' Expr       (rule 6)

	'='            reduce using rule 11
	':'            reduce using rule 11
	'('            shift, and enter state 30
	name           shift, and enter state 31

	Arg            goto state 27
	Args           goto state 28
	Args1          goto state 29

State 27

	Args1 -> Arg .                                      (rule 13)
	Args1 -> Arg . Args1                                (rule 14)

	'='            reduce using rule 13
	'->'           reduce using rule 13
	':'            reduce using rule 13
	'('            shift, and enter state 30
	name           shift, and enter state 31

	Arg            goto state 27
	Args1          goto state 93

State 28

	Declaration -> name Args . MaybeType '=' Expr       (rule 6)

	'='            reduce using rule 42
	':'            shift, and enter state 37

	MaybeType      goto state 92

State 29

	Args -> Args1 .                                     (rule 12)

	'='            reduce using rule 12
	'->'           reduce using rule 12
	':'            reduce using rule 12


State 30

	Arg -> '(' . name ':' Type ')'                      (rule 10)

	name           shift, and enter state 91


State 31

	Arg -> name .                                       (rule 9)

	'='            reduce using rule 9
	'->'           reduce using rule 9
	':'            reduce using rule 9
	'('            reduce using rule 9
	name           reduce using rule 9


State 32

	Declarations1 -> Declaration 'and' . Declarations1    (rule 8)

	name           shift, and enter state 26

	Declaration    goto state 24
	Declarations1  goto state 90

State 33

	Import -> name 'as' . name                          (rule 17)

	name           shift, and enter state 89


State 34

	Import -> name '(' . CommaSepNames ')'              (rule 16)
	Import -> name '(' . CommaSepNames ')' 'as' name    (rule 18)

	')'            reduce using rule 59
	name           shift, and enter state 88

	CommaSepNames  goto state 86
	CommaSepNames1 goto state 87

State 35

	Statement -> 'type' name '=' . Type                 (rule 4)

	'integer'      shift, and enter state 55
	' ['           shift, and enter state 56
	'['            shift, and enter state 57
	name           shift, and enter state 58

	Type           goto state 85

State 36

	SafeExpr -> name MaybeType .                        (rule 27)

	'let'          reduce using rule 27
	'and'          reduce using rule 27
	'in'           reduce using rule 27
	'do'           reduce using rule 27
	';'            reduce using rule 27
	','            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	' ['           reduce using rule 27
	']'            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	'['            reduce using rule 27
	'.'            reduce using rule 27
	bits           reduce using rule 27
	string         reduce using rule 27
	int            reduce using rule 27
	name           reduce using rule 27
	%eof           reduce using rule 27


State 37

	MaybeType -> ':' . Type                             (rule 43)

	'integer'      shift, and enter state 55
	' ['           shift, and enter state 56
	'['            shift, and enter state 57
	name           shift, and enter state 58

	Type           goto state 84

State 38

	SafeExpr -> int MaybeType .                         (rule 26)

	'let'          reduce using rule 26
	'and'          reduce using rule 26
	'in'           reduce using rule 26
	'do'           reduce using rule 26
	';'            reduce using rule 26
	','            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	' ['           reduce using rule 26
	']'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	'['            reduce using rule 26
	'.'            reduce using rule 26
	bits           reduce using rule 26
	string         reduce using rule 26
	int            reduce using rule 26
	name           reduce using rule 26
	%eof           reduce using rule 26


State 39

	SafeExpr -> string MaybeType .                      (rule 25)

	'let'          reduce using rule 25
	'and'          reduce using rule 25
	'in'           reduce using rule 25
	'do'           reduce using rule 25
	';'            reduce using rule 25
	','            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	' ['           reduce using rule 25
	']'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	'['            reduce using rule 25
	'.'            reduce using rule 25
	bits           reduce using rule 25
	string         reduce using rule 25
	int            reduce using rule 25
	name           reduce using rule 25
	%eof           reduce using rule 25


State 40

	SafeExpr -> bits MaybeType .                        (rule 24)

	'let'          reduce using rule 24
	'and'          reduce using rule 24
	'in'           reduce using rule 24
	'do'           reduce using rule 24
	';'            reduce using rule 24
	','            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	' ['           reduce using rule 24
	']'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	'['            reduce using rule 24
	'.'            reduce using rule 24
	bits           reduce using rule 24
	string         reduce using rule 24
	int            reduce using rule 24
	name           reduce using rule 24
	%eof           reduce using rule 24


State 41

	CommaSepFields1 -> Field .                          (rule 57)
	CommaSepFields1 -> Field . ',' CommaSepFields1      (rule 58)

	','            shift, and enter state 83
	'}'            reduce using rule 57


State 42

	Record -> '{' CommaSepFields . '}'                  (rule 52)

	'}'            shift, and enter state 82


State 43

	CommaSepFields -> CommaSepFields1 .                 (rule 56)

	'}'            reduce using rule 56


State 44

	Field -> string . ':' Expr                          (rule 54)

	':'            shift, and enter state 81


State 45

	Field -> name . ':' Expr                            (rule 53)

	':'            shift, and enter state 80


State 46

	CommaSepExprs1 -> Expr .                            (rule 50)
	CommaSepExprs1 -> Expr . ',' CommaSepExprs1         (rule 51)

	','            shift, and enter state 79
	']'            reduce using rule 50


State 47

	Expr -> UnsafeExpr .                                (rule 19)

	'and'          reduce using rule 19
	'in'           reduce using rule 19
	';'            reduce using rule 19
	','            reduce using rule 19
	')'            reduce using rule 19
	']'            reduce using rule 19
	'}'            reduce using rule 19
	%eof           reduce using rule 19


State 48

	Expr -> SafeExpr .                                  (rule 20)
	UnsafeExpr -> SafeExpr . Exprs1                     (rule 22)
	SafeExpr -> SafeExpr . '.' name                     (rule 32)
	SafeExpr -> SafeExpr . '[' Expr ']'                 (rule 33)

	'let'          shift, and enter state 11
	'and'          reduce using rule 20
	'in'           reduce using rule 20
	'do'           shift, and enter state 12
	';'            reduce using rule 20
	','            reduce using rule 20
	'('            shift, and enter state 14
	')'            reduce using rule 20
	' ['           shift, and enter state 15
	']'            reduce using rule 20
	'{'            shift, and enter state 16
	'}'            reduce using rule 20
	'['            shift, and enter state 63
	'.'            shift, and enter state 64
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20
	%eof           reduce using rule 20

	SafeExpr       goto state 7
	Exprs1         goto state 78
	Record         goto state 10

State 49

	SafeExpr -> ' [' CommaSepExprs . ']'                (rule 30)

	']'            shift, and enter state 77


State 50

	CommaSepExprs -> CommaSepExprs1 .                   (rule 49)

	']'            reduce using rule 49


State 51

	UnsafeExpr -> 'let' . Declarations1 'in' Expr       (rule 23)

	name           shift, and enter state 26

	Declaration    goto state 24
	Declarations1  goto state 76

State 52

	UnsafeExpr -> 'fun' . Args MaybeType '->' Expr      (rule 21)

	'->'           reduce using rule 11
	':'            reduce using rule 11
	'('            shift, and enter state 30
	name           shift, and enter state 31

	Arg            goto state 27
	Args           goto state 75
	Args1          goto state 29

State 53

	SafeExpr -> '(' Expr . ')' MaybeType                (rule 29)

	')'            shift, and enter state 74


State 54

	Statement -> name '::' Type .                       (rule 2)

	';'            reduce using rule 2
	%eof           reduce using rule 2


State 55

	Type -> 'integer' .                                 (rule 36)

	'let'          reduce using rule 36
	'and'          reduce using rule 36
	'in'           reduce using rule 36
	'do'           reduce using rule 36
	'='            reduce using rule 36
	'->'           reduce using rule 36
	';'            reduce using rule 36
	','            reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	' ['           reduce using rule 36
	']'            reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	'['            reduce using rule 36
	'.'            reduce using rule 36
	bits           reduce using rule 36
	string         reduce using rule 36
	int            reduce using rule 36
	name           reduce using rule 36
	%eof           reduce using rule 36


State 56

	Type -> ' [' . int ']'                              (rule 39)
	Type -> ' [' . Type ']'                             (rule 41)

	'integer'      shift, and enter state 55
	' ['           shift, and enter state 56
	'['            shift, and enter state 57
	int            shift, and enter state 73
	name           shift, and enter state 58

	Type           goto state 72

State 57

	Type -> '[' . int ']'                               (rule 38)
	Type -> '[' . Type ']'                              (rule 40)

	'integer'      shift, and enter state 55
	' ['           shift, and enter state 56
	'['            shift, and enter state 57
	int            shift, and enter state 71
	name           shift, and enter state 58

	Type           goto state 70

State 58

	Type -> name .                                      (rule 37)

	'let'          reduce using rule 37
	'and'          reduce using rule 37
	'in'           reduce using rule 37
	'do'           reduce using rule 37
	'='            reduce using rule 37
	'->'           reduce using rule 37
	';'            reduce using rule 37
	','            reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	' ['           reduce using rule 37
	']'            reduce using rule 37
	'{'            reduce using rule 37
	'}'            reduce using rule 37
	'['            reduce using rule 37
	'.'            reduce using rule 37
	bits           reduce using rule 37
	string         reduce using rule 37
	int            reduce using rule 37
	name           reduce using rule 37
	%eof           reduce using rule 37


State 59

	SafeExpr -> 'do' '{' . SemiSepStatements '}'        (rule 31)

	'import'       shift, and enter state 4
	'let'          shift, and enter state 2
	'type'         shift, and enter state 5
	'}'            reduce using rule 34
	name           shift, and enter state 6

	Statement      goto state 68
	SemiSepStatementsgoto state 69

State 60

	Exprs1 -> 'let' Args . MaybeType '->' Expr          (rule 46)

	'->'           reduce using rule 42
	':'            shift, and enter state 37

	MaybeType      goto state 67

State 61

	SafeExpr -> Record MaybeType .                      (rule 28)

	'let'          reduce using rule 28
	'and'          reduce using rule 28
	'in'           reduce using rule 28
	'do'           reduce using rule 28
	';'            reduce using rule 28
	','            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	' ['           reduce using rule 28
	']'            reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	'['            reduce using rule 28
	'.'            reduce using rule 28
	bits           reduce using rule 28
	string         reduce using rule 28
	int            reduce using rule 28
	name           reduce using rule 28
	%eof           reduce using rule 28


State 62

	Exprs1 -> SafeExpr Exprs1 .                         (rule 47)

	'and'          reduce using rule 47
	'in'           reduce using rule 47
	';'            reduce using rule 47
	','            reduce using rule 47
	')'            reduce using rule 47
	']'            reduce using rule 47
	'}'            reduce using rule 47
	%eof           reduce using rule 47


State 63

	SafeExpr -> SafeExpr '[' . Expr ']'                 (rule 33)

	'let'          shift, and enter state 51
	'fun'          shift, and enter state 52
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Expr           goto state 66
	UnsafeExpr     goto state 47
	SafeExpr       goto state 48
	Record         goto state 10

State 64

	SafeExpr -> SafeExpr '.' . name                     (rule 32)

	name           shift, and enter state 65


State 65

	SafeExpr -> SafeExpr '.' name .                     (rule 32)

	'let'          reduce using rule 32
	'and'          reduce using rule 32
	'in'           reduce using rule 32
	'do'           reduce using rule 32
	';'            reduce using rule 32
	','            reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	' ['           reduce using rule 32
	']'            reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	'['            reduce using rule 32
	'.'            reduce using rule 32
	bits           reduce using rule 32
	string         reduce using rule 32
	int            reduce using rule 32
	name           reduce using rule 32
	%eof           reduce using rule 32


State 66

	SafeExpr -> SafeExpr '[' Expr . ']'                 (rule 33)

	']'            shift, and enter state 112


State 67

	Exprs1 -> 'let' Args MaybeType . '->' Expr          (rule 46)

	'->'           shift, and enter state 111


State 68

	SemiSepStatements -> Statement . ';' SemiSepStatements    (rule 35)

	';'            shift, and enter state 110


State 69

	SafeExpr -> 'do' '{' SemiSepStatements . '}'        (rule 31)

	'}'            shift, and enter state 109


State 70

	Type -> '[' Type . ']'                              (rule 40)

	']'            shift, and enter state 108


State 71

	Type -> '[' int . ']'                               (rule 38)

	']'            shift, and enter state 107


State 72

	Type -> ' [' Type . ']'                             (rule 41)

	']'            shift, and enter state 106


State 73

	Type -> ' [' int . ']'                              (rule 39)

	']'            shift, and enter state 105


State 74

	SafeExpr -> '(' Expr ')' . MaybeType                (rule 29)

	'let'          reduce using rule 42
	'and'          reduce using rule 42
	'in'           reduce using rule 42
	'do'           reduce using rule 42
	';'            reduce using rule 42
	','            reduce using rule 42
	':'            shift, and enter state 37
	'('            reduce using rule 42
	')'            reduce using rule 42
	' ['           reduce using rule 42
	']'            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	'['            reduce using rule 42
	'.'            reduce using rule 42
	bits           reduce using rule 42
	string         reduce using rule 42
	int            reduce using rule 42
	name           reduce using rule 42
	%eof           reduce using rule 42

	MaybeType      goto state 104

State 75

	UnsafeExpr -> 'fun' Args . MaybeType '->' Expr      (rule 21)

	'->'           reduce using rule 42
	':'            shift, and enter state 37

	MaybeType      goto state 103

State 76

	UnsafeExpr -> 'let' Declarations1 . 'in' Expr       (rule 23)

	'in'           shift, and enter state 102


State 77

	SafeExpr -> ' [' CommaSepExprs ']' .                (rule 30)

	'let'          reduce using rule 30
	'and'          reduce using rule 30
	'in'           reduce using rule 30
	'do'           reduce using rule 30
	';'            reduce using rule 30
	','            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	' ['           reduce using rule 30
	']'            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	'['            reduce using rule 30
	'.'            reduce using rule 30
	bits           reduce using rule 30
	string         reduce using rule 30
	int            reduce using rule 30
	name           reduce using rule 30
	%eof           reduce using rule 30


State 78

	UnsafeExpr -> SafeExpr Exprs1 .                     (rule 22)

	'and'          reduce using rule 22
	'in'           reduce using rule 22
	';'            reduce using rule 22
	','            reduce using rule 22
	')'            reduce using rule 22
	']'            reduce using rule 22
	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 79

	CommaSepExprs1 -> Expr ',' . CommaSepExprs1         (rule 51)

	'let'          shift, and enter state 51
	'fun'          shift, and enter state 52
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Expr           goto state 46
	UnsafeExpr     goto state 47
	SafeExpr       goto state 48
	CommaSepExprs1 goto state 101
	Record         goto state 10

State 80

	Field -> name ':' . Expr                            (rule 53)

	'let'          shift, and enter state 51
	'fun'          shift, and enter state 52
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Expr           goto state 100
	UnsafeExpr     goto state 47
	SafeExpr       goto state 48
	Record         goto state 10

State 81

	Field -> string ':' . Expr                          (rule 54)

	'let'          shift, and enter state 51
	'fun'          shift, and enter state 52
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Expr           goto state 99
	UnsafeExpr     goto state 47
	SafeExpr       goto state 48
	Record         goto state 10

State 82

	Record -> '{' CommaSepFields '}' .                  (rule 52)

	'let'          reduce using rule 52
	'and'          reduce using rule 52
	'in'           reduce using rule 52
	'do'           reduce using rule 52
	';'            reduce using rule 52
	','            reduce using rule 52
	':'            reduce using rule 52
	'('            reduce using rule 52
	')'            reduce using rule 52
	' ['           reduce using rule 52
	']'            reduce using rule 52
	'{'            reduce using rule 52
	'}'            reduce using rule 52
	'['            reduce using rule 52
	'.'            reduce using rule 52
	bits           reduce using rule 52
	string         reduce using rule 52
	int            reduce using rule 52
	name           reduce using rule 52
	%eof           reduce using rule 52


State 83

	CommaSepFields1 -> Field ',' . CommaSepFields1      (rule 58)

	string         shift, and enter state 44
	name           shift, and enter state 45

	Field          goto state 41
	CommaSepFields1goto state 98

State 84

	MaybeType -> ':' Type .                             (rule 43)

	'let'          reduce using rule 43
	'and'          reduce using rule 43
	'in'           reduce using rule 43
	'do'           reduce using rule 43
	'='            reduce using rule 43
	'->'           reduce using rule 43
	';'            reduce using rule 43
	','            reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	' ['           reduce using rule 43
	']'            reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	'['            reduce using rule 43
	'.'            reduce using rule 43
	bits           reduce using rule 43
	string         reduce using rule 43
	int            reduce using rule 43
	name           reduce using rule 43
	%eof           reduce using rule 43


State 85

	Statement -> 'type' name '=' Type .                 (rule 4)

	';'            reduce using rule 4
	%eof           reduce using rule 4


State 86

	Import -> name '(' CommaSepNames . ')'              (rule 16)
	Import -> name '(' CommaSepNames . ')' 'as' name    (rule 18)

	')'            shift, and enter state 97


State 87

	CommaSepNames -> CommaSepNames1 .                   (rule 60)

	')'            reduce using rule 60


State 88

	CommaSepNames1 -> name .                            (rule 61)
	CommaSepNames1 -> name . ',' CommaSepNames1         (rule 62)

	','            shift, and enter state 96
	')'            reduce using rule 61


State 89

	Import -> name 'as' name .                          (rule 17)

	';'            reduce using rule 17
	%eof           reduce using rule 17


State 90

	Declarations1 -> Declaration 'and' Declarations1 .    (rule 8)

	'in'           reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 91

	Arg -> '(' name . ':' Type ')'                      (rule 10)

	':'            shift, and enter state 95


State 92

	Declaration -> name Args MaybeType . '=' Expr       (rule 6)

	'='            shift, and enter state 94


State 93

	Args1 -> Arg Args1 .                                (rule 14)

	'='            reduce using rule 14
	'->'           reduce using rule 14
	':'            reduce using rule 14


State 94

	Declaration -> name Args MaybeType '=' . Expr       (rule 6)

	'let'          shift, and enter state 51
	'fun'          shift, and enter state 52
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Expr           goto state 120
	UnsafeExpr     goto state 47
	SafeExpr       goto state 48
	Record         goto state 10

State 95

	Arg -> '(' name ':' . Type ')'                      (rule 10)

	'integer'      shift, and enter state 55
	' ['           shift, and enter state 56
	'['            shift, and enter state 57
	name           shift, and enter state 58

	Type           goto state 119

State 96

	CommaSepNames1 -> name ',' . CommaSepNames1         (rule 62)

	name           shift, and enter state 88

	CommaSepNames1 goto state 118

State 97

	Import -> name '(' CommaSepNames ')' .              (rule 16)
	Import -> name '(' CommaSepNames ')' . 'as' name    (rule 18)

	'as'           shift, and enter state 117
	';'            reduce using rule 16
	%eof           reduce using rule 16


State 98

	CommaSepFields1 -> Field ',' CommaSepFields1 .      (rule 58)

	'}'            reduce using rule 58


State 99

	Field -> string ':' Expr .                          (rule 54)

	','            reduce using rule 54
	'}'            reduce using rule 54


State 100

	Field -> name ':' Expr .                            (rule 53)

	','            reduce using rule 53
	'}'            reduce using rule 53


State 101

	CommaSepExprs1 -> Expr ',' CommaSepExprs1 .         (rule 51)

	']'            reduce using rule 51


State 102

	UnsafeExpr -> 'let' Declarations1 'in' . Expr       (rule 23)

	'let'          shift, and enter state 51
	'fun'          shift, and enter state 52
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Expr           goto state 116
	UnsafeExpr     goto state 47
	SafeExpr       goto state 48
	Record         goto state 10

State 103

	UnsafeExpr -> 'fun' Args MaybeType . '->' Expr      (rule 21)

	'->'           shift, and enter state 115


State 104

	SafeExpr -> '(' Expr ')' MaybeType .                (rule 29)

	'let'          reduce using rule 29
	'and'          reduce using rule 29
	'in'           reduce using rule 29
	'do'           reduce using rule 29
	';'            reduce using rule 29
	','            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	' ['           reduce using rule 29
	']'            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	'['            reduce using rule 29
	'.'            reduce using rule 29
	bits           reduce using rule 29
	string         reduce using rule 29
	int            reduce using rule 29
	name           reduce using rule 29
	%eof           reduce using rule 29


State 105

	Type -> ' [' int ']' .                              (rule 39)

	'let'          reduce using rule 39
	'and'          reduce using rule 39
	'in'           reduce using rule 39
	'do'           reduce using rule 39
	'='            reduce using rule 39
	'->'           reduce using rule 39
	';'            reduce using rule 39
	','            reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	' ['           reduce using rule 39
	']'            reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	'['            reduce using rule 39
	'.'            reduce using rule 39
	bits           reduce using rule 39
	string         reduce using rule 39
	int            reduce using rule 39
	name           reduce using rule 39
	%eof           reduce using rule 39


State 106

	Type -> ' [' Type ']' .                             (rule 41)

	'let'          reduce using rule 41
	'and'          reduce using rule 41
	'in'           reduce using rule 41
	'do'           reduce using rule 41
	'='            reduce using rule 41
	'->'           reduce using rule 41
	';'            reduce using rule 41
	','            reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	' ['           reduce using rule 41
	']'            reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	'['            reduce using rule 41
	'.'            reduce using rule 41
	bits           reduce using rule 41
	string         reduce using rule 41
	int            reduce using rule 41
	name           reduce using rule 41
	%eof           reduce using rule 41


State 107

	Type -> '[' int ']' .                               (rule 38)

	'let'          reduce using rule 38
	'and'          reduce using rule 38
	'in'           reduce using rule 38
	'do'           reduce using rule 38
	'='            reduce using rule 38
	'->'           reduce using rule 38
	';'            reduce using rule 38
	','            reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	' ['           reduce using rule 38
	']'            reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	'['            reduce using rule 38
	'.'            reduce using rule 38
	bits           reduce using rule 38
	string         reduce using rule 38
	int            reduce using rule 38
	name           reduce using rule 38
	%eof           reduce using rule 38


State 108

	Type -> '[' Type ']' .                              (rule 40)

	'let'          reduce using rule 40
	'and'          reduce using rule 40
	'in'           reduce using rule 40
	'do'           reduce using rule 40
	'='            reduce using rule 40
	'->'           reduce using rule 40
	';'            reduce using rule 40
	','            reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	' ['           reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'['            reduce using rule 40
	'.'            reduce using rule 40
	bits           reduce using rule 40
	string         reduce using rule 40
	int            reduce using rule 40
	name           reduce using rule 40
	%eof           reduce using rule 40


State 109

	SafeExpr -> 'do' '{' SemiSepStatements '}' .        (rule 31)

	'let'          reduce using rule 31
	'and'          reduce using rule 31
	'in'           reduce using rule 31
	'do'           reduce using rule 31
	';'            reduce using rule 31
	','            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	' ['           reduce using rule 31
	']'            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	'['            reduce using rule 31
	'.'            reduce using rule 31
	bits           reduce using rule 31
	string         reduce using rule 31
	int            reduce using rule 31
	name           reduce using rule 31
	%eof           reduce using rule 31


State 110

	SemiSepStatements -> Statement ';' . SemiSepStatements    (rule 35)

	'import'       shift, and enter state 4
	'let'          shift, and enter state 2
	'type'         shift, and enter state 5
	'}'            reduce using rule 34
	name           shift, and enter state 6

	Statement      goto state 68
	SemiSepStatementsgoto state 114

State 111

	Exprs1 -> 'let' Args MaybeType '->' . Expr          (rule 46)

	'let'          shift, and enter state 51
	'fun'          shift, and enter state 52
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Expr           goto state 113
	UnsafeExpr     goto state 47
	SafeExpr       goto state 48
	Record         goto state 10

State 112

	SafeExpr -> SafeExpr '[' Expr ']' .                 (rule 33)

	'let'          reduce using rule 33
	'and'          reduce using rule 33
	'in'           reduce using rule 33
	'do'           reduce using rule 33
	';'            reduce using rule 33
	','            reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	' ['           reduce using rule 33
	']'            reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	'['            reduce using rule 33
	'.'            reduce using rule 33
	bits           reduce using rule 33
	string         reduce using rule 33
	int            reduce using rule 33
	name           reduce using rule 33
	%eof           reduce using rule 33


State 113

	Exprs1 -> 'let' Args MaybeType '->' Expr .          (rule 46)

	'and'          reduce using rule 46
	'in'           reduce using rule 46
	';'            reduce using rule 46
	','            reduce using rule 46
	')'            reduce using rule 46
	']'            reduce using rule 46
	'}'            reduce using rule 46
	%eof           reduce using rule 46


State 114

	SemiSepStatements -> Statement ';' SemiSepStatements .    (rule 35)

	'}'            reduce using rule 35


State 115

	UnsafeExpr -> 'fun' Args MaybeType '->' . Expr      (rule 21)

	'let'          shift, and enter state 51
	'fun'          shift, and enter state 52
	'do'           shift, and enter state 12
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Expr           goto state 123
	UnsafeExpr     goto state 47
	SafeExpr       goto state 48
	Record         goto state 10

State 116

	UnsafeExpr -> 'let' Declarations1 'in' Expr .       (rule 23)

	'and'          reduce using rule 23
	'in'           reduce using rule 23
	';'            reduce using rule 23
	','            reduce using rule 23
	')'            reduce using rule 23
	']'            reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


State 117

	Import -> name '(' CommaSepNames ')' 'as' . name    (rule 18)

	name           shift, and enter state 122


State 118

	CommaSepNames1 -> name ',' CommaSepNames1 .         (rule 62)

	')'            reduce using rule 62


State 119

	Arg -> '(' name ':' Type . ')'                      (rule 10)

	')'            shift, and enter state 121


State 120

	Declaration -> name Args MaybeType '=' Expr .       (rule 6)

	'and'          reduce using rule 6
	'in'           reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 121

	Arg -> '(' name ':' Type ')' .                      (rule 10)

	'='            reduce using rule 10
	'->'           reduce using rule 10
	':'            reduce using rule 10
	'('            reduce using rule 10
	name           reduce using rule 10


State 122

	Import -> name '(' CommaSepNames ')' 'as' name .    (rule 18)

	';'            reduce using rule 18
	%eof           reduce using rule 18


State 123

	UnsafeExpr -> 'fun' Args MaybeType '->' Expr .      (rule 21)

	'and'          reduce using rule 21
	'in'           reduce using rule 21
	';'            reduce using rule 21
	','            reduce using rule 21
	')'            reduce using rule 21
	']'            reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 63
Number of terminals: 27
Number of non-terminals: 24
Number of states: 124
