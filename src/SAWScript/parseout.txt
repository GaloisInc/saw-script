-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.9 from Parser.y
-----------------------------------------------------------------------------

state 6 contains 10 shift/reduce conflicts.
state 8 contains 10 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Statement                          (0)
	Statement -> 'let' Declarations1                   (1)
	Statement -> name '::' Type                        (2)
	Statement -> 'type' name '=' Type                  (3)
	Statement -> 'import' Import                       (4)
	Statement -> Expr                                  (5)
	Declaration -> name Args MaybeType '=' Expr        (6)
	Import -> name                                     (7)
	Import -> name '(' CommaSepNames ')'               (8)
	Import -> name 'as' name                           (9)
	Import -> name '(' CommaSepNames ')' 'as' name     (10)
	Arg -> name                                        (11)
	Arg -> '(' name ':' Type ')'                       (12)
	Expr -> Primitive                                  (13)
	Expr -> Application                                (14)
	Primitive -> UnsafePrimitive                       (15)
	Primitive -> SafePrimitive                         (16)
	Application -> SafePrimitive Primitive             (17)
	Application -> Application Primitive               (18)
	UnsafePrimitive -> 'fun' Args1 MaybeType '->' Expr   (19)
	UnsafePrimitive -> 'let' Declarations1 'in' Expr   (20)
	UnsafePrimitive -> SafePrimitive infixOp Expr      (21)
	SafePrimitive -> bits MaybeType                    (22)
	SafePrimitive -> string MaybeType                  (23)
	SafePrimitive -> int MaybeType                     (24)
	SafePrimitive -> name MaybeType                    (25)
	SafePrimitive -> '(' Expr ')'                      (26)
	SafePrimitive -> ' [' CommaSepExprs ']' MaybeType   (27)
	SafePrimitive -> '{' CommaSepFields '}' MaybeType   (28)
	SafePrimitive -> 'do' '{' SemiSepStatements '}'    (29)
	SafePrimitive -> SafePrimitive '.' name MaybeType   (30)
	SafePrimitive -> SafePrimitive '[' Expr ']' MaybeType   (31)
	Field -> name ':' Expr                             (32)
	Field -> string ':' Expr                           (33)
	Type -> 'integer'                                  (34)
	Type -> name                                       (35)
	Type -> '[' int ']'                                (36)
	Type -> ' [' int ']'                               (37)
	Type -> '[' Type ']'                               (38)
	Type -> ' [' Type ']'                              (39)
	MaybeType ->                                       (40)
	MaybeType -> ':' Type                              (41)
	Declarations1 -> Declaration                       (42)
	Declarations1 -> Declaration 'and' Declarations1   (43)
	Args ->                                            (44)
	Args -> Args1                                      (45)
	Args1 -> Arg                                       (46)
	Args1 -> Arg Args1                                 (47)
	SemiSepStatements ->                               (48)
	SemiSepStatements -> Statement ';' SemiSepStatements   (49)
	CommaSepExprs ->                                   (50)
	CommaSepExprs -> CommaSepExprs1                    (51)
	CommaSepExprs1 -> Expr                             (52)
	CommaSepExprs1 -> Expr ',' CommaSepExprs1          (53)
	CommaSepFields ->                                  (54)
	CommaSepFields -> CommaSepFields1                  (55)
	CommaSepFields1 -> Field                           (56)
	CommaSepFields1 -> Field ',' CommaSepFields1       (57)
	CommaSepNames ->                                   (58)
	CommaSepNames -> CommaSepNames1                    (59)
	CommaSepNames1 -> name                             (60)
	CommaSepNames1 -> name ',' CommaSepNames1          (61)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'import'       { T.Keyword    _ "import" }
	'as'           { T.Keyword    _ "as" }
	'let'          { T.Keyword    _ "let" }
	'and'          { T.Keyword    _ "and" }
	'fun'          { T.Keyword    _ "fun" }
	'in'           { T.Keyword    _ "in" }
	'type'         { T.Keyword    _ "type" }
	'do'           { T.Keyword    _ "do" }
	'integer'      { T.Keyword    _ "integer" }
	'='            { T.Infix      _ "=" }
	'->'           { T.Infix      _ "->" }
	';'            { T.Infix      _ ";" }
	','            { T.Infix      _ "," }
	':'            { T.Infix      _ ":" }
	'::'           { T.Infix      _ "::" }
	'('            { T.OutfixL    _ "(" }
	')'            { T.OutfixR    _ ")" }
	' ['           { T.OutfixL    _ "[" }
	']'            { T.OutfixR    _ "]" }
	'{'            { T.OutfixL    _ "{" }
	'}'            { T.OutfixR    _ "}" }
	'['            { T.Postfix    _ "[" }
	'.'            { T.Postfix    _ "." }
	infixOp        { T.Infix      _ $$ }
	bits           { T.Bitfield   _ $$ }
	string         { T.String     _ $$ }
	int            { T.Integer    _ $$ }
	name           { T.Identifier _ $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Statement       rules 1, 2, 3, 4, 5
	Declaration     rule  6
	Import          rules 7, 8, 9, 10
	Arg             rules 11, 12
	Expr            rules 13, 14
	Primitive       rules 15, 16
	Application     rules 17, 18
	UnsafePrimitive rules 19, 20, 21
	SafePrimitive   rules 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
	Field           rules 32, 33
	Type            rules 34, 35, 36, 37, 38, 39
	MaybeType       rules 40, 41
	Declarations1   rules 42, 43
	Args            rules 44, 45
	Args1           rules 46, 47
	SemiSepStatements rules 48, 49
	CommaSepExprs   rules 50, 51
	CommaSepExprs1  rules 52, 53
	CommaSepFields  rules 54, 55
	CommaSepFields1 rules 56, 57
	CommaSepNames   rules 58, 59
	CommaSepNames1  rules 60, 61

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'import'       shift, and enter state 9
	'let'          shift, and enter state 10
	'fun'          shift, and enter state 11
	'type'         shift, and enter state 12
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Statement      goto state 3
	Expr           goto state 4
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8

State 1


	'let'          shift, and enter state 2


State 2

	Statement -> 'let' . Declarations1                  (rule 1)

	name           shift, and enter state 46

	Declaration    goto state 44
	Declarations1  goto state 55

State 3

	%start_parse -> Statement .                         (rule 0)

	%eof           accept


State 4

	Statement -> Expr .                                 (rule 5)

	';'            reduce using rule 5
	%eof           reduce using rule 5


State 5

	Expr -> Primitive .                                 (rule 13)

	'let'          reduce using rule 13
	'and'          reduce using rule 13
	'fun'          reduce using rule 13
	'in'           reduce using rule 13
	'do'           reduce using rule 13
	';'            reduce using rule 13
	','            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	' ['           reduce using rule 13
	']'            reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	bits           reduce using rule 13
	string         reduce using rule 13
	int            reduce using rule 13
	name           reduce using rule 13
	%eof           reduce using rule 13


State 6

	Expr -> Application .                               (rule 14)
	Application -> Application . Primitive              (rule 18)

	'let'          shift, and enter state 35
			(reduce using rule 14)

	'and'          reduce using rule 14
	'fun'          shift, and enter state 11
			(reduce using rule 14)

	'in'           reduce using rule 14
	'do'           shift, and enter state 13
			(reduce using rule 14)

	';'            reduce using rule 14
	','            reduce using rule 14
	'('            shift, and enter state 14
			(reduce using rule 14)

	')'            reduce using rule 14
	' ['           shift, and enter state 15
			(reduce using rule 14)

	']'            reduce using rule 14
	'{'            shift, and enter state 16
			(reduce using rule 14)

	'}'            reduce using rule 14
	bits           shift, and enter state 17
			(reduce using rule 14)

	string         shift, and enter state 18
			(reduce using rule 14)

	int            shift, and enter state 19
			(reduce using rule 14)

	name           shift, and enter state 36
			(reduce using rule 14)

	%eof           reduce using rule 14

	Primitive      goto state 54
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 50

State 7

	Primitive -> UnsafePrimitive .                      (rule 15)

	'let'          reduce using rule 15
	'and'          reduce using rule 15
	'fun'          reduce using rule 15
	'in'           reduce using rule 15
	'do'           reduce using rule 15
	';'            reduce using rule 15
	','            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	' ['           reduce using rule 15
	']'            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	bits           reduce using rule 15
	string         reduce using rule 15
	int            reduce using rule 15
	name           reduce using rule 15
	%eof           reduce using rule 15


State 8

	Primitive -> SafePrimitive .                        (rule 16)
	Application -> SafePrimitive . Primitive            (rule 17)
	UnsafePrimitive -> SafePrimitive . infixOp Expr     (rule 21)
	SafePrimitive -> SafePrimitive . '.' name MaybeType    (rule 30)
	SafePrimitive -> SafePrimitive . '[' Expr ']' MaybeType    (rule 31)

	'let'          shift, and enter state 35
			(reduce using rule 16)

	'and'          reduce using rule 16
	'fun'          shift, and enter state 11
			(reduce using rule 16)

	'in'           reduce using rule 16
	'do'           shift, and enter state 13
			(reduce using rule 16)

	';'            reduce using rule 16
	','            reduce using rule 16
	'('            shift, and enter state 14
			(reduce using rule 16)

	')'            reduce using rule 16
	' ['           shift, and enter state 15
			(reduce using rule 16)

	']'            reduce using rule 16
	'{'            shift, and enter state 16
			(reduce using rule 16)

	'}'            reduce using rule 16
	'['            shift, and enter state 51
	'.'            shift, and enter state 52
	infixOp        shift, and enter state 53
	bits           shift, and enter state 17
			(reduce using rule 16)

	string         shift, and enter state 18
			(reduce using rule 16)

	int            shift, and enter state 19
			(reduce using rule 16)

	name           shift, and enter state 36
			(reduce using rule 16)

	%eof           reduce using rule 16

	Primitive      goto state 49
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 50

State 9

	Statement -> 'import' . Import                      (rule 4)

	name           shift, and enter state 48

	Import         goto state 47

State 10

	Statement -> 'let' . Declarations1                  (rule 1)
	UnsafePrimitive -> 'let' . Declarations1 'in' Expr    (rule 20)

	name           shift, and enter state 46

	Declaration    goto state 44
	Declarations1  goto state 45

State 11

	UnsafePrimitive -> 'fun' . Args1 MaybeType '->' Expr    (rule 19)

	'('            shift, and enter state 42
	name           shift, and enter state 43

	Arg            goto state 40
	Args1          goto state 41

State 12

	Statement -> 'type' . name '=' Type                 (rule 3)

	name           shift, and enter state 39


State 13

	SafePrimitive -> 'do' . '{' SemiSepStatements '}'    (rule 29)

	'{'            shift, and enter state 38


State 14

	SafePrimitive -> '(' . Expr ')'                     (rule 26)

	'let'          shift, and enter state 35
	'fun'          shift, and enter state 11
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 36

	Expr           goto state 37
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8

State 15

	SafePrimitive -> ' [' . CommaSepExprs ']' MaybeType    (rule 27)

	'let'          shift, and enter state 35
	'fun'          shift, and enter state 11
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	']'            reduce using rule 50
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 36

	Expr           goto state 32
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8
	CommaSepExprs  goto state 33
	CommaSepExprs1 goto state 34

State 16

	SafePrimitive -> '{' . CommaSepFields '}' MaybeType    (rule 28)

	'}'            reduce using rule 54
	string         shift, and enter state 30
	name           shift, and enter state 31

	Field          goto state 27
	CommaSepFields goto state 28
	CommaSepFields1goto state 29

State 17

	SafePrimitive -> bits . MaybeType                   (rule 22)

	'let'          reduce using rule 40
	'and'          reduce using rule 40
	'fun'          reduce using rule 40
	'in'           reduce using rule 40
	'do'           reduce using rule 40
	';'            reduce using rule 40
	','            reduce using rule 40
	':'            shift, and enter state 22
	'('            reduce using rule 40
	')'            reduce using rule 40
	' ['           reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'['            reduce using rule 40
	'.'            reduce using rule 40
	infixOp        reduce using rule 40
	bits           reduce using rule 40
	string         reduce using rule 40
	int            reduce using rule 40
	name           reduce using rule 40
	%eof           reduce using rule 40

	MaybeType      goto state 26

State 18

	SafePrimitive -> string . MaybeType                 (rule 23)

	'let'          reduce using rule 40
	'and'          reduce using rule 40
	'fun'          reduce using rule 40
	'in'           reduce using rule 40
	'do'           reduce using rule 40
	';'            reduce using rule 40
	','            reduce using rule 40
	':'            shift, and enter state 22
	'('            reduce using rule 40
	')'            reduce using rule 40
	' ['           reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'['            reduce using rule 40
	'.'            reduce using rule 40
	infixOp        reduce using rule 40
	bits           reduce using rule 40
	string         reduce using rule 40
	int            reduce using rule 40
	name           reduce using rule 40
	%eof           reduce using rule 40

	MaybeType      goto state 25

State 19

	SafePrimitive -> int . MaybeType                    (rule 24)

	'let'          reduce using rule 40
	'and'          reduce using rule 40
	'fun'          reduce using rule 40
	'in'           reduce using rule 40
	'do'           reduce using rule 40
	';'            reduce using rule 40
	','            reduce using rule 40
	':'            shift, and enter state 22
	'('            reduce using rule 40
	')'            reduce using rule 40
	' ['           reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'['            reduce using rule 40
	'.'            reduce using rule 40
	infixOp        reduce using rule 40
	bits           reduce using rule 40
	string         reduce using rule 40
	int            reduce using rule 40
	name           reduce using rule 40
	%eof           reduce using rule 40

	MaybeType      goto state 24

State 20

	Statement -> name . '::' Type                       (rule 2)
	SafePrimitive -> name . MaybeType                   (rule 25)

	'let'          reduce using rule 40
	'fun'          reduce using rule 40
	'do'           reduce using rule 40
	';'            reduce using rule 40
	':'            shift, and enter state 22
	'::'           shift, and enter state 23
	'('            reduce using rule 40
	' ['           reduce using rule 40
	'{'            reduce using rule 40
	'['            reduce using rule 40
	'.'            reduce using rule 40
	infixOp        reduce using rule 40
	bits           reduce using rule 40
	string         reduce using rule 40
	int            reduce using rule 40
	name           reduce using rule 40
	%eof           reduce using rule 40

	MaybeType      goto state 21

State 21

	SafePrimitive -> name MaybeType .                   (rule 25)

	'let'          reduce using rule 25
	'and'          reduce using rule 25
	'fun'          reduce using rule 25
	'in'           reduce using rule 25
	'do'           reduce using rule 25
	';'            reduce using rule 25
	','            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	' ['           reduce using rule 25
	']'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	'['            reduce using rule 25
	'.'            reduce using rule 25
	infixOp        reduce using rule 25
	bits           reduce using rule 25
	string         reduce using rule 25
	int            reduce using rule 25
	name           reduce using rule 25
	%eof           reduce using rule 25


State 22

	MaybeType -> ':' . Type                             (rule 41)

	'integer'      shift, and enter state 80
	' ['           shift, and enter state 81
	'['            shift, and enter state 82
	name           shift, and enter state 83

	Type           goto state 84

State 23

	Statement -> name '::' . Type                       (rule 2)

	'integer'      shift, and enter state 80
	' ['           shift, and enter state 81
	'['            shift, and enter state 82
	name           shift, and enter state 83

	Type           goto state 79

State 24

	SafePrimitive -> int MaybeType .                    (rule 24)

	'let'          reduce using rule 24
	'and'          reduce using rule 24
	'fun'          reduce using rule 24
	'in'           reduce using rule 24
	'do'           reduce using rule 24
	';'            reduce using rule 24
	','            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	' ['           reduce using rule 24
	']'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	'['            reduce using rule 24
	'.'            reduce using rule 24
	infixOp        reduce using rule 24
	bits           reduce using rule 24
	string         reduce using rule 24
	int            reduce using rule 24
	name           reduce using rule 24
	%eof           reduce using rule 24


State 25

	SafePrimitive -> string MaybeType .                 (rule 23)

	'let'          reduce using rule 23
	'and'          reduce using rule 23
	'fun'          reduce using rule 23
	'in'           reduce using rule 23
	'do'           reduce using rule 23
	';'            reduce using rule 23
	','            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	' ['           reduce using rule 23
	']'            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	'['            reduce using rule 23
	'.'            reduce using rule 23
	infixOp        reduce using rule 23
	bits           reduce using rule 23
	string         reduce using rule 23
	int            reduce using rule 23
	name           reduce using rule 23
	%eof           reduce using rule 23


State 26

	SafePrimitive -> bits MaybeType .                   (rule 22)

	'let'          reduce using rule 22
	'and'          reduce using rule 22
	'fun'          reduce using rule 22
	'in'           reduce using rule 22
	'do'           reduce using rule 22
	';'            reduce using rule 22
	','            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	' ['           reduce using rule 22
	']'            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	'['            reduce using rule 22
	'.'            reduce using rule 22
	infixOp        reduce using rule 22
	bits           reduce using rule 22
	string         reduce using rule 22
	int            reduce using rule 22
	name           reduce using rule 22
	%eof           reduce using rule 22


State 27

	CommaSepFields1 -> Field .                          (rule 56)
	CommaSepFields1 -> Field . ',' CommaSepFields1      (rule 57)

	','            shift, and enter state 78
	'}'            reduce using rule 56


State 28

	SafePrimitive -> '{' CommaSepFields . '}' MaybeType    (rule 28)

	'}'            shift, and enter state 77


State 29

	CommaSepFields -> CommaSepFields1 .                 (rule 55)

	'}'            reduce using rule 55


State 30

	Field -> string . ':' Expr                          (rule 33)

	':'            shift, and enter state 76


State 31

	Field -> name . ':' Expr                            (rule 32)

	':'            shift, and enter state 75


State 32

	CommaSepExprs1 -> Expr .                            (rule 52)
	CommaSepExprs1 -> Expr . ',' CommaSepExprs1         (rule 53)

	','            shift, and enter state 74
	']'            reduce using rule 52


State 33

	SafePrimitive -> ' [' CommaSepExprs . ']' MaybeType    (rule 27)

	']'            shift, and enter state 73


State 34

	CommaSepExprs -> CommaSepExprs1 .                   (rule 51)

	']'            reduce using rule 51


State 35

	UnsafePrimitive -> 'let' . Declarations1 'in' Expr    (rule 20)

	name           shift, and enter state 46

	Declaration    goto state 44
	Declarations1  goto state 72

State 36

	SafePrimitive -> name . MaybeType                   (rule 25)

	'let'          reduce using rule 40
	'and'          reduce using rule 40
	'fun'          reduce using rule 40
	'in'           reduce using rule 40
	'do'           reduce using rule 40
	';'            reduce using rule 40
	','            reduce using rule 40
	':'            shift, and enter state 22
	'('            reduce using rule 40
	')'            reduce using rule 40
	' ['           reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'['            reduce using rule 40
	'.'            reduce using rule 40
	infixOp        reduce using rule 40
	bits           reduce using rule 40
	string         reduce using rule 40
	int            reduce using rule 40
	name           reduce using rule 40
	%eof           reduce using rule 40

	MaybeType      goto state 21

State 37

	SafePrimitive -> '(' Expr . ')'                     (rule 26)

	')'            shift, and enter state 71


State 38

	SafePrimitive -> 'do' '{' . SemiSepStatements '}'    (rule 29)

	'import'       shift, and enter state 9
	'let'          shift, and enter state 10
	'fun'          shift, and enter state 11
	'type'         shift, and enter state 12
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	'}'            reduce using rule 48
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Statement      goto state 69
	Expr           goto state 4
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8
	SemiSepStatementsgoto state 70

State 39

	Statement -> 'type' name . '=' Type                 (rule 3)

	'='            shift, and enter state 68


State 40

	Args1 -> Arg .                                      (rule 46)
	Args1 -> Arg . Args1                                (rule 47)

	'='            reduce using rule 46
	'->'           reduce using rule 46
	':'            reduce using rule 46
	'('            shift, and enter state 42
	name           shift, and enter state 43

	Arg            goto state 40
	Args1          goto state 67

State 41

	UnsafePrimitive -> 'fun' Args1 . MaybeType '->' Expr    (rule 19)

	'->'           reduce using rule 40
	':'            shift, and enter state 22

	MaybeType      goto state 66

State 42

	Arg -> '(' . name ':' Type ')'                      (rule 12)

	name           shift, and enter state 65


State 43

	Arg -> name .                                       (rule 11)

	'='            reduce using rule 11
	'->'           reduce using rule 11
	':'            reduce using rule 11
	'('            reduce using rule 11
	name           reduce using rule 11


State 44

	Declarations1 -> Declaration .                      (rule 42)
	Declarations1 -> Declaration . 'and' Declarations1    (rule 43)

	'and'          shift, and enter state 64
	'in'           reduce using rule 42
	';'            reduce using rule 42
	%eof           reduce using rule 42


State 45

	Statement -> 'let' Declarations1 .                  (rule 1)
	UnsafePrimitive -> 'let' Declarations1 . 'in' Expr    (rule 20)

	'in'           shift, and enter state 63
	';'            reduce using rule 1
	%eof           reduce using rule 1


State 46

	Declaration -> name . Args MaybeType '=' Expr       (rule 6)

	'='            reduce using rule 44
	':'            reduce using rule 44
	'('            shift, and enter state 42
	name           shift, and enter state 43

	Arg            goto state 40
	Args           goto state 61
	Args1          goto state 62

State 47

	Statement -> 'import' Import .                      (rule 4)

	';'            reduce using rule 4
	%eof           reduce using rule 4


State 48

	Import -> name .                                    (rule 7)
	Import -> name . '(' CommaSepNames ')'              (rule 8)
	Import -> name . 'as' name                          (rule 9)
	Import -> name . '(' CommaSepNames ')' 'as' name    (rule 10)

	'as'           shift, and enter state 59
	';'            reduce using rule 7
	'('            shift, and enter state 60
	%eof           reduce using rule 7


State 49

	Application -> SafePrimitive Primitive .            (rule 17)

	'let'          reduce using rule 17
	'and'          reduce using rule 17
	'fun'          reduce using rule 17
	'in'           reduce using rule 17
	'do'           reduce using rule 17
	';'            reduce using rule 17
	','            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	' ['           reduce using rule 17
	']'            reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	bits           reduce using rule 17
	string         reduce using rule 17
	int            reduce using rule 17
	name           reduce using rule 17
	%eof           reduce using rule 17


State 50

	Primitive -> SafePrimitive .                        (rule 16)
	UnsafePrimitive -> SafePrimitive . infixOp Expr     (rule 21)
	SafePrimitive -> SafePrimitive . '.' name MaybeType    (rule 30)
	SafePrimitive -> SafePrimitive . '[' Expr ']' MaybeType    (rule 31)

	'let'          reduce using rule 16
	'and'          reduce using rule 16
	'fun'          reduce using rule 16
	'in'           reduce using rule 16
	'do'           reduce using rule 16
	';'            reduce using rule 16
	','            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	' ['           reduce using rule 16
	']'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	'['            shift, and enter state 51
	'.'            shift, and enter state 52
	infixOp        shift, and enter state 53
	bits           reduce using rule 16
	string         reduce using rule 16
	int            reduce using rule 16
	name           reduce using rule 16
	%eof           reduce using rule 16


State 51

	SafePrimitive -> SafePrimitive '[' . Expr ']' MaybeType    (rule 31)

	'let'          shift, and enter state 35
	'fun'          shift, and enter state 11
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 36

	Expr           goto state 58
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8

State 52

	SafePrimitive -> SafePrimitive '.' . name MaybeType    (rule 30)

	name           shift, and enter state 57


State 53

	UnsafePrimitive -> SafePrimitive infixOp . Expr     (rule 21)

	'let'          shift, and enter state 35
	'fun'          shift, and enter state 11
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 36

	Expr           goto state 56
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8

State 54

	Application -> Application Primitive .              (rule 18)

	'let'          reduce using rule 18
	'and'          reduce using rule 18
	'fun'          reduce using rule 18
	'in'           reduce using rule 18
	'do'           reduce using rule 18
	';'            reduce using rule 18
	','            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	' ['           reduce using rule 18
	']'            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	bits           reduce using rule 18
	string         reduce using rule 18
	int            reduce using rule 18
	name           reduce using rule 18
	%eof           reduce using rule 18


State 55

	Statement -> 'let' Declarations1 .                  (rule 1)



State 56

	UnsafePrimitive -> SafePrimitive infixOp Expr .     (rule 21)

	'let'          reduce using rule 21
	'and'          reduce using rule 21
	'fun'          reduce using rule 21
	'in'           reduce using rule 21
	'do'           reduce using rule 21
	';'            reduce using rule 21
	','            reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	' ['           reduce using rule 21
	']'            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	bits           reduce using rule 21
	string         reduce using rule 21
	int            reduce using rule 21
	name           reduce using rule 21
	%eof           reduce using rule 21


State 57

	SafePrimitive -> SafePrimitive '.' name . MaybeType    (rule 30)

	'let'          reduce using rule 40
	'and'          reduce using rule 40
	'fun'          reduce using rule 40
	'in'           reduce using rule 40
	'do'           reduce using rule 40
	';'            reduce using rule 40
	','            reduce using rule 40
	':'            shift, and enter state 22
	'('            reduce using rule 40
	')'            reduce using rule 40
	' ['           reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'['            reduce using rule 40
	'.'            reduce using rule 40
	infixOp        reduce using rule 40
	bits           reduce using rule 40
	string         reduce using rule 40
	int            reduce using rule 40
	name           reduce using rule 40
	%eof           reduce using rule 40

	MaybeType      goto state 108

State 58

	SafePrimitive -> SafePrimitive '[' Expr . ']' MaybeType    (rule 31)

	']'            shift, and enter state 107


State 59

	Import -> name 'as' . name                          (rule 9)

	name           shift, and enter state 106


State 60

	Import -> name '(' . CommaSepNames ')'              (rule 8)
	Import -> name '(' . CommaSepNames ')' 'as' name    (rule 10)

	')'            reduce using rule 58
	name           shift, and enter state 105

	CommaSepNames  goto state 103
	CommaSepNames1 goto state 104

State 61

	Declaration -> name Args . MaybeType '=' Expr       (rule 6)

	'='            reduce using rule 40
	':'            shift, and enter state 22

	MaybeType      goto state 102

State 62

	Args -> Args1 .                                     (rule 45)

	'='            reduce using rule 45
	':'            reduce using rule 45


State 63

	UnsafePrimitive -> 'let' Declarations1 'in' . Expr    (rule 20)

	'let'          shift, and enter state 35
	'fun'          shift, and enter state 11
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 36

	Expr           goto state 101
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8

State 64

	Declarations1 -> Declaration 'and' . Declarations1    (rule 43)

	name           shift, and enter state 46

	Declaration    goto state 44
	Declarations1  goto state 100

State 65

	Arg -> '(' name . ':' Type ')'                      (rule 12)

	':'            shift, and enter state 99


State 66

	UnsafePrimitive -> 'fun' Args1 MaybeType . '->' Expr    (rule 19)

	'->'           shift, and enter state 98


State 67

	Args1 -> Arg Args1 .                                (rule 47)

	'='            reduce using rule 47
	'->'           reduce using rule 47
	':'            reduce using rule 47


State 68

	Statement -> 'type' name '=' . Type                 (rule 3)

	'integer'      shift, and enter state 80
	' ['           shift, and enter state 81
	'['            shift, and enter state 82
	name           shift, and enter state 83

	Type           goto state 97

State 69

	SemiSepStatements -> Statement . ';' SemiSepStatements    (rule 49)

	';'            shift, and enter state 96


State 70

	SafePrimitive -> 'do' '{' SemiSepStatements . '}'    (rule 29)

	'}'            shift, and enter state 95


State 71

	SafePrimitive -> '(' Expr ')' .                     (rule 26)

	'let'          reduce using rule 26
	'and'          reduce using rule 26
	'fun'          reduce using rule 26
	'in'           reduce using rule 26
	'do'           reduce using rule 26
	';'            reduce using rule 26
	','            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	' ['           reduce using rule 26
	']'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	'['            reduce using rule 26
	'.'            reduce using rule 26
	infixOp        reduce using rule 26
	bits           reduce using rule 26
	string         reduce using rule 26
	int            reduce using rule 26
	name           reduce using rule 26
	%eof           reduce using rule 26


State 72

	UnsafePrimitive -> 'let' Declarations1 . 'in' Expr    (rule 20)

	'in'           shift, and enter state 63


State 73

	SafePrimitive -> ' [' CommaSepExprs ']' . MaybeType    (rule 27)

	'let'          reduce using rule 40
	'and'          reduce using rule 40
	'fun'          reduce using rule 40
	'in'           reduce using rule 40
	'do'           reduce using rule 40
	';'            reduce using rule 40
	','            reduce using rule 40
	':'            shift, and enter state 22
	'('            reduce using rule 40
	')'            reduce using rule 40
	' ['           reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'['            reduce using rule 40
	'.'            reduce using rule 40
	infixOp        reduce using rule 40
	bits           reduce using rule 40
	string         reduce using rule 40
	int            reduce using rule 40
	name           reduce using rule 40
	%eof           reduce using rule 40

	MaybeType      goto state 94

State 74

	CommaSepExprs1 -> Expr ',' . CommaSepExprs1         (rule 53)

	'let'          shift, and enter state 35
	'fun'          shift, and enter state 11
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 36

	Expr           goto state 32
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8
	CommaSepExprs1 goto state 93

State 75

	Field -> name ':' . Expr                            (rule 32)

	'let'          shift, and enter state 35
	'fun'          shift, and enter state 11
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 36

	Expr           goto state 92
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8

State 76

	Field -> string ':' . Expr                          (rule 33)

	'let'          shift, and enter state 35
	'fun'          shift, and enter state 11
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 36

	Expr           goto state 91
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8

State 77

	SafePrimitive -> '{' CommaSepFields '}' . MaybeType    (rule 28)

	'let'          reduce using rule 40
	'and'          reduce using rule 40
	'fun'          reduce using rule 40
	'in'           reduce using rule 40
	'do'           reduce using rule 40
	';'            reduce using rule 40
	','            reduce using rule 40
	':'            shift, and enter state 22
	'('            reduce using rule 40
	')'            reduce using rule 40
	' ['           reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'['            reduce using rule 40
	'.'            reduce using rule 40
	infixOp        reduce using rule 40
	bits           reduce using rule 40
	string         reduce using rule 40
	int            reduce using rule 40
	name           reduce using rule 40
	%eof           reduce using rule 40

	MaybeType      goto state 90

State 78

	CommaSepFields1 -> Field ',' . CommaSepFields1      (rule 57)

	string         shift, and enter state 30
	name           shift, and enter state 31

	Field          goto state 27
	CommaSepFields1goto state 89

State 79

	Statement -> name '::' Type .                       (rule 2)

	';'            reduce using rule 2
	%eof           reduce using rule 2


State 80

	Type -> 'integer' .                                 (rule 34)

	'let'          reduce using rule 34
	'and'          reduce using rule 34
	'fun'          reduce using rule 34
	'in'           reduce using rule 34
	'do'           reduce using rule 34
	'='            reduce using rule 34
	'->'           reduce using rule 34
	';'            reduce using rule 34
	','            reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	' ['           reduce using rule 34
	']'            reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	'['            reduce using rule 34
	'.'            reduce using rule 34
	infixOp        reduce using rule 34
	bits           reduce using rule 34
	string         reduce using rule 34
	int            reduce using rule 34
	name           reduce using rule 34
	%eof           reduce using rule 34


State 81

	Type -> ' [' . int ']'                              (rule 37)
	Type -> ' [' . Type ']'                             (rule 39)

	'integer'      shift, and enter state 80
	' ['           shift, and enter state 81
	'['            shift, and enter state 82
	int            shift, and enter state 88
	name           shift, and enter state 83

	Type           goto state 87

State 82

	Type -> '[' . int ']'                               (rule 36)
	Type -> '[' . Type ']'                              (rule 38)

	'integer'      shift, and enter state 80
	' ['           shift, and enter state 81
	'['            shift, and enter state 82
	int            shift, and enter state 86
	name           shift, and enter state 83

	Type           goto state 85

State 83

	Type -> name .                                      (rule 35)

	'let'          reduce using rule 35
	'and'          reduce using rule 35
	'fun'          reduce using rule 35
	'in'           reduce using rule 35
	'do'           reduce using rule 35
	'='            reduce using rule 35
	'->'           reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	' ['           reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'['            reduce using rule 35
	'.'            reduce using rule 35
	infixOp        reduce using rule 35
	bits           reduce using rule 35
	string         reduce using rule 35
	int            reduce using rule 35
	name           reduce using rule 35
	%eof           reduce using rule 35


State 84

	MaybeType -> ':' Type .                             (rule 41)

	'let'          reduce using rule 41
	'and'          reduce using rule 41
	'fun'          reduce using rule 41
	'in'           reduce using rule 41
	'do'           reduce using rule 41
	'='            reduce using rule 41
	'->'           reduce using rule 41
	';'            reduce using rule 41
	','            reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	' ['           reduce using rule 41
	']'            reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	'['            reduce using rule 41
	'.'            reduce using rule 41
	infixOp        reduce using rule 41
	bits           reduce using rule 41
	string         reduce using rule 41
	int            reduce using rule 41
	name           reduce using rule 41
	%eof           reduce using rule 41


State 85

	Type -> '[' Type . ']'                              (rule 38)

	']'            shift, and enter state 119


State 86

	Type -> '[' int . ']'                               (rule 36)

	']'            shift, and enter state 118


State 87

	Type -> ' [' Type . ']'                             (rule 39)

	']'            shift, and enter state 117


State 88

	Type -> ' [' int . ']'                              (rule 37)

	']'            shift, and enter state 116


State 89

	CommaSepFields1 -> Field ',' CommaSepFields1 .      (rule 57)

	'}'            reduce using rule 57


State 90

	SafePrimitive -> '{' CommaSepFields '}' MaybeType .    (rule 28)

	'let'          reduce using rule 28
	'and'          reduce using rule 28
	'fun'          reduce using rule 28
	'in'           reduce using rule 28
	'do'           reduce using rule 28
	';'            reduce using rule 28
	','            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	' ['           reduce using rule 28
	']'            reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	'['            reduce using rule 28
	'.'            reduce using rule 28
	infixOp        reduce using rule 28
	bits           reduce using rule 28
	string         reduce using rule 28
	int            reduce using rule 28
	name           reduce using rule 28
	%eof           reduce using rule 28


State 91

	Field -> string ':' Expr .                          (rule 33)

	','            reduce using rule 33
	'}'            reduce using rule 33


State 92

	Field -> name ':' Expr .                            (rule 32)

	','            reduce using rule 32
	'}'            reduce using rule 32


State 93

	CommaSepExprs1 -> Expr ',' CommaSepExprs1 .         (rule 53)

	']'            reduce using rule 53


State 94

	SafePrimitive -> ' [' CommaSepExprs ']' MaybeType .    (rule 27)

	'let'          reduce using rule 27
	'and'          reduce using rule 27
	'fun'          reduce using rule 27
	'in'           reduce using rule 27
	'do'           reduce using rule 27
	';'            reduce using rule 27
	','            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	' ['           reduce using rule 27
	']'            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	'['            reduce using rule 27
	'.'            reduce using rule 27
	infixOp        reduce using rule 27
	bits           reduce using rule 27
	string         reduce using rule 27
	int            reduce using rule 27
	name           reduce using rule 27
	%eof           reduce using rule 27


State 95

	SafePrimitive -> 'do' '{' SemiSepStatements '}' .    (rule 29)

	'let'          reduce using rule 29
	'and'          reduce using rule 29
	'fun'          reduce using rule 29
	'in'           reduce using rule 29
	'do'           reduce using rule 29
	';'            reduce using rule 29
	','            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	' ['           reduce using rule 29
	']'            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	'['            reduce using rule 29
	'.'            reduce using rule 29
	infixOp        reduce using rule 29
	bits           reduce using rule 29
	string         reduce using rule 29
	int            reduce using rule 29
	name           reduce using rule 29
	%eof           reduce using rule 29


State 96

	SemiSepStatements -> Statement ';' . SemiSepStatements    (rule 49)

	'import'       shift, and enter state 9
	'let'          shift, and enter state 10
	'fun'          shift, and enter state 11
	'type'         shift, and enter state 12
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	'}'            reduce using rule 48
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 20

	Statement      goto state 69
	Expr           goto state 4
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8
	SemiSepStatementsgoto state 115

State 97

	Statement -> 'type' name '=' Type .                 (rule 3)

	';'            reduce using rule 3
	%eof           reduce using rule 3


State 98

	UnsafePrimitive -> 'fun' Args1 MaybeType '->' . Expr    (rule 19)

	'let'          shift, and enter state 35
	'fun'          shift, and enter state 11
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 36

	Expr           goto state 114
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8

State 99

	Arg -> '(' name ':' . Type ')'                      (rule 12)

	'integer'      shift, and enter state 80
	' ['           shift, and enter state 81
	'['            shift, and enter state 82
	name           shift, and enter state 83

	Type           goto state 113

State 100

	Declarations1 -> Declaration 'and' Declarations1 .    (rule 43)

	'in'           reduce using rule 43
	';'            reduce using rule 43
	%eof           reduce using rule 43


State 101

	UnsafePrimitive -> 'let' Declarations1 'in' Expr .    (rule 20)

	'let'          reduce using rule 20
	'and'          reduce using rule 20
	'fun'          reduce using rule 20
	'in'           reduce using rule 20
	'do'           reduce using rule 20
	';'            reduce using rule 20
	','            reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	' ['           reduce using rule 20
	']'            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	bits           reduce using rule 20
	string         reduce using rule 20
	int            reduce using rule 20
	name           reduce using rule 20
	%eof           reduce using rule 20


State 102

	Declaration -> name Args MaybeType . '=' Expr       (rule 6)

	'='            shift, and enter state 112


State 103

	Import -> name '(' CommaSepNames . ')'              (rule 8)
	Import -> name '(' CommaSepNames . ')' 'as' name    (rule 10)

	')'            shift, and enter state 111


State 104

	CommaSepNames -> CommaSepNames1 .                   (rule 59)

	')'            reduce using rule 59


State 105

	CommaSepNames1 -> name .                            (rule 60)
	CommaSepNames1 -> name . ',' CommaSepNames1         (rule 61)

	','            shift, and enter state 110
	')'            reduce using rule 60


State 106

	Import -> name 'as' name .                          (rule 9)

	';'            reduce using rule 9
	%eof           reduce using rule 9


State 107

	SafePrimitive -> SafePrimitive '[' Expr ']' . MaybeType    (rule 31)

	'let'          reduce using rule 40
	'and'          reduce using rule 40
	'fun'          reduce using rule 40
	'in'           reduce using rule 40
	'do'           reduce using rule 40
	';'            reduce using rule 40
	','            reduce using rule 40
	':'            shift, and enter state 22
	'('            reduce using rule 40
	')'            reduce using rule 40
	' ['           reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'['            reduce using rule 40
	'.'            reduce using rule 40
	infixOp        reduce using rule 40
	bits           reduce using rule 40
	string         reduce using rule 40
	int            reduce using rule 40
	name           reduce using rule 40
	%eof           reduce using rule 40

	MaybeType      goto state 109

State 108

	SafePrimitive -> SafePrimitive '.' name MaybeType .    (rule 30)

	'let'          reduce using rule 30
	'and'          reduce using rule 30
	'fun'          reduce using rule 30
	'in'           reduce using rule 30
	'do'           reduce using rule 30
	';'            reduce using rule 30
	','            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	' ['           reduce using rule 30
	']'            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	'['            reduce using rule 30
	'.'            reduce using rule 30
	infixOp        reduce using rule 30
	bits           reduce using rule 30
	string         reduce using rule 30
	int            reduce using rule 30
	name           reduce using rule 30
	%eof           reduce using rule 30


State 109

	SafePrimitive -> SafePrimitive '[' Expr ']' MaybeType .    (rule 31)

	'let'          reduce using rule 31
	'and'          reduce using rule 31
	'fun'          reduce using rule 31
	'in'           reduce using rule 31
	'do'           reduce using rule 31
	';'            reduce using rule 31
	','            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	' ['           reduce using rule 31
	']'            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	'['            reduce using rule 31
	'.'            reduce using rule 31
	infixOp        reduce using rule 31
	bits           reduce using rule 31
	string         reduce using rule 31
	int            reduce using rule 31
	name           reduce using rule 31
	%eof           reduce using rule 31


State 110

	CommaSepNames1 -> name ',' . CommaSepNames1         (rule 61)

	name           shift, and enter state 105

	CommaSepNames1 goto state 123

State 111

	Import -> name '(' CommaSepNames ')' .              (rule 8)
	Import -> name '(' CommaSepNames ')' . 'as' name    (rule 10)

	'as'           shift, and enter state 122
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 112

	Declaration -> name Args MaybeType '=' . Expr       (rule 6)

	'let'          shift, and enter state 35
	'fun'          shift, and enter state 11
	'do'           shift, and enter state 13
	'('            shift, and enter state 14
	' ['           shift, and enter state 15
	'{'            shift, and enter state 16
	bits           shift, and enter state 17
	string         shift, and enter state 18
	int            shift, and enter state 19
	name           shift, and enter state 36

	Expr           goto state 121
	Primitive      goto state 5
	Application    goto state 6
	UnsafePrimitivegoto state 7
	SafePrimitive  goto state 8

State 113

	Arg -> '(' name ':' Type . ')'                      (rule 12)

	')'            shift, and enter state 120


State 114

	UnsafePrimitive -> 'fun' Args1 MaybeType '->' Expr .    (rule 19)

	'let'          reduce using rule 19
	'and'          reduce using rule 19
	'fun'          reduce using rule 19
	'in'           reduce using rule 19
	'do'           reduce using rule 19
	';'            reduce using rule 19
	','            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	' ['           reduce using rule 19
	']'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	bits           reduce using rule 19
	string         reduce using rule 19
	int            reduce using rule 19
	name           reduce using rule 19
	%eof           reduce using rule 19


State 115

	SemiSepStatements -> Statement ';' SemiSepStatements .    (rule 49)

	'}'            reduce using rule 49


State 116

	Type -> ' [' int ']' .                              (rule 37)

	'let'          reduce using rule 37
	'and'          reduce using rule 37
	'fun'          reduce using rule 37
	'in'           reduce using rule 37
	'do'           reduce using rule 37
	'='            reduce using rule 37
	'->'           reduce using rule 37
	';'            reduce using rule 37
	','            reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	' ['           reduce using rule 37
	']'            reduce using rule 37
	'{'            reduce using rule 37
	'}'            reduce using rule 37
	'['            reduce using rule 37
	'.'            reduce using rule 37
	infixOp        reduce using rule 37
	bits           reduce using rule 37
	string         reduce using rule 37
	int            reduce using rule 37
	name           reduce using rule 37
	%eof           reduce using rule 37


State 117

	Type -> ' [' Type ']' .                             (rule 39)

	'let'          reduce using rule 39
	'and'          reduce using rule 39
	'fun'          reduce using rule 39
	'in'           reduce using rule 39
	'do'           reduce using rule 39
	'='            reduce using rule 39
	'->'           reduce using rule 39
	';'            reduce using rule 39
	','            reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	' ['           reduce using rule 39
	']'            reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	'['            reduce using rule 39
	'.'            reduce using rule 39
	infixOp        reduce using rule 39
	bits           reduce using rule 39
	string         reduce using rule 39
	int            reduce using rule 39
	name           reduce using rule 39
	%eof           reduce using rule 39


State 118

	Type -> '[' int ']' .                               (rule 36)

	'let'          reduce using rule 36
	'and'          reduce using rule 36
	'fun'          reduce using rule 36
	'in'           reduce using rule 36
	'do'           reduce using rule 36
	'='            reduce using rule 36
	'->'           reduce using rule 36
	';'            reduce using rule 36
	','            reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	' ['           reduce using rule 36
	']'            reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	'['            reduce using rule 36
	'.'            reduce using rule 36
	infixOp        reduce using rule 36
	bits           reduce using rule 36
	string         reduce using rule 36
	int            reduce using rule 36
	name           reduce using rule 36
	%eof           reduce using rule 36


State 119

	Type -> '[' Type ']' .                              (rule 38)

	'let'          reduce using rule 38
	'and'          reduce using rule 38
	'fun'          reduce using rule 38
	'in'           reduce using rule 38
	'do'           reduce using rule 38
	'='            reduce using rule 38
	'->'           reduce using rule 38
	';'            reduce using rule 38
	','            reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	' ['           reduce using rule 38
	']'            reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	'['            reduce using rule 38
	'.'            reduce using rule 38
	infixOp        reduce using rule 38
	bits           reduce using rule 38
	string         reduce using rule 38
	int            reduce using rule 38
	name           reduce using rule 38
	%eof           reduce using rule 38


State 120

	Arg -> '(' name ':' Type ')' .                      (rule 12)

	'='            reduce using rule 12
	'->'           reduce using rule 12
	':'            reduce using rule 12
	'('            reduce using rule 12
	name           reduce using rule 12


State 121

	Declaration -> name Args MaybeType '=' Expr .       (rule 6)

	'and'          reduce using rule 6
	'in'           reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 122

	Import -> name '(' CommaSepNames ')' 'as' . name    (rule 10)

	name           shift, and enter state 124


State 123

	CommaSepNames1 -> name ',' CommaSepNames1 .         (rule 61)

	')'            reduce using rule 61


State 124

	Import -> name '(' CommaSepNames ')' 'as' name .    (rule 10)

	';'            reduce using rule 10
	%eof           reduce using rule 10


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 62
Number of terminals: 28
Number of non-terminals: 23
Number of states: 125
