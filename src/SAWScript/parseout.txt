-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.9 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Statement                          (0)
	Statement -> 'let' Declarations1                   (1)
	Statement -> name '::' Type                        (2)
	Statement -> name Exprs                            (3)
	Statement -> 'type' name '=' Type                  (4)
	Statement -> 'import' Import                       (5)
	Declaration -> name Args MaybeType '=' Expr        (6)
	Import -> name                                     (7)
	Import -> name '(' CommaSepNames ')'               (8)
	Import -> name 'as' name                           (9)
	Import -> name '(' CommaSepNames ')' 'as' name     (10)
	Arg -> name                                        (11)
	Arg -> '(' name ':' Type ')'                       (12)
	Expr -> UnsafeExpr                                 (13)
	Expr -> SafeExpr                                   (14)
	UnsafeExpr -> 'fun' Args MaybeType '->' Expr       (15)
	UnsafeExpr -> 'let' Declarations1 'in' Expr        (16)
	SafeExpr -> bits MaybeType                         (17)
	SafeExpr -> string MaybeType                       (18)
	SafeExpr -> int MaybeType                          (19)
	SafeExpr -> name MaybeType                         (20)
	SafeExpr -> '{' CommaSepFields '}' MaybeType       (21)
	SafeExpr -> '(' Expr ')' MaybeType                 (22)
	SafeExpr -> ' [' CommaSepExprs ']' MaybeType       (23)
	SafeExpr -> 'do' '{' SemiSepStatements '}'         (24)
	SafeExpr -> SafeExpr '.' name MaybeType            (25)
	SafeExpr -> SafeExpr '[' Expr ']' MaybeType        (26)
	Field -> name ':' Expr                             (27)
	Field -> string ':' Expr                           (28)
	Type -> 'integer'                                  (29)
	Type -> name                                       (30)
	Type -> '[' int ']'                                (31)
	Type -> ' [' int ']'                               (32)
	Type -> '[' Type ']'                               (33)
	Type -> ' [' Type ']'                              (34)
	MaybeType ->                                       (35)
	MaybeType -> ':' Type                              (36)
	Declarations1 -> Declaration                       (37)
	Declarations1 -> Declaration 'and' Declarations1   (38)
	Args ->                                            (39)
	Args -> Args1                                      (40)
	Args1 -> Arg                                       (41)
	Args1 -> Arg Args1                                 (42)
	SemiSepStatements ->                               (43)
	SemiSepStatements -> Statement ';' SemiSepStatements   (44)
	Exprs ->                                           (45)
	Exprs -> Exprs1                                    (46)
	Exprs1 -> Expr                                     (47)
	Exprs1 -> SafeExpr Exprs1                          (48)
	CommaSepExprs ->                                   (49)
	CommaSepExprs -> CommaSepExprs1                    (50)
	CommaSepExprs1 -> Expr                             (51)
	CommaSepExprs1 -> Expr ',' CommaSepExprs1          (52)
	CommaSepFields ->                                  (53)
	CommaSepFields -> CommaSepFields1                  (54)
	CommaSepFields1 -> Field                           (55)
	CommaSepFields1 -> Field ',' CommaSepFields1       (56)
	CommaSepNames ->                                   (57)
	CommaSepNames -> CommaSepNames1                    (58)
	CommaSepNames1 -> name                             (59)
	CommaSepNames1 -> name ',' CommaSepNames1          (60)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'import'       { T.Keyword    _ "import" }
	'as'           { T.Keyword    _ "as" }
	'let'          { T.Keyword    _ "let" }
	'and'          { T.Keyword    _ "and" }
	'fun'          { T.Keyword    _ "fun" }
	'in'           { T.Keyword    _ "in" }
	'type'         { T.Keyword    _ "type" }
	'do'           { T.Keyword    _ "do" }
	'integer'      { T.Keyword    _ "integer" }
	'='            { T.Infix      _ "=" }
	'->'           { T.Infix      _ "->" }
	';'            { T.Infix      _ ";" }
	','            { T.Infix      _ "," }
	':'            { T.Infix      _ ":" }
	'::'           { T.Infix      _ "::" }
	'('            { T.OutfixL    _ "(" }
	')'            { T.OutfixR    _ ")" }
	' ['           { T.OutfixL    _ "[" }
	']'            { T.OutfixR    _ "]" }
	'{'            { T.OutfixL    _ "{" }
	'}'            { T.OutfixR    _ "}" }
	'['            { T.Postfix    _ "[" }
	'.'            { T.Postfix    _ "." }
	bits           { T.Bitfield   _ $$ }
	string         { T.String     _ $$ }
	int            { T.Integer    _ $$ }
	name           { T.Identifier _ $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Statement       rules 1, 2, 3, 4, 5
	Declaration     rule  6
	Import          rules 7, 8, 9, 10
	Arg             rules 11, 12
	Expr            rules 13, 14
	UnsafeExpr      rules 15, 16
	SafeExpr        rules 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
	Field           rules 27, 28
	Type            rules 29, 30, 31, 32, 33, 34
	MaybeType       rules 35, 36
	Declarations1   rules 37, 38
	Args            rules 39, 40
	Args1           rules 41, 42
	SemiSepStatements rules 43, 44
	Exprs           rules 45, 46
	Exprs1          rules 47, 48
	CommaSepExprs   rules 49, 50
	CommaSepExprs1  rules 51, 52
	CommaSepFields  rules 53, 54
	CommaSepFields1 rules 55, 56
	CommaSepNames   rules 57, 58
	CommaSepNames1  rules 59, 60

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'import'       shift, and enter state 4
	'let'          shift, and enter state 2
	'type'         shift, and enter state 5
	name           shift, and enter state 6

	Statement      goto state 3

State 1


	'let'          shift, and enter state 2


State 2

	Statement -> 'let' . Declarations1                  (rule 1)

	name           shift, and enter state 28

	Declaration    goto state 26
	Declarations1  goto state 27

State 3

	%start_parse -> Statement .                         (rule 0)

	%eof           accept


State 4

	Statement -> 'import' . Import                      (rule 5)

	name           shift, and enter state 25

	Import         goto state 24

State 5

	Statement -> 'type' . name '=' Type                 (rule 4)

	name           shift, and enter state 23


State 6

	Statement -> name . '::' Type                       (rule 2)
	Statement -> name . Exprs                           (rule 3)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	';'            reduce using rule 45
	'::'           shift, and enter state 15
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	'{'            shift, and enter state 18
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22
	%eof           reduce using rule 45

	Expr           goto state 7
	UnsafeExpr     goto state 8
	SafeExpr       goto state 9
	Exprs          goto state 10
	Exprs1         goto state 11

State 7

	Exprs1 -> Expr .                                    (rule 47)

	';'            reduce using rule 47
	%eof           reduce using rule 47


State 8

	Expr -> UnsafeExpr .                                (rule 13)

	'and'          reduce using rule 13
	'in'           reduce using rule 13
	';'            reduce using rule 13
	','            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	'}'            reduce using rule 13
	%eof           reduce using rule 13


State 9

	Expr -> SafeExpr .                                  (rule 14)
	SafeExpr -> SafeExpr . '.' name MaybeType           (rule 25)
	SafeExpr -> SafeExpr . '[' Expr ']' MaybeType       (rule 26)
	Exprs1 -> SafeExpr . Exprs1                         (rule 48)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	';'            reduce using rule 14
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	'{'            shift, and enter state 18
	'['            shift, and enter state 62
	'.'            shift, and enter state 63
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22
	%eof           reduce using rule 14

	Expr           goto state 7
	UnsafeExpr     goto state 8
	SafeExpr       goto state 9
	Exprs1         goto state 61

State 10

	Statement -> name Exprs .                           (rule 3)

	';'            reduce using rule 3
	%eof           reduce using rule 3


State 11

	Exprs -> Exprs1 .                                   (rule 46)

	';'            reduce using rule 46
	%eof           reduce using rule 46


State 12

	UnsafeExpr -> 'let' . Declarations1 'in' Expr       (rule 16)

	name           shift, and enter state 28

	Declaration    goto state 26
	Declarations1  goto state 60

State 13

	UnsafeExpr -> 'fun' . Args MaybeType '->' Expr      (rule 15)

	'->'           reduce using rule 39
	':'            reduce using rule 39
	'('            shift, and enter state 32
	name           shift, and enter state 33

	Arg            goto state 29
	Args           goto state 59
	Args1          goto state 31

State 14

	SafeExpr -> 'do' . '{' SemiSepStatements '}'        (rule 24)

	'{'            shift, and enter state 58


State 15

	Statement -> name '::' . Type                       (rule 2)

	'integer'      shift, and enter state 54
	' ['           shift, and enter state 55
	'['            shift, and enter state 56
	name           shift, and enter state 57

	Type           goto state 53

State 16

	SafeExpr -> '(' . Expr ')' MaybeType                (rule 22)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	'{'            shift, and enter state 18
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22

	Expr           goto state 52
	UnsafeExpr     goto state 8
	SafeExpr       goto state 49

State 17

	SafeExpr -> ' [' . CommaSepExprs ']' MaybeType      (rule 23)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	']'            reduce using rule 49
	'{'            shift, and enter state 18
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22

	Expr           goto state 48
	UnsafeExpr     goto state 8
	SafeExpr       goto state 49
	CommaSepExprs  goto state 50
	CommaSepExprs1 goto state 51

State 18

	SafeExpr -> '{' . CommaSepFields '}' MaybeType      (rule 21)

	'}'            reduce using rule 53
	string         shift, and enter state 46
	name           shift, and enter state 47

	Field          goto state 43
	CommaSepFields goto state 44
	CommaSepFields1goto state 45

State 19

	SafeExpr -> bits . MaybeType                        (rule 17)

	'let'          reduce using rule 35
	'and'          reduce using rule 35
	'fun'          reduce using rule 35
	'in'           reduce using rule 35
	'do'           reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	':'            shift, and enter state 39
	'('            reduce using rule 35
	')'            reduce using rule 35
	' ['           reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'['            reduce using rule 35
	'.'            reduce using rule 35
	bits           reduce using rule 35
	string         reduce using rule 35
	int            reduce using rule 35
	name           reduce using rule 35
	%eof           reduce using rule 35

	MaybeType      goto state 42

State 20

	SafeExpr -> string . MaybeType                      (rule 18)

	'let'          reduce using rule 35
	'and'          reduce using rule 35
	'fun'          reduce using rule 35
	'in'           reduce using rule 35
	'do'           reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	':'            shift, and enter state 39
	'('            reduce using rule 35
	')'            reduce using rule 35
	' ['           reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'['            reduce using rule 35
	'.'            reduce using rule 35
	bits           reduce using rule 35
	string         reduce using rule 35
	int            reduce using rule 35
	name           reduce using rule 35
	%eof           reduce using rule 35

	MaybeType      goto state 41

State 21

	SafeExpr -> int . MaybeType                         (rule 19)

	'let'          reduce using rule 35
	'and'          reduce using rule 35
	'fun'          reduce using rule 35
	'in'           reduce using rule 35
	'do'           reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	':'            shift, and enter state 39
	'('            reduce using rule 35
	')'            reduce using rule 35
	' ['           reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'['            reduce using rule 35
	'.'            reduce using rule 35
	bits           reduce using rule 35
	string         reduce using rule 35
	int            reduce using rule 35
	name           reduce using rule 35
	%eof           reduce using rule 35

	MaybeType      goto state 40

State 22

	SafeExpr -> name . MaybeType                        (rule 20)

	'let'          reduce using rule 35
	'and'          reduce using rule 35
	'fun'          reduce using rule 35
	'in'           reduce using rule 35
	'do'           reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	':'            shift, and enter state 39
	'('            reduce using rule 35
	')'            reduce using rule 35
	' ['           reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'['            reduce using rule 35
	'.'            reduce using rule 35
	bits           reduce using rule 35
	string         reduce using rule 35
	int            reduce using rule 35
	name           reduce using rule 35
	%eof           reduce using rule 35

	MaybeType      goto state 38

State 23

	Statement -> 'type' name . '=' Type                 (rule 4)

	'='            shift, and enter state 37


State 24

	Statement -> 'import' Import .                      (rule 5)

	';'            reduce using rule 5
	%eof           reduce using rule 5


State 25

	Import -> name .                                    (rule 7)
	Import -> name . '(' CommaSepNames ')'              (rule 8)
	Import -> name . 'as' name                          (rule 9)
	Import -> name . '(' CommaSepNames ')' 'as' name    (rule 10)

	'as'           shift, and enter state 35
	';'            reduce using rule 7
	'('            shift, and enter state 36
	%eof           reduce using rule 7


State 26

	Declarations1 -> Declaration .                      (rule 37)
	Declarations1 -> Declaration . 'and' Declarations1    (rule 38)

	'and'          shift, and enter state 34
	'in'           reduce using rule 37
	';'            reduce using rule 37
	%eof           reduce using rule 37


State 27

	Statement -> 'let' Declarations1 .                  (rule 1)

	';'            reduce using rule 1
	%eof           reduce using rule 1


State 28

	Declaration -> name . Args MaybeType '=' Expr       (rule 6)

	'='            reduce using rule 39
	':'            reduce using rule 39
	'('            shift, and enter state 32
	name           shift, and enter state 33

	Arg            goto state 29
	Args           goto state 30
	Args1          goto state 31

State 29

	Args1 -> Arg .                                      (rule 41)
	Args1 -> Arg . Args1                                (rule 42)

	'='            reduce using rule 41
	'->'           reduce using rule 41
	':'            reduce using rule 41
	'('            shift, and enter state 32
	name           shift, and enter state 33

	Arg            goto state 29
	Args1          goto state 90

State 30

	Declaration -> name Args . MaybeType '=' Expr       (rule 6)

	'='            reduce using rule 35
	':'            shift, and enter state 39

	MaybeType      goto state 89

State 31

	Args -> Args1 .                                     (rule 40)

	'='            reduce using rule 40
	'->'           reduce using rule 40
	':'            reduce using rule 40


State 32

	Arg -> '(' . name ':' Type ')'                      (rule 12)

	name           shift, and enter state 88


State 33

	Arg -> name .                                       (rule 11)

	'='            reduce using rule 11
	'->'           reduce using rule 11
	':'            reduce using rule 11
	'('            reduce using rule 11
	name           reduce using rule 11


State 34

	Declarations1 -> Declaration 'and' . Declarations1    (rule 38)

	name           shift, and enter state 28

	Declaration    goto state 26
	Declarations1  goto state 87

State 35

	Import -> name 'as' . name                          (rule 9)

	name           shift, and enter state 86


State 36

	Import -> name '(' . CommaSepNames ')'              (rule 8)
	Import -> name '(' . CommaSepNames ')' 'as' name    (rule 10)

	')'            reduce using rule 57
	name           shift, and enter state 85

	CommaSepNames  goto state 83
	CommaSepNames1 goto state 84

State 37

	Statement -> 'type' name '=' . Type                 (rule 4)

	'integer'      shift, and enter state 54
	' ['           shift, and enter state 55
	'['            shift, and enter state 56
	name           shift, and enter state 57

	Type           goto state 82

State 38

	SafeExpr -> name MaybeType .                        (rule 20)

	'let'          reduce using rule 20
	'and'          reduce using rule 20
	'fun'          reduce using rule 20
	'in'           reduce using rule 20
	'do'           reduce using rule 20
	';'            reduce using rule 20
	','            reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	' ['           reduce using rule 20
	']'            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	'['            reduce using rule 20
	'.'            reduce using rule 20
	bits           reduce using rule 20
	string         reduce using rule 20
	int            reduce using rule 20
	name           reduce using rule 20
	%eof           reduce using rule 20


State 39

	MaybeType -> ':' . Type                             (rule 36)

	'integer'      shift, and enter state 54
	' ['           shift, and enter state 55
	'['            shift, and enter state 56
	name           shift, and enter state 57

	Type           goto state 81

State 40

	SafeExpr -> int MaybeType .                         (rule 19)

	'let'          reduce using rule 19
	'and'          reduce using rule 19
	'fun'          reduce using rule 19
	'in'           reduce using rule 19
	'do'           reduce using rule 19
	';'            reduce using rule 19
	','            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	' ['           reduce using rule 19
	']'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	'['            reduce using rule 19
	'.'            reduce using rule 19
	bits           reduce using rule 19
	string         reduce using rule 19
	int            reduce using rule 19
	name           reduce using rule 19
	%eof           reduce using rule 19


State 41

	SafeExpr -> string MaybeType .                      (rule 18)

	'let'          reduce using rule 18
	'and'          reduce using rule 18
	'fun'          reduce using rule 18
	'in'           reduce using rule 18
	'do'           reduce using rule 18
	';'            reduce using rule 18
	','            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	' ['           reduce using rule 18
	']'            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	'['            reduce using rule 18
	'.'            reduce using rule 18
	bits           reduce using rule 18
	string         reduce using rule 18
	int            reduce using rule 18
	name           reduce using rule 18
	%eof           reduce using rule 18


State 42

	SafeExpr -> bits MaybeType .                        (rule 17)

	'let'          reduce using rule 17
	'and'          reduce using rule 17
	'fun'          reduce using rule 17
	'in'           reduce using rule 17
	'do'           reduce using rule 17
	';'            reduce using rule 17
	','            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	' ['           reduce using rule 17
	']'            reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	'['            reduce using rule 17
	'.'            reduce using rule 17
	bits           reduce using rule 17
	string         reduce using rule 17
	int            reduce using rule 17
	name           reduce using rule 17
	%eof           reduce using rule 17


State 43

	CommaSepFields1 -> Field .                          (rule 55)
	CommaSepFields1 -> Field . ',' CommaSepFields1      (rule 56)

	','            shift, and enter state 80
	'}'            reduce using rule 55


State 44

	SafeExpr -> '{' CommaSepFields . '}' MaybeType      (rule 21)

	'}'            shift, and enter state 79


State 45

	CommaSepFields -> CommaSepFields1 .                 (rule 54)

	'}'            reduce using rule 54


State 46

	Field -> string . ':' Expr                          (rule 28)

	':'            shift, and enter state 78


State 47

	Field -> name . ':' Expr                            (rule 27)

	':'            shift, and enter state 77


State 48

	CommaSepExprs1 -> Expr .                            (rule 51)
	CommaSepExprs1 -> Expr . ',' CommaSepExprs1         (rule 52)

	','            shift, and enter state 76
	']'            reduce using rule 51


State 49

	Expr -> SafeExpr .                                  (rule 14)
	SafeExpr -> SafeExpr . '.' name MaybeType           (rule 25)
	SafeExpr -> SafeExpr . '[' Expr ']' MaybeType       (rule 26)

	'and'          reduce using rule 14
	'in'           reduce using rule 14
	';'            reduce using rule 14
	','            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	'}'            reduce using rule 14
	'['            shift, and enter state 62
	'.'            shift, and enter state 63
	%eof           reduce using rule 14


State 50

	SafeExpr -> ' [' CommaSepExprs . ']' MaybeType      (rule 23)

	']'            shift, and enter state 75


State 51

	CommaSepExprs -> CommaSepExprs1 .                   (rule 50)

	']'            reduce using rule 50


State 52

	SafeExpr -> '(' Expr . ')' MaybeType                (rule 22)

	')'            shift, and enter state 74


State 53

	Statement -> name '::' Type .                       (rule 2)

	';'            reduce using rule 2
	%eof           reduce using rule 2


State 54

	Type -> 'integer' .                                 (rule 29)

	'let'          reduce using rule 29
	'and'          reduce using rule 29
	'fun'          reduce using rule 29
	'in'           reduce using rule 29
	'do'           reduce using rule 29
	'='            reduce using rule 29
	'->'           reduce using rule 29
	';'            reduce using rule 29
	','            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	' ['           reduce using rule 29
	']'            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	'['            reduce using rule 29
	'.'            reduce using rule 29
	bits           reduce using rule 29
	string         reduce using rule 29
	int            reduce using rule 29
	name           reduce using rule 29
	%eof           reduce using rule 29


State 55

	Type -> ' [' . int ']'                              (rule 32)
	Type -> ' [' . Type ']'                             (rule 34)

	'integer'      shift, and enter state 54
	' ['           shift, and enter state 55
	'['            shift, and enter state 56
	int            shift, and enter state 73
	name           shift, and enter state 57

	Type           goto state 72

State 56

	Type -> '[' . int ']'                               (rule 31)
	Type -> '[' . Type ']'                              (rule 33)

	'integer'      shift, and enter state 54
	' ['           shift, and enter state 55
	'['            shift, and enter state 56
	int            shift, and enter state 71
	name           shift, and enter state 57

	Type           goto state 70

State 57

	Type -> name .                                      (rule 30)

	'let'          reduce using rule 30
	'and'          reduce using rule 30
	'fun'          reduce using rule 30
	'in'           reduce using rule 30
	'do'           reduce using rule 30
	'='            reduce using rule 30
	'->'           reduce using rule 30
	';'            reduce using rule 30
	','            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	' ['           reduce using rule 30
	']'            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	'['            reduce using rule 30
	'.'            reduce using rule 30
	bits           reduce using rule 30
	string         reduce using rule 30
	int            reduce using rule 30
	name           reduce using rule 30
	%eof           reduce using rule 30


State 58

	SafeExpr -> 'do' '{' . SemiSepStatements '}'        (rule 24)

	'import'       shift, and enter state 4
	'let'          shift, and enter state 2
	'type'         shift, and enter state 5
	'}'            reduce using rule 43
	name           shift, and enter state 6

	Statement      goto state 68
	SemiSepStatementsgoto state 69

State 59

	UnsafeExpr -> 'fun' Args . MaybeType '->' Expr      (rule 15)

	'->'           reduce using rule 35
	':'            shift, and enter state 39

	MaybeType      goto state 67

State 60

	UnsafeExpr -> 'let' Declarations1 . 'in' Expr       (rule 16)

	'in'           shift, and enter state 66


State 61

	Exprs1 -> SafeExpr Exprs1 .                         (rule 48)

	';'            reduce using rule 48
	%eof           reduce using rule 48


State 62

	SafeExpr -> SafeExpr '[' . Expr ']' MaybeType       (rule 26)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	'{'            shift, and enter state 18
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22

	Expr           goto state 65
	UnsafeExpr     goto state 8
	SafeExpr       goto state 49

State 63

	SafeExpr -> SafeExpr '.' . name MaybeType           (rule 25)

	name           shift, and enter state 64


State 64

	SafeExpr -> SafeExpr '.' name . MaybeType           (rule 25)

	'let'          reduce using rule 35
	'and'          reduce using rule 35
	'fun'          reduce using rule 35
	'in'           reduce using rule 35
	'do'           reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	':'            shift, and enter state 39
	'('            reduce using rule 35
	')'            reduce using rule 35
	' ['           reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'['            reduce using rule 35
	'.'            reduce using rule 35
	bits           reduce using rule 35
	string         reduce using rule 35
	int            reduce using rule 35
	name           reduce using rule 35
	%eof           reduce using rule 35

	MaybeType      goto state 111

State 65

	SafeExpr -> SafeExpr '[' Expr . ']' MaybeType       (rule 26)

	']'            shift, and enter state 110


State 66

	UnsafeExpr -> 'let' Declarations1 'in' . Expr       (rule 16)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	'{'            shift, and enter state 18
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22

	Expr           goto state 109
	UnsafeExpr     goto state 8
	SafeExpr       goto state 49

State 67

	UnsafeExpr -> 'fun' Args MaybeType . '->' Expr      (rule 15)

	'->'           shift, and enter state 108


State 68

	SemiSepStatements -> Statement . ';' SemiSepStatements    (rule 44)

	';'            shift, and enter state 107


State 69

	SafeExpr -> 'do' '{' SemiSepStatements . '}'        (rule 24)

	'}'            shift, and enter state 106


State 70

	Type -> '[' Type . ']'                              (rule 33)

	']'            shift, and enter state 105


State 71

	Type -> '[' int . ']'                               (rule 31)

	']'            shift, and enter state 104


State 72

	Type -> ' [' Type . ']'                             (rule 34)

	']'            shift, and enter state 103


State 73

	Type -> ' [' int . ']'                              (rule 32)

	']'            shift, and enter state 102


State 74

	SafeExpr -> '(' Expr ')' . MaybeType                (rule 22)

	'let'          reduce using rule 35
	'and'          reduce using rule 35
	'fun'          reduce using rule 35
	'in'           reduce using rule 35
	'do'           reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	':'            shift, and enter state 39
	'('            reduce using rule 35
	')'            reduce using rule 35
	' ['           reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'['            reduce using rule 35
	'.'            reduce using rule 35
	bits           reduce using rule 35
	string         reduce using rule 35
	int            reduce using rule 35
	name           reduce using rule 35
	%eof           reduce using rule 35

	MaybeType      goto state 101

State 75

	SafeExpr -> ' [' CommaSepExprs ']' . MaybeType      (rule 23)

	'let'          reduce using rule 35
	'and'          reduce using rule 35
	'fun'          reduce using rule 35
	'in'           reduce using rule 35
	'do'           reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	':'            shift, and enter state 39
	'('            reduce using rule 35
	')'            reduce using rule 35
	' ['           reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'['            reduce using rule 35
	'.'            reduce using rule 35
	bits           reduce using rule 35
	string         reduce using rule 35
	int            reduce using rule 35
	name           reduce using rule 35
	%eof           reduce using rule 35

	MaybeType      goto state 100

State 76

	CommaSepExprs1 -> Expr ',' . CommaSepExprs1         (rule 52)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	'{'            shift, and enter state 18
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22

	Expr           goto state 48
	UnsafeExpr     goto state 8
	SafeExpr       goto state 49
	CommaSepExprs1 goto state 99

State 77

	Field -> name ':' . Expr                            (rule 27)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	'{'            shift, and enter state 18
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22

	Expr           goto state 98
	UnsafeExpr     goto state 8
	SafeExpr       goto state 49

State 78

	Field -> string ':' . Expr                          (rule 28)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	'{'            shift, and enter state 18
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22

	Expr           goto state 97
	UnsafeExpr     goto state 8
	SafeExpr       goto state 49

State 79

	SafeExpr -> '{' CommaSepFields '}' . MaybeType      (rule 21)

	'let'          reduce using rule 35
	'and'          reduce using rule 35
	'fun'          reduce using rule 35
	'in'           reduce using rule 35
	'do'           reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	':'            shift, and enter state 39
	'('            reduce using rule 35
	')'            reduce using rule 35
	' ['           reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'['            reduce using rule 35
	'.'            reduce using rule 35
	bits           reduce using rule 35
	string         reduce using rule 35
	int            reduce using rule 35
	name           reduce using rule 35
	%eof           reduce using rule 35

	MaybeType      goto state 96

State 80

	CommaSepFields1 -> Field ',' . CommaSepFields1      (rule 56)

	string         shift, and enter state 46
	name           shift, and enter state 47

	Field          goto state 43
	CommaSepFields1goto state 95

State 81

	MaybeType -> ':' Type .                             (rule 36)

	'let'          reduce using rule 36
	'and'          reduce using rule 36
	'fun'          reduce using rule 36
	'in'           reduce using rule 36
	'do'           reduce using rule 36
	'='            reduce using rule 36
	'->'           reduce using rule 36
	';'            reduce using rule 36
	','            reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	' ['           reduce using rule 36
	']'            reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	'['            reduce using rule 36
	'.'            reduce using rule 36
	bits           reduce using rule 36
	string         reduce using rule 36
	int            reduce using rule 36
	name           reduce using rule 36
	%eof           reduce using rule 36


State 82

	Statement -> 'type' name '=' Type .                 (rule 4)

	';'            reduce using rule 4
	%eof           reduce using rule 4


State 83

	Import -> name '(' CommaSepNames . ')'              (rule 8)
	Import -> name '(' CommaSepNames . ')' 'as' name    (rule 10)

	')'            shift, and enter state 94


State 84

	CommaSepNames -> CommaSepNames1 .                   (rule 58)

	')'            reduce using rule 58


State 85

	CommaSepNames1 -> name .                            (rule 59)
	CommaSepNames1 -> name . ',' CommaSepNames1         (rule 60)

	','            shift, and enter state 93
	')'            reduce using rule 59


State 86

	Import -> name 'as' name .                          (rule 9)

	';'            reduce using rule 9
	%eof           reduce using rule 9


State 87

	Declarations1 -> Declaration 'and' Declarations1 .    (rule 38)

	'in'           reduce using rule 38
	';'            reduce using rule 38
	%eof           reduce using rule 38


State 88

	Arg -> '(' name . ':' Type ')'                      (rule 12)

	':'            shift, and enter state 92


State 89

	Declaration -> name Args MaybeType . '=' Expr       (rule 6)

	'='            shift, and enter state 91


State 90

	Args1 -> Arg Args1 .                                (rule 42)

	'='            reduce using rule 42
	'->'           reduce using rule 42
	':'            reduce using rule 42


State 91

	Declaration -> name Args MaybeType '=' . Expr       (rule 6)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	'{'            shift, and enter state 18
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22

	Expr           goto state 118
	UnsafeExpr     goto state 8
	SafeExpr       goto state 49

State 92

	Arg -> '(' name ':' . Type ')'                      (rule 12)

	'integer'      shift, and enter state 54
	' ['           shift, and enter state 55
	'['            shift, and enter state 56
	name           shift, and enter state 57

	Type           goto state 117

State 93

	CommaSepNames1 -> name ',' . CommaSepNames1         (rule 60)

	name           shift, and enter state 85

	CommaSepNames1 goto state 116

State 94

	Import -> name '(' CommaSepNames ')' .              (rule 8)
	Import -> name '(' CommaSepNames ')' . 'as' name    (rule 10)

	'as'           shift, and enter state 115
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 95

	CommaSepFields1 -> Field ',' CommaSepFields1 .      (rule 56)

	'}'            reduce using rule 56


State 96

	SafeExpr -> '{' CommaSepFields '}' MaybeType .      (rule 21)

	'let'          reduce using rule 21
	'and'          reduce using rule 21
	'fun'          reduce using rule 21
	'in'           reduce using rule 21
	'do'           reduce using rule 21
	';'            reduce using rule 21
	','            reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	' ['           reduce using rule 21
	']'            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	'['            reduce using rule 21
	'.'            reduce using rule 21
	bits           reduce using rule 21
	string         reduce using rule 21
	int            reduce using rule 21
	name           reduce using rule 21
	%eof           reduce using rule 21


State 97

	Field -> string ':' Expr .                          (rule 28)

	','            reduce using rule 28
	'}'            reduce using rule 28


State 98

	Field -> name ':' Expr .                            (rule 27)

	','            reduce using rule 27
	'}'            reduce using rule 27


State 99

	CommaSepExprs1 -> Expr ',' CommaSepExprs1 .         (rule 52)

	']'            reduce using rule 52


State 100

	SafeExpr -> ' [' CommaSepExprs ']' MaybeType .      (rule 23)

	'let'          reduce using rule 23
	'and'          reduce using rule 23
	'fun'          reduce using rule 23
	'in'           reduce using rule 23
	'do'           reduce using rule 23
	';'            reduce using rule 23
	','            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	' ['           reduce using rule 23
	']'            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	'['            reduce using rule 23
	'.'            reduce using rule 23
	bits           reduce using rule 23
	string         reduce using rule 23
	int            reduce using rule 23
	name           reduce using rule 23
	%eof           reduce using rule 23


State 101

	SafeExpr -> '(' Expr ')' MaybeType .                (rule 22)

	'let'          reduce using rule 22
	'and'          reduce using rule 22
	'fun'          reduce using rule 22
	'in'           reduce using rule 22
	'do'           reduce using rule 22
	';'            reduce using rule 22
	','            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	' ['           reduce using rule 22
	']'            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	'['            reduce using rule 22
	'.'            reduce using rule 22
	bits           reduce using rule 22
	string         reduce using rule 22
	int            reduce using rule 22
	name           reduce using rule 22
	%eof           reduce using rule 22


State 102

	Type -> ' [' int ']' .                              (rule 32)

	'let'          reduce using rule 32
	'and'          reduce using rule 32
	'fun'          reduce using rule 32
	'in'           reduce using rule 32
	'do'           reduce using rule 32
	'='            reduce using rule 32
	'->'           reduce using rule 32
	';'            reduce using rule 32
	','            reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	' ['           reduce using rule 32
	']'            reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	'['            reduce using rule 32
	'.'            reduce using rule 32
	bits           reduce using rule 32
	string         reduce using rule 32
	int            reduce using rule 32
	name           reduce using rule 32
	%eof           reduce using rule 32


State 103

	Type -> ' [' Type ']' .                             (rule 34)

	'let'          reduce using rule 34
	'and'          reduce using rule 34
	'fun'          reduce using rule 34
	'in'           reduce using rule 34
	'do'           reduce using rule 34
	'='            reduce using rule 34
	'->'           reduce using rule 34
	';'            reduce using rule 34
	','            reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	' ['           reduce using rule 34
	']'            reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	'['            reduce using rule 34
	'.'            reduce using rule 34
	bits           reduce using rule 34
	string         reduce using rule 34
	int            reduce using rule 34
	name           reduce using rule 34
	%eof           reduce using rule 34


State 104

	Type -> '[' int ']' .                               (rule 31)

	'let'          reduce using rule 31
	'and'          reduce using rule 31
	'fun'          reduce using rule 31
	'in'           reduce using rule 31
	'do'           reduce using rule 31
	'='            reduce using rule 31
	'->'           reduce using rule 31
	';'            reduce using rule 31
	','            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	' ['           reduce using rule 31
	']'            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	'['            reduce using rule 31
	'.'            reduce using rule 31
	bits           reduce using rule 31
	string         reduce using rule 31
	int            reduce using rule 31
	name           reduce using rule 31
	%eof           reduce using rule 31


State 105

	Type -> '[' Type ']' .                              (rule 33)

	'let'          reduce using rule 33
	'and'          reduce using rule 33
	'fun'          reduce using rule 33
	'in'           reduce using rule 33
	'do'           reduce using rule 33
	'='            reduce using rule 33
	'->'           reduce using rule 33
	';'            reduce using rule 33
	','            reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	' ['           reduce using rule 33
	']'            reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	'['            reduce using rule 33
	'.'            reduce using rule 33
	bits           reduce using rule 33
	string         reduce using rule 33
	int            reduce using rule 33
	name           reduce using rule 33
	%eof           reduce using rule 33


State 106

	SafeExpr -> 'do' '{' SemiSepStatements '}' .        (rule 24)

	'let'          reduce using rule 24
	'and'          reduce using rule 24
	'fun'          reduce using rule 24
	'in'           reduce using rule 24
	'do'           reduce using rule 24
	';'            reduce using rule 24
	','            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	' ['           reduce using rule 24
	']'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	'['            reduce using rule 24
	'.'            reduce using rule 24
	bits           reduce using rule 24
	string         reduce using rule 24
	int            reduce using rule 24
	name           reduce using rule 24
	%eof           reduce using rule 24


State 107

	SemiSepStatements -> Statement ';' . SemiSepStatements    (rule 44)

	'import'       shift, and enter state 4
	'let'          shift, and enter state 2
	'type'         shift, and enter state 5
	'}'            reduce using rule 43
	name           shift, and enter state 6

	Statement      goto state 68
	SemiSepStatementsgoto state 114

State 108

	UnsafeExpr -> 'fun' Args MaybeType '->' . Expr      (rule 15)

	'let'          shift, and enter state 12
	'fun'          shift, and enter state 13
	'do'           shift, and enter state 14
	'('            shift, and enter state 16
	' ['           shift, and enter state 17
	'{'            shift, and enter state 18
	bits           shift, and enter state 19
	string         shift, and enter state 20
	int            shift, and enter state 21
	name           shift, and enter state 22

	Expr           goto state 113
	UnsafeExpr     goto state 8
	SafeExpr       goto state 49

State 109

	UnsafeExpr -> 'let' Declarations1 'in' Expr .       (rule 16)

	'and'          reduce using rule 16
	'in'           reduce using rule 16
	';'            reduce using rule 16
	','            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	'}'            reduce using rule 16
	%eof           reduce using rule 16


State 110

	SafeExpr -> SafeExpr '[' Expr ']' . MaybeType       (rule 26)

	'let'          reduce using rule 35
	'and'          reduce using rule 35
	'fun'          reduce using rule 35
	'in'           reduce using rule 35
	'do'           reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	':'            shift, and enter state 39
	'('            reduce using rule 35
	')'            reduce using rule 35
	' ['           reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'['            reduce using rule 35
	'.'            reduce using rule 35
	bits           reduce using rule 35
	string         reduce using rule 35
	int            reduce using rule 35
	name           reduce using rule 35
	%eof           reduce using rule 35

	MaybeType      goto state 112

State 111

	SafeExpr -> SafeExpr '.' name MaybeType .           (rule 25)

	'let'          reduce using rule 25
	'and'          reduce using rule 25
	'fun'          reduce using rule 25
	'in'           reduce using rule 25
	'do'           reduce using rule 25
	';'            reduce using rule 25
	','            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	' ['           reduce using rule 25
	']'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	'['            reduce using rule 25
	'.'            reduce using rule 25
	bits           reduce using rule 25
	string         reduce using rule 25
	int            reduce using rule 25
	name           reduce using rule 25
	%eof           reduce using rule 25


State 112

	SafeExpr -> SafeExpr '[' Expr ']' MaybeType .       (rule 26)

	'let'          reduce using rule 26
	'and'          reduce using rule 26
	'fun'          reduce using rule 26
	'in'           reduce using rule 26
	'do'           reduce using rule 26
	';'            reduce using rule 26
	','            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	' ['           reduce using rule 26
	']'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	'['            reduce using rule 26
	'.'            reduce using rule 26
	bits           reduce using rule 26
	string         reduce using rule 26
	int            reduce using rule 26
	name           reduce using rule 26
	%eof           reduce using rule 26


State 113

	UnsafeExpr -> 'fun' Args MaybeType '->' Expr .      (rule 15)

	'and'          reduce using rule 15
	'in'           reduce using rule 15
	';'            reduce using rule 15
	','            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	'}'            reduce using rule 15
	%eof           reduce using rule 15


State 114

	SemiSepStatements -> Statement ';' SemiSepStatements .    (rule 44)

	'}'            reduce using rule 44


State 115

	Import -> name '(' CommaSepNames ')' 'as' . name    (rule 10)

	name           shift, and enter state 120


State 116

	CommaSepNames1 -> name ',' CommaSepNames1 .         (rule 60)

	')'            reduce using rule 60


State 117

	Arg -> '(' name ':' Type . ')'                      (rule 12)

	')'            shift, and enter state 119


State 118

	Declaration -> name Args MaybeType '=' Expr .       (rule 6)

	'and'          reduce using rule 6
	'in'           reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 119

	Arg -> '(' name ':' Type ')' .                      (rule 12)

	'='            reduce using rule 12
	'->'           reduce using rule 12
	':'            reduce using rule 12
	'('            reduce using rule 12
	name           reduce using rule 12


State 120

	Import -> name '(' CommaSepNames ')' 'as' name .    (rule 10)

	';'            reduce using rule 10
	%eof           reduce using rule 10


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 61
Number of terminals: 27
Number of non-terminals: 23
Number of states: 121
