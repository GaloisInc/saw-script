abstract Term;
abstract ProofResult;
abstract Simpset;
abstract Theorem;

abstract JavaType;
abstract JavaMethodSpec;

abstract LLVMType;
abstract LLVMMethodSpec;

abstract Fin;

prim return             : { m , a } a -> m a;
prim seq                : {a, b} ProofScript a -> ProofScript b
                       -> ProofScript b; //temporary

prim define             : {a} String -> a -> TopLevel a;

prim print              : {a} a -> TopLevel ();
prim print_term         : {a} a -> TopLevel ();
prim print_type         : {a} a -> TopLevel ();

prim bitSequence        : { n } Int -> [n];

prim read_aig           : {a} String -> TopLevel a;
prim read_sbv           : {a} String -> TopLevel a;
prim read_core          : {a} String -> TopLevel a;

prim write_aig          : {a} String -> a -> TopLevel ();
prim write_smtlib1      : {a} String -> a -> TopLevel ();
prim write_smtlib2      : {a} String -> a -> TopLevel ();
prim write_core         : {a} String -> a -> TopLevel ();

prim equal              : Term -> Term -> TopLevel Term;
prim negate             : Term -> TopLevel Term;

prim prove              : {a} ProofScript ProofResult -> a -> TopLevel Theorem;
prim sat                : {a} ProofScript ProofResult -> a -> TopLevel ();

prim unfolding          : {n} [n]String -> ProofScript ();
prim simplify           : Simpset -> ProofScript ();
prim print_goal         : ProofScript ();
prim abc                : ProofScript ProofResult;
prim abc2               : ProofScript ProofResult;
prim offline_aig        : String -> ProofScript ProofResult;
prim offline_extcore    : String -> ProofScript ProofResult;
prim offline_smtlib1    : String -> ProofScript ProofResult;
prim offline_smtlib2    : String -> ProofScript ProofResult;

prim empty_ss           : Simpset;
prim basic_ss           : Simpset;
prim addsimp            : Theorem -> Simpset -> Simpset;
prim rewrite            : {a} Simpset -> a -> TopLevel a;

prim cryptol_extract    : {a} String -> String -> TopLevel a;

prim java_bool          : JavaType;
prim java_byte          : JavaType;
prim java_char          : JavaType;
prim java_short         : JavaType;
prim java_int           : JavaType;
prim java_long          : JavaType;
prim java_float         : JavaType;
prim java_double        : JavaType;
prim java_array         : Int -> JavaType -> JavaType;
prim java_class         : String -> JavaType;

prim java_value         : {a} String -> a;
prim java_var           : {a} String -> JavaType -> JavaSetup a;
//prim java_may_alias     : {n} [n]String -> JavaSetup ();
prim java_assert        : Bit -> JavaSetup ();
prim java_assert_eq     : {a} String -> a -> JavaSetup ();
prim java_ensure_eq     : {a} String -> a -> JavaSetup ();
prim java_modify        : String -> JavaSetup ();
prim java_return        : {a} a -> JavaSetup ();
prim java_verify_tactic : ProofScript ProofResult -> JavaSetup ();
prim java_pure          : JavaSetup ();

prim java_extract       : {a} String -> String -> JavaSetup () -> TopLevel a;
prim java_verify        : {n} String -> String -> [n]JavaMethodSpec
                       -> JavaSetup ()
                       -> TopLevel JavaMethodSpec;

prim llvm_int           : Int -> LLVMType;
prim llvm_float         : LLVMType;
prim llvm_double        : LLVMType;
prim llvm_array         : Int -> LLVMType -> LLVMType;

prim llvm_value         : {a} String -> a;
prim llvm_var           : {a} String -> LLVMType -> LLVMSetup a;
prim llvm_ptr           : {a} String -> LLVMType -> LLVMSetup a;
//prim llvm_may_alias     : {n} [n]String -> LLVMSetup ();
prim llvm_assert        : Bit -> LLVMSetup ();
prim llvm_assert_eq     : {a} String -> a -> LLVMSetup ();
prim llvm_ensure_eq     : {a} String -> a -> LLVMSetup ();
prim llvm_modify        : String -> LLVMSetup ();
prim llvm_return        : {a} a -> LLVMSetup ();
prim llvm_verify_tactic : ProofScript ProofResult -> LLVMSetup ();
prim llvm_pure          : LLVMSetup ();

prim llvm_extract       : {a} String -> String -> LLVMSetup () -> TopLevel a;
prim llvm_verify        : {n} String -> String -> [n]LLVMMethodSpec
                       -> LLVMSetup ()
                       -> TopLevel LLVMMethodSpec;

prim term_size          : {a} a -> Int;
prim term_tree_size     : {a} a -> Int;

prim eq                 : {a} a -> a -> Bit;
prim ite                : {a} Bit -> a -> a -> a;

prim not                : Bit -> Bit;
prim conj               : Bit -> Bit -> Bit;
prim disj               : Bit -> Bit -> Bit;

prim get                : {n, a} [n]a -> Fin -> a;
prim set                : {n, a} [n]a -> Fin -> a -> [n]a;

prim bvNot              : {n} [n] -> [n];
prim bvAdd              : {n} [n] -> [n] -> [n];
prim bvSub              : {n} [n] -> [n] -> [n];
prim bvMul              : {n} [n] -> [n] -> [n];
prim bvAnd              : {n} [n] -> [n] -> [n];
prim bvOr               : {n} [n] -> [n] -> [n];
prim bvXor              : {n} [n] -> [n] -> [n];
prim bvShl              : {n} [n] -> Int -> [n];
prim bvShr              : {n} [n] -> Int -> [n];

prim bvuge              : {n} [n] -> [n] -> Bit;
prim bvugt              : {n} [n] -> [n] -> Bit;
prim bvule              : {n} [n] -> [n] -> Bit;
prim bvult              : {n} [n] -> [n] -> Bit;

prim finval             : Int -> Int -> Fin;

// Awful stuff we need to remove, once we have type-level arithmetic.
prim ec_join            : [12][32] -> [384];
prim ec_split           : [384] -> [12][32];
prim ec_extend          : [32] -> [384];
prim long_extend        : [32] -> [64];
