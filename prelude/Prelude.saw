abstract Simpset;
abstract Theorem;

abstract JavaType;
abstract JavaMethodSpec;

abstract LLVMType;
abstract LLVMMethodSpec;

abstract CryptolModuleEnv;
abstract JavaClass;
abstract LLVMModule;
abstract Uninterp;

abstract ProofResult;
abstract SatResult;
// TODO: create ProofScript a, with concrete syntax

prim return             : { m , a } a -> m a;

prim define             : String -> Term -> TopLevel Term;

prim print              : {a} a -> TopLevel ();
prim print_term         : Term -> TopLevel ();
prim print_type         : Term -> TopLevel ();
prim show_term          : Term -> String;

prim check_term         : {a} a -> TopLevel Term;

prim bitSequence        : { n } Int -> [n];

prim sbv_uninterpreted  : String -> Term -> TopLevel Uninterp;
prim read_sbv           : {n} String -> [n]Uninterp -> TopLevel Term;

prim read_aig           : String -> TopLevel Term;
prim read_core          : String -> TopLevel Term;

prim write_aig          : String -> Term -> TopLevel ();
prim write_cnf          : String -> Term -> TopLevel ();
prim write_smtlib1      : String -> Term -> TopLevel ();
prim write_smtlib2      : String -> Term -> TopLevel ();
prim write_core         : String -> Term -> TopLevel ();

prim prove              : {b} ProofScript b -> Term -> TopLevel ProofResult;
prim prove_print        : {b} ProofScript b -> Term -> TopLevel Theorem;
prim sat                : {b} ProofScript b -> Term -> TopLevel SatResult;
prim sat_print          : {b} ProofScript b -> Term -> TopLevel ();

prim unfolding          : {n} [n]String -> ProofScript ();
prim simplify           : Simpset -> ProofScript ();
prim print_goal         : ProofScript ();
prim assume_valid       : ProofScript ProofResult;
prim assume_unsat       : ProofScript SatResult;
prim abc                : {a} ProofScript a;
prim boolector          : {a} ProofScript a;
prim cvc4               : {a} ProofScript a;
prim z3                 : {a} ProofScript a;
prim mathsat            : {a} ProofScript a;
prim abc_old            : {a} ProofScript a;
prim yices              : {a} ProofScript a;
prim offline_aig        : {a} String -> ProofScript a;
prim offline_cnf        : {a} String -> ProofScript a;
prim offline_extcore    : {a} String -> ProofScript a;
prim offline_smtlib1    : {a} String -> ProofScript a;
prim offline_smtlib2    : {a} String -> ProofScript a;

prim external_cnf_solver : {n, a} String -> [n]String -> ProofScript a;
//prim external_aig_solver : {n, a} String -> [n]String -> ProofScript a;
//prim external_smtlib1_solver : {n, a} String -> [n]String -> ProofScript a;
//prim external_smtlib2_solver : {n, a} String -> [n]String -> ProofScript a;

prim empty_ss           : Simpset;
prim basic_ss           : Simpset;
prim addsimp            : Theorem -> Simpset -> Simpset;
prim addsimp'           : {a} a -> Simpset -> Simpset;
prim rewrite            : Simpset -> Term -> TopLevel Term;

//prim cryptol_module     : String -> TopLevel CryptolModuleEnv;
//prim cryptol_module_info : CryptolModuleEnv -> TopLevel ();
//prim cryptol_extract    : {a} CryptolModuleEnv -> String -> TopLevel a;

prim java_bool          : JavaType;
prim java_byte          : JavaType;
prim java_char          : JavaType;
prim java_short         : JavaType;
prim java_int           : JavaType;
prim java_long          : JavaType;
prim java_float         : JavaType;
prim java_double        : JavaType;
prim java_array         : Int -> JavaType -> JavaType;
prim java_class         : String -> JavaType;

prim java_value         : {a} String -> a;
prim java_var           : {a} String -> JavaType -> JavaSetup a;
prim java_class_var     : {a} String -> JavaType -> JavaSetup a;
prim java_may_alias     : {n} [n]String -> JavaSetup ();
prim java_assert        : Bit -> JavaSetup ();
//prim java_assert_eq     : {a} String -> a -> JavaSetup ();
prim java_ensure_eq     : {a} String -> a -> JavaSetup ();
prim java_modify        : String -> JavaSetup ();
prim java_return        : {a} a -> JavaSetup ();
prim java_verify_tactic : {a} ProofScript a -> JavaSetup ();
prim java_pure          : JavaSetup ();

prim java_load_class    : String -> TopLevel JavaClass;
prim java_browse_class  : JavaClass -> TopLevel ();
prim java_class_info    : JavaClass -> TopLevel ();
prim java_extract       : {a} JavaClass -> String -> JavaSetup () -> TopLevel a;
prim java_verify        : {n} JavaClass -> String -> [n]JavaMethodSpec
                       -> JavaSetup ()
                       -> TopLevel JavaMethodSpec;

prim llvm_int           : Int -> LLVMType;
prim llvm_float         : LLVMType;
prim llvm_double        : LLVMType;
prim llvm_array         : Int -> LLVMType -> LLVMType;

prim llvm_value         : {a} String -> a;
prim llvm_var           : {a} String -> LLVMType -> LLVMSetup a;
prim llvm_ptr           : {a} String -> LLVMType -> LLVMSetup a;
//prim llvm_may_alias     : {n} [n]String -> LLVMSetup ();
prim llvm_assert        : Bit -> LLVMSetup ();
//prim llvm_assert_eq     : {a} String -> a -> LLVMSetup ();
prim llvm_ensure_eq     : {a} String -> a -> LLVMSetup ();
prim llvm_modify        : String -> LLVMSetup ();
prim llvm_return        : {a} a -> LLVMSetup ();
prim llvm_verify_tactic : {a} ProofScript a -> LLVMSetup ();
prim llvm_pure          : LLVMSetup ();

prim llvm_load_module   : String -> TopLevel LLVMModule;
prim llvm_browse_module : LLVMModule -> TopLevel ();
prim llvm_module_info   : LLVMModule -> TopLevel ();
prim llvm_extract       : LLVMModule -> String -> LLVMSetup () -> TopLevel Term;
prim llvm_verify        : {n} LLVMModule -> String -> [n]LLVMMethodSpec
                       -> LLVMSetup ()
                       -> TopLevel LLVMMethodSpec;

prim term_size          : Term -> Int;
prim term_tree_size     : Term -> Int;

prim caseSatResult   : {b} SatResult -> b -> (Term -> b) -> b;
prim caseProofResult : {b} ProofResult -> b -> (Term -> b) -> b;
