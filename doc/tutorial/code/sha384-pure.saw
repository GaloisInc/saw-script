main = do {

  /* Extract some simple Cryptol functions. */
  cryptol_Ch <- cryptol_extract "SHA384.cry" "Ch" sbv;

  cryptol_Maj <- cryptol_extract "SHA384.cry" "Maj" sbv;

  cryptol_UpperSigma_0 <- cryptol_extract "SHA384.cry" "UpperSigma_0" sbv;

  cryptol_UpperSigma_1 <- cryptol_extract "SHA384.cry" "UpperSigma_1" sbv;

  cryptol_LowerSigma_0 <- cryptol_extract "SHA384.cry" "LowerSigma_0" sbv;

  cryptol_LowerSigma_1 <- cryptol_extract "SHA384.cry" "LowerSigma_1" sbv;

  /* Extract some simple LLVM functions. */
  llvm_Ch <- llvm_extract "sha384.bc" "Ch" llvm_pure;

  llvm_Maj <- llvm_extract "sha384.bc" "Maj" llvm_pure;

  llvm_Sum0 <- llvm_extract "sha384.bc" "Sum0" llvm_pure;

  llvm_Sum1 <- llvm_extract "sha384.bc" "Sum1" llvm_pure;

  llvm_ROTR <- llvm_extract "sha384.bc" "ROTR" llvm_pure;

  /* Extract some simple Java functions. */
  let bc = "org.bouncycastle.crypto.digests.SHA384Digest";

  java_Ch <- java_extract bc "Ch" java_pure;

  java_Maj <- java_extract bc "Maj" java_pure;

  java_Sum0 <- java_extract bc "Sum0" java_pure;

  java_Sum1 <- java_extract bc "Sum1" java_pure;

  java_Sigma0 <- java_extract bc "Sigma0" java_pure;

  java_Sigma1 <- java_extract bc "Sigma1" java_pure;

  /* Prove equalit of all three Ch implementations. */
  ch_res_llvm <- prove_equal abc cryptol_Ch llvm_Ch;
  ch_res_java <- prove_equal abc cryptol_Ch java_Ch;

  /* Prove equalit of all three Maj implementations. */
  maj_res_llvm <- prove_equal smtlib cryptol_Maj llvm_Maj;
  maj_res_java <- prove_equal smtlib cryptol_Maj java_Maj;
};
