-------------------------------------------------------------------------------
-- Cryptol primitives for SAWCore

module CryptolM where

-- import Prelude;
-- import Cryptol;
import SpecM;

-- Alternate versions of gen and at to get around the behavior of the default prims
genCryM : (n : Nat) -> (a : sort 0) -> (Nat -> a) -> Vec n a;
genCryM = gen;
atCryM : (n : Nat) -> (a : isort 0) -> Vec n a -> Nat -> a;
atCryM = at;

-- Alternate versions of Prelude functions, changed to use genCryM and atCryM

joinCryM : (m n : Nat) -> (a : isort 0) ->
           Vec m (Vec n a) -> Vec (mulNat m n) a;
joinCryM m n a v =
  genCryM (mulNat m n) a (\ (i : Nat) ->
    atCryM n a (at m (Vec n a) v (divNat i n)) (modNat i n));

zipCryM : (a b : isort 0) -> (m n : Nat) -> Vec m a -> Vec n b -> Vec (minNat m n) (a * b);
zipCryM a b m n xs ys =
  genCryM (minNat m n) (a * b) (\ (i:Nat) -> (atCryM m a xs i, atCryM n b ys i));

splitCryM : (m n : Nat) -> (a : isort 0) -> Vec (mulNat m n) a -> Vec m (Vec n a);
splitCryM m n a v =
  genCryM m (Vec n a) (\ (i : Nat) ->
    genCryM n a (\ (j : Nat) ->
      atCryM (mulNat m n) a v (addNat (mulNat i n) j)));

zipSameCryM : (a b : isort 0) -> (n : Nat) -> Vec n a -> Vec n b -> Vec n (a * b);
zipSameCryM a b n x y = genCryM n (a*b) (\ (i : Nat) -> (atCryM n a x i, atCryM n b y i));

reverseCryM : (n : Nat) -> (a : isort 0) -> Vec n a -> Vec n a;
reverseCryM n a xs = genCryM n a (\ (i : Nat) -> atCryM n a xs (subNat (subNat n 1) i));

transposeCryM : (m n : Nat) -> (a : isort 0) -> Vec m (Vec n a) -> Vec n (Vec m a);
transposeCryM m n a xss =
  genCryM n (Vec m a) (\ (j : Nat) ->
    genCryM m a (\ (i : Nat) -> atCryM n a (atCryM m (Vec n a) xss i) j));



--------------------------------------------------------------------------------
-- Monadic assertions

primitive proveEqNum : (n m:Num) -> Maybe (Eq Num n m);

-- A version of unsafeAssert specialized to the Num type
numAssertEqS : (E:EvType) -> (n m:Num) -> SpecM E (Eq Num n m);
numAssertEqS E n m =
  maybe (Eq Num n m) (SpecM E (Eq Num n m))
        (errorS E (Eq Num n m) "numAssertEqS: assertion failed")
        (retS E (Eq Num n m))
        (proveEqNum n m);

-- A proof that a Num is finite
isFinite : Num -> Prop;
isFinite = Num_rec (\ (_:Num) -> Prop) (\ (_:Nat) -> TrueProp) FalseProp;

-- Check whether a Num is finite
checkFinite : (n:Num) -> Maybe (isFinite n);
checkFinite =
  Num_rec (\ (n:Num) -> Maybe (isFinite n))
          (\ (n:Nat) -> Just (isFinite (TCNum n)) (Refl Bool True))
          (Nothing (isFinite TCInf));

-- Assert that a Num is finite, or fail
assertFiniteS : (E:EvType) -> (n:Num) -> SpecM E (isFinite n);
assertFiniteS E n =
  maybe (isFinite n) (SpecM E (isFinite n))
        (errorS E (isFinite n) "assertFiniteM: Num not finite")
        (retS E (isFinite n))
        (checkFinite n);

-- Recurse over a Num known to be finite
Num_rec_fin : (p: Num -> sort 1) -> ((n:Nat) -> p (TCNum n)) ->
              (n:Num) -> isFinite n -> p n;
Num_rec_fin p f =
  Num_rec (\ (n:Num) -> isFinite n -> p n)
          (\ (n:Nat) (_:TrueProp) -> f n)
          (efq1 (p TCInf));


--------------------------------------------------------------------------------
-- Monadic Sequences

{-
bvVecMapInvarBindM : (E:EvType) -> (stack:FunStack) ->
                     (a b c : isort 0) -> (n : Nat) -> (len : Vec n Bool) ->
                     (a -> SpecM E stack b) -> BVVec n len a ->
                     Bool -> (BVVec n len b -> SpecM E stack c) ->
                     SpecM E stack c;
bvVecMapInvarBindM E stack a b c n len f xs invar cont =
  bindS E stack (BVVec n len b) c
    (existsS E stack (BVVec n len b)) (\ (ys0:BVVec n len b) ->
    multiArgFixS
      E stack
      (LRT_Fun (Vec n Bool) (\ (_:Vec n Bool) ->
       LRT_Fun (BVVec n len b) (\ (_:BVVec n len b) ->
       LRT_Ret c)))
      (\ (rec : Vec n Bool -> BVVec n len b ->
                SpecM E (pushFunStack
                         (singletonFrame
                          (LRT_Fun (Vec n Bool) (\ (_:Vec n Bool) ->
                           LRT_Fun (BVVec n len b) (\ (_:BVVec n len b) ->
                           LRT_Ret c)))) stack) c)
         (i:Vec n Bool) (ys:BVVec n len b) ->
         invariantHint
           (SpecM E (pushFunStack
                     (singletonFrame
                      (LRT_Fun (Vec n Bool) (\ (_:Vec n Bool) ->
                       LRT_Fun (BVVec n len b) (\ (_:BVVec n len b) ->
                       LRT_Ret c)))) stack) c)
           (and (bvule n i len) invar)
           (maybe (is_bvult n i len)
                  (SpecM E (pushFunStack
                     (singletonFrame
                      (LRT_Fun (Vec n Bool) (\ (_:Vec n Bool) ->
                       LRT_Fun (BVVec n len b) (\ (_:BVVec n len b) ->
                       LRT_Ret c)))) stack) c)
                  (cont ys)
                  (\ (pf:is_bvult n i len) ->
                     bindS E stack b c
                           (f (atBVVec n len a xs i pf))
                           (\ (y:b) -> rec (bvAdd n i (bvNat n 1))
                                           (updBVVec n len b ys i y)))
                  (bvultWithProof n i len)))
      (bvNat n 0) ys0);

bvVecMapInvarM : (E:EvType) -> (stack:FunStack) ->
                 (a b : isort 0) -> (n : Nat) -> (len : Vec n Bool) ->
                 (a -> SpecM E stack b) -> BVVec n len a ->
                 Bool -> SpecM E stack (BVVec n len b);
bvVecMapInvarM E stack a b n len f xs invar =
  bvVecMapInvarBindM E stack a b (BVVec n len b) n len f xs invar
                                                 (retS E stack (BVVec n len b));

bvVecMapM : (E:EvType) -> (stack:FunStack) ->
            (a b : isort 0) -> (n : Nat) -> (len : Vec n Bool) ->
            (a -> SpecM E stack b) -> BVVec n len a ->
            SpecM E stack (BVVec n len b);
bvVecMapM E stack a b n len f xs = bvVecMapInvarM E stack a b n len f xs True;
-}

primitive
vecMapInvarBindM : (E:EvType) -> (a : sort 0) -> (b : qsort 0) ->
                   (c : sort 0) -> (n : Nat) -> (Nat -> a -> SpecM E b) ->
                   Vec n a -> Bool -> (Vec n b -> SpecM E c) ->
                   SpecM E c;

-- FIXME: get the defined one to work!
{-
vecMapInvarBindM : (E:EvType) -> (a : sort 0) -> (b : qsort 0) ->
                   (c : sort 0) -> (n : Nat) -> (Nat -> a -> SpecM E b) ->
                   Vec n a -> Bool -> (Vec n b -> SpecM E c) ->
                   SpecM E c;
vecMapInvarBindM E a b c n f xs invar cont =
  bindS E (Vec n b) c
    (existsS E (Vec n b)) (\ (ys0:Vec n b) ->
    multiArgFixS E
      (LRT_Fun Nat (\ (_:Nat) -> LRT_Fun (Vec n b) (\ (_:Vec n b) -> LRT_Ret c)))
      (\ (rec : Nat -> Vec n b -> SpecM E (pushFunStack (singletonFrame (LRT_Fun Nat (\ (_:Nat) -> LRT_Fun (Vec n b) (\ (_:Vec n b) -> LRT_Ret c))))) c)
         (i:Nat) (ys:Vec n b) ->
         invariantHint (SpecM E (pushFunStack (singletonFrame (LRT_Fun Nat (\ (_:Nat) -> LRT_Fun (Vec n b) (\ (_:Vec n b) -> LRT_Ret c))))) c) (and (ltNat i (Succ n)) invar)
           (maybe (IsLtNat i n) (SpecM E (pushFunStack (singletonFrame (LRT_Fun Nat (\ (_:Nat) -> LRT_Fun (Vec n b) (\ (_:Vec n b) -> LRT_Ret c))))) c)
                  (pushStackS E (singletonFrame (LRT_Fun Nat (\ (_:Nat) -> LRT_Fun (Vec n b) (\ (_:Vec n b) -> LRT_Ret c)))) c
                              (cont ys))
                  (\ (pf:IsLtNat i n) ->
                     bindS E (pushFunStack (singletonFrame (LRT_Fun Nat (\ (_:Nat) -> LRT_Fun (Vec n b) (\ (_:Vec n b) -> LRT_Ret c))))) b c
                           (pushStackS E (singletonFrame (LRT_Fun Nat (\ (_:Nat) -> LRT_Fun (Vec n b) (\ (_:Vec n b) -> LRT_Ret c)))) b
                                       (f i (atWithProof n a xs i pf)))
                           (\ (y:b) -> rec (Succ i)
                                           (updWithProof n b ys i y pf)))
                  (proveLtNat i n)))
      0 ys0);
-}

vecMapInvarM : (E:EvType) -> (a : sort 0) -> (b : qsort 0) ->
               (n : Nat) -> (Nat -> a -> SpecM E b) ->
               Vec n a -> Bool -> SpecM E (Vec n b);
vecMapInvarM E a b n f xs invar =
  vecMapInvarBindM E a b (Vec n b) n f xs invar (retS E (Vec n b));

vecMapBindM : (E:EvType) -> (a : sort 0) -> (b : qsort 0) -> (c : sort 0) ->
              (n : Nat) -> (Nat -> a -> SpecM E b) ->
              Vec n a -> (Vec n b -> SpecM E c) ->
              SpecM E c;
vecMapBindM E a b c n f xs = vecMapInvarBindM E a b c n f xs True;

vecMapM : (E:EvType) -> (a : sort 0) -> (b : qsort 0) ->
          (n : Nat) -> (Nat -> a -> SpecM E b) ->
          Vec n a -> SpecM E (Vec n b);
vecMapM E a b n f xs = vecMapInvarM E a b n f xs True;

-- Computational version of seqMap
seqMapM : (E:EvType) -> (a : sort 0) -> (b : qsort 0) -> (n : Num) ->
          (a -> SpecM E b) -> mseq E n a -> SpecM E (mseq E n b);
seqMapM E a b n_top f =
  Num_rec (\ (n:Num) -> mseq E n a -> SpecM E (mseq E n b))
          (\ (n:Nat) -> vecMapM E a b n (\(i:Nat) -> f))
          (\ (s:Stream (SpecM E a)) ->
             retS E (Stream (SpecM E b))
                  (streamMap (SpecM E a) (SpecM E b)
                             (\ (m:SpecM E a) -> bindS E a b m f) s))
          n_top;

mseq_cong1 : (E:EvType) -> (m : Num) -> (n : Num) -> (a : sort 0) ->
             Eq Num m n -> Eq (sort 0) (mseq E m a) (mseq E n a);
mseq_cong1 E m n a eq_mn =
  eq_cong Num m n eq_mn (sort 0) (\ (x:Num) -> mseq E x a);

-- Convert a seq to an mseq
seqToMseq : (E:EvType) -> (n:Num) -> (a:sort 0) -> seq n a -> mseq E n a;
seqToMseq E n_top a =
  Num_rec (\ (n:Num) -> seq n a -> mseq E n a)
          (\ (n:Nat) (v:Vec n a) -> v)
          (streamMap a (SpecM E a) (retS E a))
          n_top;

vecSequenceM : (E:EvType) -> (a : qsort 0) -> (n : Nat) ->
               Vec n (SpecM E a) -> SpecM E (Vec n a);
vecSequenceM E a n =
  vecMapM E (SpecM E a) a n (\(i:Nat) (x:SpecM E a) -> x);


--------------------------------------------------------------------------------
-- Auxiliary functions

bvVecAtM : (E:EvType) -> (n : Nat) -> (len : Vec n Bool) -> (a : sort 0) ->
           BVVec n len a -> Vec n Bool -> SpecM E a;
bvVecAtM E n len a xs i =
  maybe (is_bvult n i len) (SpecM E a)
        (errorS E a "bvVecAtM: invalid sequence index")
        (\ (pf:is_bvult n i len) -> retS E a (atBVVec n len a xs i pf))
        (bvultWithProof n i len);

atM : (E:EvType) -> (n : Nat) -> (a : sort 0) -> Vec n a -> Nat -> SpecM E a;
atM E n a xs i =
  maybe (IsLtNat i n) (SpecM E a)
        (errorS E a "atM: invalid sequence index")
        (\ (pf:IsLtNat i n) -> retS E a (atWithProof n a xs i pf))
        (proveLtNat i n);

bvVecUpdateM : (E:EvType) -> (n : Nat) -> (len : Vec n Bool) -> (a : sort 0) ->
               BVVec n len a -> Vec n Bool -> a ->
               SpecM E (BVVec n len a);
bvVecUpdateM E n len a xs i x =
  maybe (is_bvult n i len) (SpecM E (BVVec n len a))
        (errorS E (BVVec n len a) "bvVecUpdateM: invalid sequence index")
        (\ (_:is_bvult n i len) -> retS E (BVVec n len a)
                                        (updBVVec n len a xs i x))
        (bvultWithProof n i len);

fromBVVecUpdateM : (E:EvType) -> (n : Nat) -> (len : Vec n Bool) ->
                   (a : sort 0) -> BVVec n len a -> Vec n Bool -> a ->
                   a -> (m : Nat) -> SpecM E (Vec m a);
fromBVVecUpdateM E n len a xs i x def m =
  maybe (is_bvult n i len) (SpecM E (Vec m a))
        (errorS E (Vec m a) "bvVecUpdateM: invalid sequence index")
        (\ (_:is_bvult n i len) -> retS E (Vec m a)
                                        (genFromBVVec n len a
                                          (updBVVec n len a xs i x) def m))
        (bvultWithProof n i len);

updateM : (E:EvType) -> (n : Nat) -> (a : sort 0) -> Vec n a -> Nat -> a ->
          SpecM E (Vec n a);
updateM E n a xs i x =
  maybe (IsLtNat i n) (SpecM E (Vec n a))
        (errorS E (Vec n a) "updateM: invalid sequence index")
        (\ (pf:IsLtNat i n) -> retS E (Vec n a) (updWithProof n a xs i x pf))
        (proveLtNat i n);

eListSelM : (E:EvType) -> (a : sort 0) -> (n : Num) -> mseq E n a -> Nat ->
            SpecM E a;
eListSelM E a =
  Num_rec (\ (n:Num) -> mseq E n a -> Nat -> SpecM E a)
          (\ (n:Nat) -> atM E n a)
          (streamGet (SpecM E a));

streamJoinM : (E:EvType) -> (a : isort 0) -> (n : Nat) ->
              Stream (SpecM E (Vec (Succ n) a)) ->
              Stream (SpecM E a);
streamJoinM E a n s =
  MkStream (SpecM E a) (\ (i:Nat) ->
     fmapS E (Vec (Succ n) a) a
       (\ (xs:Vec (Succ n) a) -> at (Succ n) a xs (modNat i (Succ n)))
       (streamGet (SpecM E (Vec (Succ n) a)) s
                  (divNat i (Succ n))) );


--------------------------------------------------------------------------------
-- List comprehensions

fromM : (E:EvType) -> (a b : qisort 0) -> (m n : Num) -> mseq E m a ->
        (a -> SpecM E (mseq E n b)) ->
        SpecM E (mseq E (tcMul m n) (a * b));
fromM E a b m n =
  Num_rec
    (\ (m:Num) -> mseq E m a ->
       (a -> SpecM E (mseq E n b)) ->
       SpecM E (mseq E (tcMul m n) (a * b)))
    (\ (m:Nat) ->
       Num_rec
         (\ (n:Num) -> Vec m a ->
            (a -> SpecM E (mseq E n b)) ->
            SpecM E (mseq E (tcMul (TCNum m) n) (a * b)))
         -- Case 1: (TCNum m, TCNum n)
         (\ (n:Nat) ->
            \ (xs : Vec m a) ->
            \ (k : a -> SpecM E (Vec n b)) ->
              vecMapBindM E a (Vec n (a * b))
                (Vec (mulNat m n) (a * b)) m
                (\ (i:Nat) -> \ (x:a) -> 
                   fmapS E (Vec n b) (Vec n (a * b))
                     (map b (a * b) (\ (y : b) -> (x, y)) n) (k x))
                xs (\ (kxs:Vec m (Vec n (a * b))) ->
                      retS E (Vec (mulNat m n) (a * b))
                        (joinCryM m n (a * b) kxs)))
         -- Case 2: n = (TCNum m, TCInf)
         (natCase
            (\ (m':Nat) -> Vec m' a ->
               (a -> SpecM E (Stream (SpecM E b))) ->
               SpecM E (mseq E (if0Nat Num m' (TCNum 0) TCInf) (a * b)))
            (\ (xs : Vec 0 a) ->
             \ (k : a -> SpecM E (Stream (SpecM E b))) ->
               retS E (Vec 0 (a * b)) (EmptyVec (a * b)))
            (\ (m' : Nat) ->
             \ (xs : Vec (Succ m') a) ->
             \ (k : a -> SpecM E (Stream (SpecM E b))) ->
               (\ (x:a) ->
                  fmapS E (Stream (SpecM E b)) (Stream (SpecM E (a * b)))
                    (streamMap (SpecM E b) (SpecM E (a * b))
                       (fmapS E b (a * b) (\ (y:b) -> (x, y))))
                    (k x))
               (head m' a xs))
            m)
         n)
    (Num_rec
       (\ (n:Num) -> Stream (SpecM E a) ->
          (a -> SpecM E (mseq E n b)) ->
          SpecM E (mseq E (tcMul TCInf n) (a * b)))
       -- Case 3: (TCInf, TCNum n)
       (\ (n:Nat) ->
          natCase
            (\ (n':Nat) -> Stream (SpecM E a) ->
               (a -> SpecM E (Vec n' b)) ->
               SpecM E (mseq E (if0Nat Num n' (TCNum 0) TCInf) (a * b)))
            (\ (xs : Stream (SpecM E a)) ->
             \ (k : a -> SpecM E (Vec 0 b)) ->
               retS E (Vec 0 (a * b)) (EmptyVec (a * b)))
            (\ (n' : Nat) ->
             \ (xs : Stream (SpecM E a)) ->
             \ (k : a -> SpecM E (Vec (Succ n') b)) ->
               retS E (Stream (SpecM E (a * b)))
                 (streamJoinM E (a * b) n'
                    (streamMap (SpecM E a)
                       (SpecM E (Vec (Succ n') (a * b)))
                       (\ (m:SpecM E a) ->
                          bindS E a (Vec (Succ n') (a * b)) m
                            (\ (x:a) ->
                               fmapS E (Vec (Succ n') b) (Vec (Succ n') (a * b))
                                 (map b (a * b) (\ (y:b) -> (x, y)) (Succ n'))
                                 (k x)))
                       xs)))
            n)
       -- Case 4: (TCInf, TCInf)
       (\ (xs : Stream (SpecM E a)) ->
        \ (k : a -> SpecM E (Stream (SpecM E b))) ->
          bindS E a (Stream (SpecM E (a * b)))
            (streamGet (SpecM E a) xs 0)
            (\ (x:a) ->
               fmapS E (Stream (SpecM E b)) (Stream (SpecM E (a * b)))
                 (streamMap (SpecM E b) (SpecM E (a * b))
                    (fmapS E b (a * b) (\ (y:b) -> (x, y))))
                 (k x)))
       n)
    m;

mletM : (E:EvType) -> (a : sort 0) -> (b : isort 0) -> (n : Num) -> a ->
        (a -> SpecM E (mseq E n b)) ->
        SpecM E (mseq E n (a * b));
mletM E a b n =
  Num_rec
    (\ (n:Num) -> a ->
       (a -> SpecM E (mseq E n b)) ->
       SpecM E (mseq E n (a * b)))
    (\ (n:Nat) -> \ (x:a) -> \ (f:a -> SpecM E (Vec n b)) ->
       fmapS E (Vec n b) (Vec n (a * b))
         (map b (a * b) (\ (y : b) -> (x, y)) n)
         (f x))
    (\ (x:a) -> \ (f:a -> SpecM E (Stream (SpecM E b))) ->
       fmapS E (Stream (SpecM E b)) (Stream (SpecM E (a * b)))
         (streamMap (SpecM E b) (SpecM E (a * b))
            (fmapS E b (a * b) (\ (y:b) -> (x, y))))
         (f x))
    n;

seqZipM : (E:EvType) -> (a b : qisort 0) -> (m n : Num) ->
          mseq E m a -> mseq E n b ->
          SpecM E (mseq E (tcMin m n) (a * b));
seqZipM E a b m n =
  Num_rec
    (\ (m:Num) -> mseq E m a -> mseq E n b
               -> SpecM E (mseq E (tcMin m n) (a * b)))
    (\ (m : Nat) ->
       Num_rec
         (\ (n:Num) -> Vec m a -> mseq E n b
                    -> SpecM E (mseq E (tcMin (TCNum m) n) (a * b)))
         (\ (n:Nat) ->
          \ (xs:Vec m a) -> \ (ys:Vec n b) ->
            retS E (Vec (minNat m n) (a * b)) (zipCryM a b m n xs ys))
         (\ (xs:Vec m a) -> \ (ys:Stream (SpecM E b)) ->
            vecMapM E a (a * b) m
              (\ (i : Nat) (x : a) ->
                fmapS E b (a * b) (\ (y : b) -> (x,y))
                  (streamGet (SpecM E b) ys i))
              xs)
         n)
    (Num_rec
       (\ (n:Num) -> Stream (SpecM E a) -> mseq E n b
                  -> SpecM E (mseq E (tcMin TCInf n) (a * b)))
       (\ (n:Nat) ->
        \ (xs:Stream (SpecM E a)) -> \ (ys:Vec n b) ->
          vecMapM E b (a * b) n
            (\ (i : Nat) (y : b) ->
              fmapS E a (a * b) (\ (x : a) -> (x,y))
                (streamGet (SpecM E a) xs i))
            ys)
       (\ (xs:Stream (SpecM E a)) -> \ (ys:Stream (SpecM E b)) ->
          retS E (Stream (SpecM E (a * b)))
            (streamMap2 (SpecM E a) (SpecM E b) (SpecM E (a * b))
               (fmapS2 E a b (a * b) (\ (x:a) -> \ (y:b) -> (x, y)))
               xs ys))
       n)
    m;

seqZipSameM : (E:EvType) -> (a b : isort 0) -> (n : Num) ->
              mseq E n a -> mseq E n b ->
              mseq E n (a * b);
seqZipSameM E a b n =
  Num_rec
    (\ (n : Num) -> mseq E n a -> mseq E n b -> mseq E n (a * b))
    (\ (n : Nat) -> zipSameCryM a b n)
    (streamMap2 (SpecM E a) (SpecM E b) (SpecM E (a * b))
       (fmapS2 E a b (a * b) (\ (x:a) -> \ (y:b) -> (x,y))))
    n;


--------------------------------------------------------------------------------
-- Monadic versions of the Cryptol typeclass instances

-- PEq
PEqMSeq : (E:EvType) -> (n:Num) -> isFinite n -> (a:isort 0) -> PEq a ->
          PEq (mseq E n a);
PEqMSeq E =
  Num_rec_fin (\ (n:Num) -> (a:isort 0) -> PEq a -> PEq (mseq E n a))
              (\ (n:Nat) -> PEqVec n);

PEqMSeqBool : (E:EvType) -> (n : Num) -> isFinite n -> PEq (mseq E n Bool);
PEqMSeqBool E =
  Num_rec_fin (\ (n:Num) -> PEq (mseq E n Bool)) PEqWord;

-- PCmp
PCmpMSeq : (E:EvType) -> (n:Num) -> isFinite n -> (a:isort 0) -> PCmp a ->
           PCmp (mseq E n a);
PCmpMSeq E =
  Num_rec_fin (\ (n:Num) -> (a:isort 0) -> PCmp a -> PCmp (mseq E n a))
              (\ (n:Nat) -> PCmpVec n);

PCmpMSeqBool : (E:EvType) -> (n : Num) -> isFinite n -> PCmp (mseq E n Bool);
PCmpMSeqBool E =
  Num_rec_fin (\ (n:Num) -> PCmp (mseq E n Bool)) PCmpWord;

-- PSignedCmp
PSignedCmpMSeq : (E:EvType) -> (n:Num) -> isFinite n -> (a:isort 0) ->
                 PSignedCmp a -> PSignedCmp (mseq E n a);
PSignedCmpMSeq E =
  Num_rec_fin (\ (n:Num) -> (a:isort 0) -> PSignedCmp a ->
                 PSignedCmp (mseq E n a))
              (\ (n:Nat) -> PSignedCmpVec n);

PSignedCmpMSeqBool : (E:EvType) -> (n : Num) -> isFinite n ->
                     PSignedCmp (mseq E n Bool);
PSignedCmpMSeqBool E =
  Num_rec_fin (\ (n:Num) -> PSignedCmp (mseq E n Bool)) PSignedCmpWord;


-- PZero
PZeroSpecM : (E:EvType) -> (a : sort 0) -> PZero a -> PZero (SpecM E a);
PZeroSpecM E = retS E;

PZeroMSeq : (E:EvType) -> (n : Num) -> (a : sort 0) -> PZero a ->
            PZero (mseq E n a);
PZeroMSeq E n_top a pa =
  Num_rec (\ (n:Num) -> PZero (mseq E n a))
          (\ (n:Nat) -> seqConst (TCNum n) a pa)
          (seqConst TCInf (SpecM E a) (retS E a pa))
          n_top;

-- PLogic
PLogicSpecM : (E:EvType) -> (a : sort 0) -> PLogic a -> PLogic (SpecM E a);
PLogicSpecM E a pa =
  { logicZero = retS E a (pa.logicZero)
  , and  = fmapS2 E a a a (pa.and)
  , or   = fmapS2 E a a a (pa.or)
  , xor  = fmapS2 E a a a (pa.xor)
  , not  = fmapS E a a (pa.not)
  };

PLogicMSeq : (E:EvType) -> (n : Num) -> (a : isort 0) -> PLogic a ->
             PLogic (mseq E n a);
PLogicMSeq E n_top a pa =
  Num_rec (\ (n:Num) -> PLogic (mseq E n a))
          (\ (n:Nat) -> PLogicVec n a pa)
          (PLogicStream (SpecM E a) (PLogicSpecM E a pa))
          n_top;

PLogicMSeqBool : (E:EvType) -> (n : Num) -> isFinite n ->
                 PLogic (mseq E n Bool);
PLogicMSeqBool E =
  Num_rec_fin (\ (n:Num) -> PLogic (mseq E n Bool)) PLogicWord;

-- PRing
PRingSpecM : (E:EvType) -> (a : sort 0) -> PRing a -> PRing (SpecM E a);
PRingSpecM E a pa =
  { ringZero = retS E a (pa.ringZero)
  , add = fmapS2 E a a a (pa.add)
  , sub = fmapS2 E a a a (pa.sub)
  , mul = fmapS2 E a a a (pa.mul)
  , neg = fmapS E a a (pa.neg)
  , int = \ (i : Integer) -> retS E a (pa.int i)
  };

PRingMSeq : (E:EvType) -> (n : Num) -> (a : isort 0) -> PRing a ->
            PRing (mseq E n a);
PRingMSeq E n_top a pa =
  Num_rec (\ (n:Num) -> PRing (mseq E n a))
          (\ (n:Nat) -> PRingVec n a pa)
          (PRingStream (SpecM E a) (PRingSpecM E a pa))
          n_top;

PRingMSeqBool : (E:EvType) -> (n : Num) -> isFinite n -> PRing (mseq E n Bool);
PRingMSeqBool E =
  Num_rec_fin (\ (n:Num) -> PRing (mseq E n Bool)) PRingWord;

-- Integral
PIntegralMSeqBool : (E:EvType) -> (n : Num) -> isFinite n ->
                    PIntegral (mseq E n Bool);
PIntegralMSeqBool E =
  Num_rec_fin (\ (n:Num) -> PIntegral (mseq E n Bool)) PIntegralWord;

-- PLiteral
PLiteralSeqBoolM : (E:EvType) -> (n : Num) -> isFinite n ->
                   PLiteral (mseq E n Bool);
PLiteralSeqBoolM E =
  Num_rec_fin (\ (n:Num) -> PLiteral (mseq E n Bool)) bvNat;


--------------------------------------------------------------------------------
-- Monadic versions of the Cryptol primitives


-- Sequences

ecShiftLM : (E:EvType) -> (m : Num) -> (ix a : sort 0) -> PIntegral ix ->
            PZero a -> mseq E m a -> ix -> mseq E m a;
ecShiftLM E =
  Num_rec (\ (m:Num) -> (ix a : sort 0) -> PIntegral ix -> PZero a ->
                        mseq E m a -> ix -> mseq E m a)
          (\ (m:Nat) -> ecShiftL (TCNum m))
          (\ (ix a : sort 0) (pix:PIntegral ix) (pa:PZero a) ->
             ecShiftL TCInf ix (SpecM E a) pix (PZeroSpecM E a pa));

ecShiftRM : (E:EvType) -> (m : Num) -> (ix a : sort 0) -> PIntegral ix ->
            PZero a -> mseq E m a -> ix -> mseq E m a;
ecShiftRM E =
  Num_rec (\ (m:Num) -> (ix a : sort 0) -> PIntegral ix -> PZero a ->
                        mseq E m a -> ix -> mseq E m a)
          (\ (m:Nat) -> ecShiftR (TCNum m))
          (\ (ix a : sort 0) (pix:PIntegral ix) (pa:PZero a) ->
             ecShiftR TCInf ix (SpecM E a) pix (PZeroSpecM E a pa));

ecSShiftRM : (E:EvType) -> (n : Num) -> isFinite n -> (ix : sort 0) ->
             PIntegral ix -> mseq E n Bool -> ix -> mseq E n Bool;
ecSShiftRM E =
  Num_rec_fin
    (\ (n:Num) -> (ix : sort 0) -> PIntegral ix -> mseq E n Bool -> ix ->
                  mseq E n Bool)
    (\ (n:Nat) -> ecSShiftR (TCNum n));

ecRotLM : (E:EvType) -> (m : Num) -> isFinite m -> (ix a : sort 0) ->
          PIntegral ix -> mseq E m a -> ix -> mseq E m a;
ecRotLM E =
  Num_rec_fin
    (\ (m:Num) -> (ix a : sort 0) -> PIntegral ix -> mseq E m a -> ix ->
       mseq E m a)
    (\ (m:Nat) -> ecRotL (TCNum m));

ecRotRM : (E:EvType) -> (m : Num) -> isFinite m -> (ix a : sort 0) ->
          PIntegral ix -> mseq E m a -> ix -> mseq E m a;
ecRotRM E =
  Num_rec_fin
    (\ (m:Num) -> (ix a : sort 0) -> PIntegral ix -> mseq E m a -> ix ->
       mseq E m a)
    (\ (m:Nat) -> ecRotR (TCNum m));

ecCatM : (E:EvType) -> (m : Num) -> isFinite m -> (n : Num) -> (a : isort 0) ->
         mseq E m a -> mseq E n a -> mseq E (tcAdd m n) a;
ecCatM E =
  Num_rec_fin
    (\ (m:Num) -> (n:Num) -> (a:isort 0) -> mseq E m a -> mseq E n a ->
                  mseq E (tcAdd m n) a)
    (\ (m:Nat) ->
       Num_rec
         (\ (n:Num) -> (a:isort 0) -> Vec m a -> mseq E n a ->
            mseq E (tcAdd (TCNum m) n) a)
         -- Case for (TCNum m, TCNum n)
         (\ (n:Nat) -> \ (a:isort 0) -> append m n a)
         -- Case for (TCNum m, TCInf)
         (\ (a:isort 0) (v:Vec m a) ->
            streamAppend (SpecM E a) m
                         (map a (SpecM E a) (retS E a) m v)));

ecTakeM : (E:EvType) -> (m n : Num) -> (a : qisort 0) -> mseq E (tcAdd m n) a ->
          SpecM E (mseq E m a);
ecTakeM E =
  Num_rec
    (\ (m:Num) -> (n:Num) -> (a:qisort 0) -> mseq E (tcAdd m n) a ->
       SpecM E (mseq E m a))
    (\ (m:Nat) ->
       Num_rec
         (\ (n:Num) -> (a:qisort 0) -> mseq E (tcAdd (TCNum m) n) a ->
            SpecM E (Vec m a))
         -- The case (TCNum m, TCNum n)
         (\ (n:Nat) -> \ (a:qisort 0) -> \ (xs: Vec (addNat m n) a) ->
            retS E (Vec m a) (take a m n xs))
         -- The case (TCNum m, infinity)
         (\ (a:qisort 0) -> \ (xs: Stream (SpecM E a)) ->
            vecSequenceM E a m (streamTake (SpecM E a) m xs)))
    (Num_rec
      (\ (n:Num) -> (a:qisort 0) -> mseq E (tcAdd TCInf n) a ->
         SpecM E (Stream (SpecM E a)))
        -- The case (TCInf, TCNum n)
        (\ (n:Nat) -> \ (a:qisort 0) -> \ (xs:Stream (SpecM E a)) ->
           retS E (Stream (SpecM E a)) xs)
        -- The case (TCInf, TCInf)
        (\ (a:qisort 0) -> \ (xs:Stream (SpecM E a)) ->
           retS E (Stream (SpecM E a)) xs));

ecDropM : (E:EvType) -> (m : Num) -> isFinite m -> (n : Num) -> (a : isort 0) ->
          mseq E (tcAdd m n) a -> mseq E n a;
ecDropM E =
  Num_rec_fin
    (\ (m:Num) -> (n:Num) -> (a:isort 0) -> mseq E (tcAdd m n) a -> mseq E n a)
    (\ (m:Nat) ->
       Num_rec
         (\ (n:Num) -> (a:isort 0) -> mseq E (tcAdd (TCNum m) n) a -> mseq E n a)
         -- The case (TCNum m, TCNum n)
         (\ (n:Nat) -> \ (a:isort 0) -> drop a m n)
         -- The case (TCNum m, infinity)
         (\ (a:isort 0) -> streamDrop (SpecM E a) m));

ecJoinM : (E:EvType) -> (m n : Num) -> isFinite n -> (a : isort 0) ->
          mseq E m (mseq E n a) -> mseq E (tcMul m n) a;
ecJoinM E =
  Num_rec
    (\ (m:Num) -> (n:Num) -> isFinite n -> (a:isort 0) ->
       mseq E m (mseq E n a) -> mseq E (tcMul m n) a)
    (\ (m:Nat) ->
       Num_rec_fin
         (\ (n:Num) -> (a:isort 0) -> Vec m (mseq E n a) ->
            mseq E (tcMul (TCNum m) n) a)
         -- Case for (TCNum m, TCNum n)
         (\ (n:Nat) -> \ (a:isort 0) -> joinCryM m n a))
         -- No case for (TCNum m, TCInf), shoudn't happen
    (Num_rec_fin
       (\ (n:Num) -> (a:isort 0) -> Stream (SpecM E (mseq E n a)) ->
          mseq E (tcMul TCInf n) a)
       -- Case for (TCInf, TCNum n)
       (\ (n:Nat) -> \ (a:isort 0) ->
          natCase
            (\ (n':Nat) -> Stream (SpecM E (Vec n' a)) ->
               mseq E (if0Nat Num n' (TCNum 0) TCInf) a)
            (\ (s:Stream (SpecM E (Vec 0 a))) -> EmptyVec a)
            (\ (n':Nat) -> \ (s:Stream (SpecM E (Vec (Succ n') a))) ->
               streamJoinM E a n' s)
            n));
       -- No case for (TCInf, TCInf), shouldn't happen

ecSplitM : (E:EvType) -> (m n : Num) -> isFinite n -> (a : qisort 0) ->
           mseq E (tcMul m n) a -> mseq E m (mseq E n a);
ecSplitM E =
  Num_rec
    (\ (m:Num) -> (n:Num) -> isFinite n -> (a:qisort 0) ->
       mseq E (tcMul m n) a -> mseq E m (mseq E n a))
    (\ (m:Nat) ->
       Num_rec_fin
         (\ (n:Num) -> (a:qisort 0) -> mseq E (tcMul (TCNum m) n) a ->
            Vec m (mseq E n a))
         -- Case for (TCNum m, TCNum n)
         (\ (n:Nat) -> \ (a:qisort 0) -> splitCryM m n a))
         -- No case for (TCNum m, TCInf), shouldn't happen
    (Num_rec_fin
       (\ (n:Num) -> (a:qisort 0) -> mseq E (tcMul TCInf n) a ->
          Stream (SpecM E (mseq E n a)))
       -- Case for (TCInf, TCNum n)
       (\ (n:Nat) -> \ (a:qisort 0) ->
          natCase
            (\ (n':Nat) ->
               mseq E (if0Nat Num n' (TCNum 0) TCInf) a ->
               Stream (SpecM E (Vec n' a)))
            (\ (xs : Vec 0 a) -> streamConst (SpecM E (Vec 0 a))
                                             (retS E (Vec 0 a) xs))
            (\ (n':Nat) (xs : Stream (SpecM E a)) -> 
               streamMap (Vec (Succ n') (SpecM E a))
                         (SpecM E (Vec (Succ n') a))
                         (vecSequenceM E a (Succ n'))
                         (streamSplit (SpecM E a) (Succ n') xs))
            n));
       -- No case for (TCInf, TCInf), shouldn't happen

ecReverseM : (E:EvType) -> (n : Num) -> isFinite n -> (a : isort 0) ->
             mseq E n a -> mseq E n a;
ecReverseM E =
  Num_rec_fin (\ (n:Num) -> (a : isort 0) -> mseq E n a -> mseq E n a)
              (\ (n:Nat) -> reverseCryM n);

ecTransposeM : (E:EvType) -> (m n : Num) -> (a : qisort 0) ->
               mseq E m (mseq E n a) -> mseq E n (mseq E m a);
ecTransposeM E m n a =
  Num_rec
    (\ (m : Num) -> mseq E m (mseq E n a) ->
       mseq E n (mseq E m a))
    (\ (m : Nat) ->
      Num_rec
        (\ (n : Num) -> Vec m (mseq E n a) ->
           mseq E n (Vec m a))
        (\ (n : Nat) -> transposeCryM m n a)
        (\ (xss : Vec m (Stream (SpecM E a))) ->
          MkStream (SpecM E (Vec m a)) (\ (i : Nat) ->
            vecMapM E (Stream (SpecM E a)) a m
              (\ (j:Nat) -> \ (xs:Stream (SpecM E a)) ->
                 streamGet (SpecM E a) xs i)
              xss))
        n
    )
    ( Num_rec
        (\ (n : Num) -> Stream (SpecM E (mseq E n a)) ->
           mseq E n (Stream (SpecM E a)))
        (\ (n : Nat) -> \ (xss : Stream (SpecM E (Vec n a))) ->
          genCryM n (Stream (SpecM E a)) (\ (i : Nat) ->
            MkStream (SpecM E a) (\ (j : Nat) ->
              fmapS E (Vec n a) a
                (\ (xs:Vec n a) -> atCryM n a xs i)
                (streamGet (SpecM E (Vec n a)) xss j))))
        (\ (xss : Stream (SpecM E (Stream (SpecM E a)))) ->
          MkStream (SpecM E (Stream (SpecM E a))) (\ (i : Nat) ->
            retS E (Stream (SpecM E a))
              (MkStream (SpecM E a) (\ (j : Nat) ->
                 bindS E (Stream (SpecM E a)) a
                   (streamGet (SpecM E (Stream (SpecM E a))) xss j)
                   (\ (xs:Stream (SpecM E a)) -> streamGet (SpecM E a) xs i)))))
        n
    )
    m;

ecAtM : (E:EvType) -> (n : Num) -> (a : sort 0) -> (ix : sort 0) ->
        PIntegral ix -> mseq E n a -> ix -> SpecM E a;
ecAtM E n_top a ix pix =
  Num_rec
    (\ (n:Num) -> mseq E n a -> ix -> SpecM E a)
    (\ (n:Nat) (v:Vec n a) ->
       pix.posNegCases (SpecM E a) (atM E n a v)
                       (\ (_:Nat) ->
                          errorS E a "ecAtM: invalid sequence index"))
    (\ (s:Stream (SpecM E a)) ->
       pix.posNegCases (SpecM E a) (streamGet (SpecM E a) s)
                       (\ (_:Nat) ->
                          errorS E a "ecAtM: invalid sequence index"))
    n_top;

ecUpdateM : (E:EvType) -> (n : Num) -> (a : sort 0) -> (ix : sort 0) ->
            PIntegral ix -> mseq E n a -> ix -> a -> SpecM E (mseq E n a);
ecUpdateM E n_top a ix pix =
  Num_rec
    (\ (n:Num) -> mseq E n a -> ix -> a ->
       SpecM E (mseq E n a))
    (\ (n:Nat) (v:Vec n a) (i:ix) (x:a) ->
       pix.posNegCases (SpecM E (Vec n a))
                       (\ (i:Nat) -> updateM E n a v i x)
                       (\ (_:Nat) -> errorS E (Vec n a)
                                            "ecUpdateM: invalid sequence index") i)
    (\ (s:Stream (SpecM E a)) (i:ix) (x:a) ->
       pix.posNegCases (SpecM E (Stream (SpecM E a)))
                       (\ (i:Nat) ->
                          retS E (Stream (SpecM E a))
                               (streamUpd (SpecM E a) s i
                                          (retS E a x)))
                       (\ (_:Nat) -> errorS E (Stream (SpecM E a))
                                            "ecUpdateM: invalid sequence index") i)
    n_top;

ecAtBackM : (E:EvType) -> (n : Num) -> isFinite n -> (a : isort 0) ->
            (ix : sort 0) -> PIntegral ix ->
            mseq E n a -> ix -> SpecM E a;
ecAtBackM E n pf a ix pix xs =
  ecAtM E n a ix pix (ecReverseM E n pf a xs);

ecFromToM : (E:EvType) -> (first : Num) -> isFinite first -> (last : Num) ->
            isFinite last -> (a : sort 0) -> PLiteral a ->
            mseq E (tcAdd (TCNum 1) (tcSub last first)) a;
ecFromToM E =
  Num_rec_fin
    (\ (first:Num) -> (last:Num) -> isFinite last ->
       (a : sort 0) -> PLiteral a ->
       mseq E (tcAdd (TCNum 1) (tcSub last first)) a)
    (\ (first:Nat) ->
       Num_rec_fin
         (\ (last:Num) -> (a : sort 0) -> PLiteral a ->
            mseq E (tcAdd (TCNum 1) (tcSub last (TCNum first))) a)
         (\ (last:Nat) -> \ (a : sort 0) -> \ (pa : PLiteral a) ->
            genCryM (addNat 1 (subNat last first)) a
                    (\ (i : Nat) -> pa (addNat i first))));

ecFromToLessThanM : (E:EvType) -> (first : Num) -> isFinite first ->
                    (bound : Num) -> (a : sort 0) -> PLiteralLessThan a ->
                    mseq E (tcSub bound first) a;
ecFromToLessThanM E first pf bound a =
  Num_rec_fin
    (\ (first:Num) -> PLiteralLessThan a ->
       mseq E (tcSub bound first) a)
    (\ (first:Nat) ->
       Num_rec
         (\ (bound:Num) -> PLiteralLessThan a ->
            mseq E (tcSub bound (TCNum first)) a)
         (\ (bound:Nat) -> \ (pa : PLiteralLessThan a) ->
            genCryM (subNat bound first) a
                    (\ (i : Nat) -> pa (addNat i first)))
         (\ (pa : PLiteralLessThan a) ->
            MkStream (SpecM E a)
                     (\ (i : Nat) -> retS E a (pa (addNat i first))))
         bound)
    first pf;

ecFromThenToM :
  (E:EvType) -> (first next last : Num) -> (a : sort 0) -> (len : Num) ->
  isFinite len -> PLiteral a -> PLiteral a -> PLiteral a -> mseq E len a;
ecFromThenToM E first next _ a =
  Num_rec_fin
    (\ (len:Num) -> PLiteral a -> PLiteral a -> PLiteral a -> mseq E len a)
    (\ (len:Nat) -> \ (pa : PLiteral a) -> \ (_ : PLiteral a) -> \ (_ : PLiteral a) ->
       genCryM len a
               (\ (i : Nat) ->
                  pa (subNat (addNat (getFinNat first)
                                     (mulNat i (getFinNat next)))
                             (mulNat i (getFinNat first)))));

ecInfFromM : (E:EvType) -> (a : sort 0) -> PIntegral a -> a -> mseq E TCInf a;
ecInfFromM E a pa x =
  MkStream (SpecM E a)
           (\ (i : Nat) ->
              retS E a (pa.integralRing.add
                              x (pa.integralRing.int (natToInt i))));

ecInfFromThenM : (E:EvType) -> (a : sort 0) -> PIntegral a -> a -> a ->
                 mseq E TCInf a;
ecInfFromThenM E a pa x y =
  MkStream (SpecM E a)
           (\ (i : Nat) ->
              retS E a (pa.integralRing.add x
                   (pa.integralRing.mul (pa.integralRing.sub y x)
                                        (pa.integralRing.int (natToInt i)))));

ecErrorM : (E:EvType) -> (a : sort 0) -> (len : Num) ->
           mseq E len (Vec 8 Bool) -> SpecM E a;
ecErrorM E a len msg =
  errorS E a "encountered call to the Cryptol 'error' function";


--------------------------------------------------------------------------------
