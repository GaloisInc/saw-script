-------------------------------------------------------------------------------
-- The specification monad

module SpecM where

-- import Prelude;
import Cryptol;


--------------------------------------------------------------------------------
-- Type descriptions

-- Expression kinds --

-- The kinds for objects that can be used in type-level expressions
data ExprKind : sort 0 where {
  Kind_unit : ExprKind;
  Kind_bool : ExprKind;
  Kind_nat : ExprKind;
  Kind_num : ExprKind;
  Kind_bv : (w:Nat) -> ExprKind;
}

-- The type of an element of an ExprKind
exprKindElem : ExprKind -> sort 0;
exprKindElem EK =
  ExprKind#rec (\ (_:ExprKind) -> sort 0)
    #() Bool Nat Num (\ (w:Nat) -> Vec w Bool) EK;

-- The unary operations for type-level expressions
data TpExprUnOp : ExprKind -> ExprKind -> sort 0 where {
  UnOp_BVToNat : (w:Nat) -> TpExprUnOp (Kind_bv w) Kind_nat;
  UnOp_NatToBV : (w:Nat) -> TpExprUnOp Kind_nat (Kind_bv w);
  UnOp_NatToNum : TpExprUnOp Kind_nat Kind_num;
}

-- Evaluate a unary operation to a function on elements of its ExprKinds
evalUnOp : (EK1 EK2:ExprKind) -> TpExprUnOp EK1 EK2 -> exprKindElem EK1 ->
           exprKindElem EK2;
evalUnOp EK1 EK2 op =
  TpExprUnOp#rec (\ (EK1 EK2:ExprKind) (_:TpExprUnOp EK1 EK2) ->
                   exprKindElem EK1 -> exprKindElem EK2)
    (\ (w:Nat) -> bvToNat w)
    (\ (w:Nat) -> bvNat w)
    (\ (n:Nat) -> TCNum n)
    EK1 EK2 op;

-- The binary operations for type-level expressions
data TpExprBinOp : ExprKind -> ExprKind -> ExprKind -> sort 0 where {
  BinOp_AddNat : TpExprBinOp Kind_nat Kind_nat Kind_nat;
  BinOp_MulNat : TpExprBinOp Kind_nat Kind_nat Kind_nat;
  BinOp_AddBV : (w:Nat) -> TpExprBinOp (Kind_bv w) (Kind_bv w) (Kind_bv w);
  BinOp_MulBV : (w:Nat) -> TpExprBinOp (Kind_bv w) (Kind_bv w) (Kind_bv w);
  BinOp_AddNum : TpExprBinOp Kind_num Kind_num Kind_num;
  BinOp_MulNum : TpExprBinOp Kind_num Kind_num Kind_num;
}

-- Evaluate a binary operation to a function on elements of its ExprKinds
evalBinOp : (EK1 EK2 EK3:ExprKind) -> TpExprBinOp EK1 EK2 EK3 ->
            exprKindElem EK1 -> exprKindElem EK2 -> exprKindElem EK3;
evalBinOp EK1 EK2 EK3 op =
  TpExprBinOp#rec (\ (EK1 EK2 EK3:ExprKind) (_:TpExprBinOp EK1 EK2 EK3) ->
                    exprKindElem EK1 -> exprKindElem EK2 -> exprKindElem EK3)
    addNat mulNat bvAdd bvMul tcAdd tcMul
    EK1 EK2 EK3 op;


-- Kind and type descriptions --

-- The kinds used for type descriptions, which can either be an expression kind
-- or the kind of type descriptions themselves
data KindDesc : sort 0 where {
  Kind_Expr : ExprKind -> KindDesc;
  Kind_Tp : KindDesc;
}

-- Type-level expressions
data TpExpr : ExprKind -> sort 0 where {
  TpExpr_Const : (EK:ExprKind) -> exprKindElem EK -> TpExpr EK;
  TpExpr_Var : (EK:ExprKind) -> Nat -> TpExpr EK;
  TpExpr_UnOp : (EK1 EK2:ExprKind) -> TpExprUnOp EK1 EK2 ->
               TpExpr EK1 -> TpExpr EK2;
  TpExpr_BinOp : (EK1 EK2 EK3:ExprKind) -> TpExprBinOp EK1 EK2 EK3 ->
                TpExpr EK1 -> TpExpr EK2 -> TpExpr EK3;
}

-- The natural number N as a TpExpr
TpExprN : Nat -> TpExpr Kind_nat;
TpExprN n = TpExpr_Const Kind_nat n;

-- The natural number 0 as a TpExpr
TpExprZ : TpExpr Kind_nat;
TpExprZ = TpExpr_Const Kind_nat 0;


-- Type descriptions, which form an inductive description of types. These types
-- are higher-order in the sense that they include encodings for function
-- index types that can be used in SpecM computations to perform corecursive
-- function calls.
data TpDesc : sort 0 where {
  -- The type of a function index for a nullary monadic function, i.e., a
  -- function index with type SpecM R for type description R
  Tp_M : TpDesc -> TpDesc;

  -- The type of a function index for a dependent monadic function that takes
  -- in an element of the left-hand kind and substitutes that into the
  -- right-hand type description
  Tp_Pi : KindDesc -> TpDesc -> TpDesc;

  -- the type of a function index for a function from the left-hand type
  -- description to the right-hand one
  Tp_Arr : TpDesc -> TpDesc -> TpDesc;

  -- An element of a kind at the object level
  Tp_Kind : KindDesc -> TpDesc;

  -- Pair and sum types
  Tp_Pair : TpDesc -> TpDesc -> TpDesc;
  Tp_Sum : TpDesc -> TpDesc -> TpDesc;

  -- Dependent pair types Tp_Sigma K B, whose first element is an element e of
  -- kind K and whose second element is of substitution instance [e/x]B
  Tp_Sigma : KindDesc -> TpDesc -> TpDesc;

  -- Sequence types
  Tp_Seq : TpDesc -> TpExpr Kind_num -> TpDesc;

  -- The empty type
  Tp_Void : TpDesc;

  -- Inductive types, where Tp_Ind A is equivalent to [Tp_Ind A/x]A
  Tp_Ind : TpDesc -> TpDesc;

  -- Type variables, used for types bound by pis, sigmas, and inductive types
  Tp_Var : Nat -> TpDesc;

  -- Explicit substitution of a type
  Tp_TpSubst : TpDesc -> TpDesc -> TpDesc;

  -- Explicit substitution of a type-level expression
  Tp_ExprSubst : TpDesc -> (EK:ExprKind) -> TpExpr EK -> TpDesc;

}

-- The type description for the unit type
Tp_Unit : TpDesc;
Tp_Unit = Tp_Kind (Kind_Expr Kind_unit);

-- The type description for the natural number type
Tp_Nat : TpDesc;
Tp_Nat = Tp_Kind (Kind_Expr Kind_nat);

-- The type description for the Num type
Tp_Num : TpDesc;
Tp_Num = Tp_Kind (Kind_Expr Kind_num);

-- The type description for a bitvector type
Tp_bitvector : Nat -> TpDesc;
Tp_bitvector w = Tp_Kind (Kind_Expr (Kind_bv w));

-- The type description for a vector type
Tp_Vec : TpDesc -> TpExpr Kind_nat -> TpDesc;
Tp_Vec d n = Tp_Seq d (TpExpr_UnOp Kind_nat Kind_num UnOp_NatToNum n);

-- The type description for the type BVVec n len d
Tp_BVVec : TpDesc -> (n:Nat) -> TpExpr (Kind_bv n) -> TpDesc;
Tp_BVVec d n len =
  Tp_Vec d (TpExpr_UnOp (Kind_bv n) Kind_nat (UnOp_BVToNat n) len);

-- An expression (TpDesc or TpExpr) of a given kind
kindExpr : KindDesc -> sort 0;
kindExpr K =
  KindDesc#rec (\ (_:KindDesc) -> sort 0)
    (\ (EK:ExprKind) -> TpExpr EK)
    TpDesc
    K;

-- An expression (TpDesc or TpExpr) of a given kind for a variable
varKindExpr : (K:KindDesc) -> Nat -> kindExpr K;
varKindExpr K =
  KindDesc#rec (\ (K:KindDesc) -> Nat -> kindExpr K)
    (\ (EK:ExprKind) (ix:Nat) -> TpExpr_Var EK ix)
    (\ (ix:Nat) -> Tp_Var ix)
    K;

-- Build an explicit substitution type for an arbitrary kind, using either the
-- Tp_TpSubst or Tp_ExprSubst constructor
Tp_Subst : TpDesc -> (K:KindDesc) -> kindExpr K -> TpDesc;
Tp_Subst T K =
  KindDesc#rec (\ (K:KindDesc) -> kindExpr K -> TpDesc)
    (\ (EK:ExprKind) (e:TpExpr EK) -> Tp_ExprSubst T EK e)
    (\ (U:TpDesc) -> Tp_TpSubst T U)
    K;


-- Type-level environments --

-- Decide equality for expression kinds
proveEqExprKind : (EK1 EK2 : ExprKind) -> Maybe (Eq ExprKind EK1 EK2);
proveEqExprKind EK1_top =
  ExprKind#rec
    (\ (EK1:ExprKind) -> (EK2:ExprKind) -> Maybe (Eq ExprKind EK1 EK2))
    (\ (EK2_top:ExprKind) ->
       ExprKind#rec (\ (EK2:ExprKind) -> Maybe (Eq ExprKind Kind_unit EK2))
         (Just (Eq ExprKind Kind_unit Kind_unit) (Refl ExprKind Kind_unit))
         (Nothing (Eq ExprKind Kind_unit Kind_bool))
         (Nothing (Eq ExprKind Kind_unit Kind_nat))
         (Nothing (Eq ExprKind Kind_unit Kind_num))
         (\ (w:Nat) -> Nothing (Eq ExprKind Kind_unit (Kind_bv w)))
         EK2_top)
    (\ (EK2_top:ExprKind) ->
       ExprKind#rec (\ (EK2:ExprKind) -> Maybe (Eq ExprKind Kind_bool EK2))
         (Nothing (Eq ExprKind Kind_bool Kind_unit))
         (Just (Eq ExprKind Kind_bool Kind_bool) (Refl ExprKind Kind_bool))
         (Nothing (Eq ExprKind Kind_bool Kind_nat))
         (Nothing (Eq ExprKind Kind_bool Kind_num))
         (\ (w:Nat) -> Nothing (Eq ExprKind Kind_bool (Kind_bv w)))
         EK2_top)
    (\ (EK2_top:ExprKind) ->
       ExprKind#rec (\ (EK2:ExprKind) -> Maybe (Eq ExprKind Kind_nat EK2))
         (Nothing (Eq ExprKind Kind_nat Kind_unit))
         (Nothing (Eq ExprKind Kind_nat Kind_bool))
         (Just (Eq ExprKind Kind_nat Kind_nat) (Refl ExprKind Kind_nat))
         (Nothing (Eq ExprKind Kind_nat Kind_num))
         (\ (w:Nat) -> Nothing (Eq ExprKind Kind_nat (Kind_bv w)))
         EK2_top)
    (\ (EK2_top:ExprKind) ->
       ExprKind#rec (\ (EK2:ExprKind) -> Maybe (Eq ExprKind Kind_num EK2))
         (Nothing (Eq ExprKind Kind_num Kind_unit))
         (Nothing (Eq ExprKind Kind_num Kind_bool))
         (Nothing (Eq ExprKind Kind_num Kind_nat))
         (Just (Eq ExprKind Kind_num Kind_num) (Refl ExprKind Kind_num))
         (\ (w:Nat) -> Nothing (Eq ExprKind Kind_num (Kind_bv w)))
         EK2_top)
    (\ (w1:Nat) (EK2_top:ExprKind) ->
       ExprKind#rec (\ (EK2:ExprKind) -> Maybe (Eq ExprKind (Kind_bv w1) EK2))
         (Nothing (Eq ExprKind (Kind_bv w1) Kind_unit))
         (Nothing (Eq ExprKind (Kind_bv w1) Kind_bool))
         (Nothing (Eq ExprKind (Kind_bv w1) Kind_nat))
         (Nothing (Eq ExprKind (Kind_bv w1) Kind_num))
         (\ (w2:Nat) ->
            Maybe__rec
              (Eq Nat w1 w2)
              (\ (_:Maybe (Eq Nat w1 w2)) ->
                 Maybe (Eq ExprKind (Kind_bv w1) (Kind_bv w2)))
              (Nothing (Eq ExprKind (Kind_bv w1) (Kind_bv w2)))
              (\ (e:Eq Nat w1 w2) ->
                 Just (Eq ExprKind (Kind_bv w1) (Kind_bv w2))
                      (eq_cong Nat w1 w2 e ExprKind (\ (w:Nat) -> Kind_bv w)))
              (proveEqNat w1 w2))
         EK2_top)
    EK1_top;

-- Decide equality for kind descriptions
proveEqKindDesc : (K1 K2 : KindDesc) -> Maybe (Eq KindDesc K1 K2);
proveEqKindDesc K1_top =
  KindDesc#rec
    (\ (K1:KindDesc) -> (K2:KindDesc) -> Maybe (Eq KindDesc K1 K2))
    (\ (EK1:ExprKind) (K2_top:KindDesc) ->
       KindDesc#rec
         (\ (K2:KindDesc) -> Maybe (Eq KindDesc (Kind_Expr EK1) K2))
         (\ (EK2:ExprKind) ->
            Maybe__rec
              (Eq ExprKind EK1 EK2)
              (\ (_:Maybe (Eq ExprKind EK1 EK2)) ->
                 Maybe (Eq KindDesc (Kind_Expr EK1) (Kind_Expr EK2)))
              (Nothing (Eq KindDesc (Kind_Expr EK1) (Kind_Expr EK2)))
              (\ (e:Eq ExprKind EK1 EK2) ->
                 Just (Eq KindDesc (Kind_Expr EK1) (Kind_Expr EK2))
                      (eq_cong ExprKind EK1 EK2 e KindDesc
                               (\ (EK:ExprKind) -> Kind_Expr EK)))
              (proveEqExprKind EK1 EK2))
         (Nothing (Eq KindDesc (Kind_Expr EK1) Kind_Tp))
         K2_top)
    (\ (K2_top:KindDesc) ->
       KindDesc#rec
         (\ (K2:KindDesc) -> Maybe (Eq KindDesc Kind_Tp K2))
         (\ (EK2:ExprKind) -> Nothing (Eq KindDesc Kind_Tp (Kind_Expr EK2)))
         (Just (Eq KindDesc Kind_Tp Kind_Tp) (Refl KindDesc Kind_Tp))
         K2_top)
    K1_top;

-- An element of a kind
kindElem : KindDesc -> sort 0;
kindElem K =
  KindDesc#rec (\ (_:KindDesc) -> sort 0)
    (\ (EK:ExprKind) -> exprKindElem EK)
    TpDesc
    K;

-- The default element of an expression kind
defaultEKElem : (EK:ExprKind) -> exprKindElem EK;
defaultEKElem EK =
  ExprKind#rec exprKindElem () False 0 (TCNum 0) (\ (w:Nat) -> bvNat w 0) EK;

-- The default element of a kind
defaultKindElem : (K:KindDesc) -> kindElem K;
defaultKindElem K = KindDesc#rec kindElem defaultEKElem Tp_Void K;

-- Build a kindExpr K from an element of kindElem K
constKindExpr : (K:KindDesc) -> kindElem K -> kindExpr K;
constKindExpr K =
  KindDesc#rec (\ (K:KindDesc) -> kindElem K -> kindExpr K)
    (\ (EK:ExprKind) (elem:exprKindElem EK) -> TpExpr_Const EK elem)
    (\ (T:TpDesc) -> T)
    K;

-- An element of an environment is a value, i.e., an element of some kind
TpEnvElem : sort 0;
TpEnvElem = Sigma KindDesc kindElem;

-- An environment is a substitution from variables to values
TpEnv : sort 0;
TpEnv = List TpEnvElem;

-- The empty environment
nilTpEnv : TpEnv;
nilTpEnv = Nil TpEnvElem;

-- Add a value to a type environment
envConsElem : (K:KindDesc) -> kindElem K -> TpEnv -> TpEnv;
envConsElem K elem env =
  Cons TpEnvElem (exists KindDesc kindElem K elem) env;

-- Eliminate a TpEnvElem at a particular kind, returning the default element of
-- that kind if the kind of the head does not match
elimTpEnvElem : (K:KindDesc) -> TpEnvElem -> kindElem K;
elimTpEnvElem K elem =
  Maybe__rec
    (Eq KindDesc (Sigma_proj1 KindDesc kindElem elem) K)
    (\ (_ : Maybe (Eq KindDesc (Sigma_proj1 KindDesc kindElem elem) K)) ->
       kindElem K)
    (defaultKindElem K)
    (\ (e : (Eq KindDesc (Sigma_proj1 KindDesc kindElem elem) K)) ->
       Eq__rec
         KindDesc (Sigma_proj1 KindDesc kindElem elem)
         (\ (X : KindDesc) (_ : Eq KindDesc (Sigma_proj1 KindDesc kindElem elem) X) ->
            kindElem X)
         (Sigma_proj2 KindDesc kindElem elem)
         K e)
    (proveEqKindDesc (Sigma_proj1 KindDesc kindElem elem) K);

-- Get the head value of a TpEnv at a particular kind, returning the default
-- element of that kind if the kind of the head does not match or env is empty
headTpEnv : (K:KindDesc) -> TpEnv -> kindElem K;
headTpEnv K env =
  List__rec TpEnvElem (\ (_:TpEnv) -> kindElem K)
    (defaultKindElem K)
    (\ (elem:TpEnvElem) (_:TpEnv) (_:kindElem K) -> elimTpEnvElem K elem)
    env;

-- Get the tail of an environment
tailTpEnv : TpEnv -> TpEnv;
tailTpEnv =
  List__rec TpEnvElem (\ (_:TpEnv) -> TpEnv) nilTpEnv
    (\ (_:TpEnvElem) (tl:TpEnv) (_:TpEnv) -> tl);


-- Substitution and evaluation --

-- Substitute an environment into a variable of a particular kind at lifting
-- level n, meaning that the environment is a substitution for the variables
-- starting at n. Return the new value of the variable if it was substituted for
-- (meaning it has index n + i for some index i in the environment) or the new
-- variable number if it was not.
substVar : Nat -> TpEnv -> (K:KindDesc) -> Nat -> Either (kindElem K) Nat;
substVar n_top env_top K var_top =
  Nat__rec
    (\ (_:Nat) -> Nat -> TpEnv -> Either (kindElem K) Nat)

    -- var = 0 case
    (\ (n:Nat) (env:TpEnv) ->
       Nat__rec (\ (_:Nat) -> Either (kindElem K) Nat)

         -- If the lifting level = 0, then substitute, returning the head of env
         (Left (kindElem K) Nat (headTpEnv K env))

         -- If not, return var unchanged, i.e., 0
         (\ (_:Nat) (_:Either (kindElem K) Nat) ->
            Right (kindElem K) Nat 0)

         n)

    -- var = Succ var' case
    (\ (var':Nat) (rec:Nat -> TpEnv -> Either (kindElem K) Nat)
       (n:Nat) (env:TpEnv) ->
       Nat__rec (\ (_:Nat) -> Either (kindElem K) Nat)

         -- If the lifting level = 0, recursively substitue the tail of env into
         -- var'; this intuitively decrements var' and the size of env
         (rec 0 (tailTpEnv env))

         -- If the lifting level = S n', recursively substitute with the
         -- decremented lifting level n', incrementing the result if it is still
         -- a variable index
         (\ (n':Nat) (_:Either (kindElem K) Nat) ->
            Either__rec (kindElem K) Nat
              (\ (_:Either (kindElem K) Nat) -> Either (kindElem K) Nat)

              -- Value return case: return the value unchanged
              --
              -- NOTE: even though, for kind Kind_Tp, we are substituting type
              -- descriptions that could have free variables, we are *not*
              -- lifting them, because we are assuming that type descriptions
              -- which are "values" in environments are closed. Thus,
              -- techincally, this substitution can capture free variables. This
              -- should not come up in practice, though, since all type
              -- descriptions are expected to be machine-generated.
              (\ (ret:kindElem K) -> Left (kindElem K) Nat ret)

              -- Variable return case: increment the returned variable index
              (\ (ret_ix:Nat) -> Right (kindElem K) Nat (Succ ret_ix))

              (rec n' env))
         n)
    var_top n_top env_top;

-- Evaluate a variable to a value, using the default value for free variables
evalVar : Nat -> TpEnv -> (K:KindDesc) -> Nat -> kindElem K;
evalVar n env K var =
  Either__rec (kindElem K) Nat (\ (_:Either (kindElem K) Nat) -> kindElem K)
    (\ (v:kindElem K) -> v)
    (\ (_:Nat) -> defaultKindElem K)
    (substVar n env K var);

-- Substitute an environment at lifting level n into type-level expression e
substTpExpr : Nat -> TpEnv -> (EK:ExprKind) -> TpExpr EK -> TpExpr EK;
substTpExpr n env EK_top e =
  TpExpr#rec (\ (EK:ExprKind) (_:TpExpr EK) -> TpExpr EK)
    (\ (EK:ExprKind) (v:exprKindElem EK) -> TpExpr_Const EK v)
    (\ (EK:ExprKind) (ix:Nat) ->
       Either__rec (exprKindElem EK) Nat
         (\ (_:Either (exprKindElem EK) Nat) -> TpExpr EK)
         (\ (v:exprKindElem EK) -> TpExpr_Const EK v)
         (\ (ix':Nat) -> TpExpr_Var EK ix')
         (substVar n env (Kind_Expr EK) ix))
    (\ (EK1 EK2:ExprKind) (op:TpExprUnOp EK1 EK2)
       (_:TpExpr EK1) (rec:TpExpr EK1) ->
       TpExpr_UnOp EK1 EK2 op rec)
    (\ (EK1 EK2 EK3:ExprKind) (op:TpExprBinOp EK1 EK2 EK3)
       (_:TpExpr EK1) (rec1:TpExpr EK1)
       (_:TpExpr EK2) (rec2:TpExpr EK2) ->
       TpExpr_BinOp EK1 EK2 EK3 op rec1 rec2)
    EK_top
    e;

-- Evaluate a type-level expression to a value
evalTpExpr : TpEnv -> (EK:ExprKind) -> TpExpr EK -> exprKindElem EK;
evalTpExpr env EK_top e =
  TpExpr#rec (\ (EK:ExprKind) (_:TpExpr EK) -> exprKindElem EK)
    (\ (EK:ExprKind) (v:exprKindElem EK) -> v)
    (\ (EK:ExprKind) (ix:Nat) -> evalVar 0 env (Kind_Expr EK) ix)
    (\ (EK1 EK2:ExprKind) (op:TpExprUnOp EK1 EK2)
       (_:TpExpr EK1) (rec:exprKindElem EK1) ->
       evalUnOp EK1 EK2 op rec)
    (\ (EK1 EK2 EK3:ExprKind) (op:TpExprBinOp EK1 EK2 EK3)
       (_:TpExpr EK1) (rec1:exprKindElem EK1)
       (_:TpExpr EK2) (rec2:exprKindElem EK2) ->
       evalBinOp EK1 EK2 EK3 op rec1 rec2)
    EK_top
    e;

-- Substitute an environment at lifting level n into type description T
tpSubst : Nat -> TpEnv -> TpDesc -> TpDesc;
tpSubst n_top env_top T_top =
  TpDesc#rec (\ (_:TpDesc) -> Nat -> TpEnv -> TpDesc)
    (\ (_:TpDesc) (rec:Nat -> TpEnv -> TpDesc) (n:Nat) (env:TpEnv) ->
       Tp_M (rec n env))
    (\ (K:KindDesc) (_:TpDesc) (rec:Nat -> TpEnv -> TpDesc) (n:Nat) (env:TpEnv) ->
       Tp_Pi K (rec (Succ n) env))
    (\ (_:TpDesc) (recA:Nat -> TpEnv -> TpDesc) (_:TpDesc)
       (recB:Nat -> TpEnv -> TpDesc) (n:Nat) (env:TpEnv) ->
       Tp_Arr (recA n env) (recB n env))
    (\ (K:KindDesc) (_:Nat) (_:TpEnv) ->
       Tp_Kind K)
    (\ (_:TpDesc) (recA:Nat -> TpEnv -> TpDesc) (_:TpDesc)
       (recB:Nat -> TpEnv -> TpDesc) (n:Nat) (env:TpEnv) ->
       Tp_Pair (recA n env) (recB n env))
    (\ (_:TpDesc) (recA:Nat -> TpEnv -> TpDesc) (_:TpDesc)
       (recB:Nat -> TpEnv -> TpDesc) (n:Nat) (env:TpEnv) ->
       Tp_Sum (recA n env) (recB n env))
    (\ (K:KindDesc) (_:TpDesc) (rec:Nat -> TpEnv -> TpDesc) (n:Nat) (env:TpEnv) ->
       Tp_Sigma K (rec (Succ n) env))
    (\ (_:TpDesc) (rec:Nat -> TpEnv -> TpDesc) (len:TpExpr Kind_num)
       (n:Nat) (env:TpEnv) ->
       Tp_Seq (rec n env) (substTpExpr n env Kind_num len))
    (\ (n:Nat) (env:TpEnv) -> Tp_Void)
    (\ (_:TpDesc) (rec:Nat -> TpEnv -> TpDesc) (n:Nat) (env:TpEnv) ->
       Tp_Ind (rec (Succ n) env))
    (\ (ix:Nat) (n:Nat) (env:TpEnv) ->
       Either__rec (kindElem Kind_Tp) Nat
         (\ (_:Either (kindElem Kind_Tp) Nat) -> TpDesc)
         (\ (U:TpDesc) -> U)
         (\ (ix':Nat) -> Tp_Var ix')
         (substVar n env Kind_Tp ix))
    (\ (_:TpDesc) (rec_fun:Nat -> TpEnv -> TpDesc)
       (_:TpDesc) (rec_arg:Nat -> TpEnv -> TpDesc) (n:Nat) (env:TpEnv) ->
       rec_fun n (envConsElem Kind_Tp (rec_arg n env) env))
    (\ (_:TpDesc) (rec:Nat -> TpEnv -> TpDesc)
       (EK:ExprKind) (e:TpExpr EK) (n:Nat) (env:TpEnv) ->
       rec n (envConsElem (Kind_Expr EK) (evalTpExpr env EK e) env))
  T_top n_top env_top;

-- Unfold an inductive type description Tp_Ind A by substituting the current
-- environment augmented with the mapping from deBruijn index 0 to Tp_Ind A
unfoldIndTpDesc : TpEnv -> TpDesc -> TpDesc;
unfoldIndTpDesc env T =
  tpSubst 0 (envConsElem Kind_Tp (tpSubst 0 env (Tp_Ind T)) env) T;


-- Elements of type descriptions --

-- The elements of an inductive type with type description T. This is defined in
-- the Coq model, but the only way we use them in SAW is to fold and unfold them
-- using the functions indToTpElem and tpToIndElem, below, so we leave the
-- actual definition of this type opaque in SAW.
primitive indElem : TpDesc -> sort 0;


--------------------------------------------------------------------------------
-- ITree Specification monad

-- An event type is a type of events plus a mapping from events to their return
-- types
data EvType : sort 1 where {
   Build_EvType : (E:sort 0) -> (E -> sort 0) -> EvType;
}

-- Get the type for an EvType
evTypeType : EvType -> sort 0;
evTypeType e =
  EvType#rec (\ (_:EvType) -> sort 0) (\ (E:sort 0) (_:E -> sort 0) -> E) e;

-- Get the return type for an event
evRetType : (E:EvType) -> evTypeType E -> sort 0;
evRetType e =
  EvType#rec (\ (E:EvType) -> evTypeType E -> sort 0)
             (\ (E:sort 0) (evTypeEnc:E -> sort 0) -> evTypeEnc) e;

-- The EvType with Void as the event type
VoidEv : EvType;
VoidEv = Build_EvType Void (elimVoid (sort 0));

-- The monad for specifications of computations (FIXME: document this!)
primitive SpecM : (E:EvType) -> sort 0 -> sort 0;

-- Return for SpecM
primitive retS : (E:EvType) -> (a:sort 0) -> a -> SpecM E a;

-- Bind for SpecM
primitive bindS : (E:EvType) -> (a b:sort 0) -> SpecM E a ->
                  (a -> SpecM E b) -> SpecM E b;

-- Trigger an event in type E, returning its return type
primitive triggerS : (E:EvType) -> (e:evTypeType E) -> SpecM E (evRetType E e);

-- Signal an error in SpecM
primitive errorS : (E:EvType) -> (a:sort 0) -> String -> SpecM E a;

-- The spec that universally quantifies over all return values of type a
primitive forallS : (E:EvType) -> (a:qsort 0) -> SpecM E a;

-- The spec that existentially quantifies over all return values of type a
primitive existsS : (E:EvType) -> (a:qsort 0) -> SpecM E a;

-- Assume a proposition holds
primitive assumeS : (E:EvType) -> (p:Prop) -> SpecM E #();

-- Assume a Boolean value is true
assumeBoolS : (E:EvType) -> Bool -> SpecM E #();
assumeBoolS E b = assumeS E (EqTrue b);

-- The specification which assumes that the first argument is True and then
-- runs the second argument
assumingS : (E:EvType) -> (a : sort 0) -> Bool -> (#() -> SpecM E a) ->
            SpecM E a;
assumingS E a cond m = bindS E #() a (assumeBoolS E cond) m;

-- Assert a proposition holds
primitive assertS : (E:EvType) -> (p:Prop) -> SpecM E #();

-- Assert a Boolean value is true
assertBoolS : (E:EvType) -> Bool -> SpecM E #();
assertBoolS E b = assertS E (EqTrue b);

-- The specification which asserts that the first argument is True and then
-- runs the second argument
assertingS : (E:EvType) -> (a : sort 0) -> Bool -> (#() -> SpecM E a) ->
             SpecM E a;
assertingS E a cond m = bindS E #() a (assertBoolS E cond) m;

-- The computation that nondeterministically chooses one computation or another.
-- As a specification, represents the disjunction of two specifications.
orS : (E:EvType) -> (a : sort 0) -> SpecM E a -> SpecM E a -> SpecM E a;
orS E a m1 m2 =
  bindS E Bool a (existsS E Bool) (\ (b:Bool) -> ite (SpecM E a) b m1 m2);


--------------------------------------------------------------------------------
-- Elements of type descriptions

-- The type of monadified sequences, which are vectors for finite length and
-- infinite streams of computations, represented as functions from Nat to
-- computations, for the infinite length
mseq : (E:EvType) -> Num -> sort 0 -> sort 0;
mseq E num a =
  Num_rec (\ (_:Num) -> sort 0) (\ (n:Nat) -> Vec n a) (Stream (SpecM E a)) num;


-- Specialized inductive type to indicate if a type description is to be treated
-- as a monadic function or as a data type
data FunFlag : sort 0 where {
  IsFun : FunFlag;
  IsData : FunFlag;
}

-- An if-then-else on whether a FunFlag is IsFun
ifFun : (a : sort 1) -> FunFlag -> a -> a -> a;
ifFun a fflag t f = FunFlag#rec (\ (_:FunFlag) -> a) t f fflag;

-- Elements of a type description relative to an environment. The Boolean flag
-- isf indicates that the type description should be treated like a function
-- type: for the three monadic function type descriptions, Tp_M, Tp_Pi, and
-- Tp_Arr, this flag has no effect, but for the other types (that do not
-- describe function types) the isf flag turns them into the trivial unit type.
tpElemEnv : EvType -> TpEnv -> FunFlag -> TpDesc -> sort 0;
tpElemEnv E env_top isf_top T_top =
  TpDesc#rec (\ (_:TpDesc) -> TpEnv -> FunFlag -> sort 0)
    (\ (R:TpDesc) (rec:TpEnv -> FunFlag -> sort 0) (env:TpEnv) (_:FunFlag) ->
       SpecM E (rec env IsData))
    (\ (K:KindDesc) (T:TpDesc) (rec:TpEnv -> FunFlag -> sort 0)
       (env:TpEnv) (_:FunFlag) ->
       (elem:kindElem K) -> rec (envConsElem K elem env) IsFun)
    (\ (T:TpDesc) (recT:TpEnv -> FunFlag -> sort 0)
       (U:TpDesc) (recU:TpEnv -> FunFlag -> sort 0) (env:TpEnv) (_:FunFlag) ->
       recT env IsData -> recU env IsFun)
    (\ (K:KindDesc) (_:TpEnv) (isf:FunFlag) ->
       ifFun (sort 0) isf #() (kindElem K))
    (\ (T:TpDesc) (recT:TpEnv -> FunFlag -> sort 0)
       (U:TpDesc) (recU:TpEnv -> FunFlag -> sort 0) (env:TpEnv) (isf:FunFlag) ->
       ifFun (sort 0) isf #() (recT env IsData * recU env IsData))
    (\ (T:TpDesc) (recT:TpEnv -> FunFlag -> sort 0)
       (U:TpDesc) (recU:TpEnv -> FunFlag -> sort 0) (env:TpEnv) (isf:FunFlag) ->
       ifFun (sort 0) isf #() (Either (recT env IsData) (recU env IsData)))
    (\ (K:KindDesc) (T:TpDesc) (rec:TpEnv -> FunFlag -> sort 0)
       (env:TpEnv) (isf:FunFlag) ->
       ifFun (sort 0) isf #()
         (Sigma (kindElem K) (\ (v:kindElem K) ->
                                rec (envConsElem K v env) IsData)))
    (\ (_:TpDesc) (rec:TpEnv -> FunFlag -> sort 0) (len:TpExpr Kind_num)
       (env:TpEnv) (isf:FunFlag) ->
       ifFun (sort 0) isf #() (mseq E (evalTpExpr env Kind_num len) (rec env IsData)))
    (\ (_:TpEnv) (isf:FunFlag) -> ifFun (sort 0) isf #() Void)
    (\ (T:TpDesc) (rec:TpEnv -> FunFlag -> sort 0) (env:TpEnv) (isf:FunFlag) ->
       ifFun (sort 0) isf #() (indElem (unfoldIndTpDesc env T)))
    (\ (var:Nat) (env:TpEnv) (isf:FunFlag) ->
       -- Note: we have to use indElem here, rather than tpElem, because this
       -- would not be an inductively smaller recursive call to take tpElem of
       -- the substitution instance
       indElem (tpSubst 0 env (Tp_Var var)))
    (\ (_:TpDesc) (rec:TpEnv -> FunFlag -> sort 0)
       (U:TpDesc) (_:TpEnv -> FunFlag -> sort 0) (env:TpEnv) (isf:FunFlag) ->
       ifFun (sort 0) isf #() (rec (envConsElem Kind_Tp (tpSubst 0 env U) env) IsData))
    (\ (_:TpDesc) (rec:TpEnv -> FunFlag -> sort 0) (EK:ExprKind) (e:TpExpr EK)
       (env:TpEnv) (isf:FunFlag) ->
       ifFun (sort 0) isf #()
         (rec (envConsElem (Kind_Expr EK) (evalTpExpr env EK e) env) IsData))
    T_top env_top isf_top;

-- Elements of a type description = elements relative to the empty environment
tpElem : EvType -> TpDesc -> sort 0;
tpElem E = tpElemEnv E nilTpEnv IsData;

-- Specification functions of a type description
specFun : EvType -> TpDesc -> sort 0;
specFun E = tpElemEnv E nilTpEnv IsFun;

-- Fold an element of [Tp_Ind T/x]T to an element of Tp_Ind T; note that folding
-- is monadic, a detail which is explained in the Coq model
primitive foldTpElem : (E:EvType) -> (T:TpDesc) ->
                       tpElem E (unfoldIndTpDesc nilTpEnv T) ->
                       SpecM E (tpElem E (Tp_Ind T));

-- Unfold an element of Tp_Ind T to an element of [Tp_Ind T/x]T; unfolding does
-- not need to be monadic, unlike folding
primitive unfoldTpElem : (E:EvType) -> (T:TpDesc) -> tpElem E (Tp_Ind T) ->
                         tpElem E (unfoldIndTpDesc nilTpEnv T);


-- Create a lambda as a fixed-point that can call itself. Note that the type of
-- f, specFun E T -> specFun E T, is the same as specFun E (Tp_Arr T T) when T
-- is a monadic function type.
primitive FixS : (E:EvType) -> (T:TpDesc) ->
                 (specFun E T -> specFun E T) -> specFun E T;

-- A hint to Mr Solver that a recursive function has the given loop invariant
invariantHint : (a : sort 0) -> Bool -> a -> a;
invariantHint _ _ a = a;

-- The type of a tuple of spec functions of types Ts
specFuns : EvType -> List TpDesc -> sort 0;
specFuns E Ts =
  List__rec TpDesc (\ (_:List TpDesc) -> sort 0) #()
    (\ (T:TpDesc) (_:List TpDesc) (rec:sort 0) ->
       specFun E T * rec)
    Ts;

-- Build the multi-arity function type specFun E T1 -> ... specFun E Tn -> A
arrowSpecFuns : EvType -> List TpDesc -> sort 0 -> sort 0;
arrowSpecFuns E Ts_top a =
  List__rec TpDesc (\ (_:List TpDesc) -> sort 0) a
    (\ (T:TpDesc) (_:List TpDesc) (rec:sort 0) -> specFun E T -> rec)
    Ts_top;

-- The type of a tuple of spec function bodies that take in function indexes to
-- allow them to corecursively call themselves
MultiFixBodies : EvType -> List TpDesc -> sort 0;
MultiFixBodies E Ts = arrowSpecFuns E Ts (specFuns E Ts);

-- Create a collection of corecursive functions in a SpecM computation as a
-- fixed-point where the functions can call themselves and each other
primitive MultiFixS : (E:EvType) -> (Ts:List TpDesc) ->
                      MultiFixBodies E Ts -> specFuns E Ts;

-- Perform a computation that can call a collection of corecursive functions
primitive LetRecS : (E:EvType) -> (Ts:List TpDesc) -> (a:sort 0) ->
                    MultiFixBodies E Ts -> arrowSpecFuns E Ts (SpecM E a) ->
                    SpecM E a;

--
-- Helper operations on SpecM
--

-- Apply a pure function to the result of a computation
fmapS : (E:EvType) -> (a b:sort 0) -> (a -> b) -> SpecM E a -> SpecM E b;
fmapS E a b f m = bindS E a b m (\ (x:a) -> retS E b (f x));

-- Apply a computation of a function to a computation of an argument
applyS : (E:EvType) -> (a b:sort 0) -> SpecM E (a -> b) -> SpecM E a -> SpecM E b;
applyS E a b fm m =
  bindS E (a -> b) b fm (\ (f:a -> b) ->
    bindS E a b m (\ (x:a) -> retS E b (f x)));

-- Apply a binary pure function to a computation
fmapS2 : (E:EvType) -> (a b c:sort 0) -> (a -> b -> c) ->
         SpecM E a -> SpecM E b -> SpecM E c;
fmapS2 E a b c f m1 m2 =
  applyS E b c (fmapS E a (b -> c) f m1) m2;

-- Apply a trinary pure function to a computation
fmapS3 : (E:EvType) -> (a b c d:sort 0) -> (a -> b -> c -> d) ->
         SpecM E a -> SpecM E b -> SpecM E c -> SpecM E d;
fmapS3 E a b c d f m1 m2 m3 =
  applyS E c d (fmapS2 E a b (c -> d) f m1 m2) m3;

-- Bind two values and pass them to a binary function
bindS2 : (E:EvType) -> (a b c:sort 0) -> SpecM E a ->
         SpecM E b -> (a -> b -> SpecM E c) -> SpecM E c;
bindS2 E a b c m1 m2 k =
  bindS E a c m1 (\ (x:a) -> bindS E b c m2 (\ (y:b) -> k x y));

-- Bind three values and pass them to a trinary function
bindS3 : (E:EvType) -> (a b c d:sort 0) -> SpecM E a ->
         SpecM E b -> SpecM E c ->
         (a -> b -> c -> SpecM E d) -> SpecM E d;
bindS3 E a b c d m1 m2 m3 k =
  bindS E a d m1 (\ (x:a) -> bindS2 E b c d m2 m3 (k x));

-- A version of bind that takes the function first
bindApplyS : (E:EvType) -> (a b:sort 0) -> (a -> SpecM E b) ->
             SpecM E a -> SpecM E b;
bindApplyS E a b k m = bindS E a b m k;

-- A version of bindS2 that takes the function first
bindApplyS2 : (E:EvType) -> (a b c:sort 0) -> (a -> b -> SpecM E c) ->
              SpecM E a -> SpecM E b -> SpecM E c;
bindApplyS2 E a b c k m1 m2 = bindS2 E a b c m1 m2 k;

-- A version of bindS3 that takes the function first
bindApplyS3 : (E:EvType) -> (a b c d:sort 0) -> (a -> b -> c -> SpecM E d) ->
              SpecM E a -> SpecM E b -> SpecM E c -> SpecM E d;
bindApplyS3 E a b c d k m1 m2 m3 = bindS3 E a b c d m1 m2 m3 k;

-- Compose two monadic functions
composeS : (E:EvType) -> (a b c:sort 0) ->
           (a -> SpecM E b) -> (b -> SpecM E c) -> a -> SpecM E c;
composeS E a b c k1 k2 x = bindS E b c (k1 x) k2;

-- Tuple a type onto the input and output types of a monadic function
tupleSpecMFunBoth : (E:EvType) -> (a b c:sort 0) -> (a -> SpecM E b) ->
                    (c * a -> SpecM E (c * b));
tupleSpecMFunBoth E a b c k =
  \ (x: c * a) -> bindS E b (c * b) (k x.(2))
                    (\ (y:b) -> retS E (c*b) (x.(1), y));

-- Tuple a value onto the output of a monadic function
tupleSpecMFunOut : (E:EvType) -> (a b c:sort 0) -> c ->
                   (a -> SpecM E b) -> (a -> SpecM E (c*b));
tupleSpecMFunOut E a b c x f =
  \ (y:a) -> bindS E b (c*b) (f y) (\ (z:b) -> retS E (c*b) (x,z));

-- Map a monadic function across a vector
mapS : (E:EvType) -> (a:sort 0) -> (b:isort 0) -> (a -> SpecM E b) ->
       (n:Nat) -> Vec n a -> SpecM E (Vec n b);
mapS E a b f =
  Nat__rec
    (\ (n:Nat) -> Vec n a -> SpecM E (Vec n b))
    (\ (_:Vec 0 a) -> retS E (Vec 0 b) (EmptyVec b))
    (\ (n:Nat) (rec_f:Vec n a -> SpecM E (Vec n b))
       (v:Vec (Succ n) a) ->
      fmapS2 E b (Vec n b) (Vec (Succ n) b)
        (\ (hd:b) (tl:Vec n b) -> ConsVec b hd n tl)
        (f (head n a v))
        (rec_f (tail n a v)));

-- Map a monadic function across a BVVec
mapBVVecS : (E:EvType) -> (a : sort 0) -> (b : isort 0) -> (a -> SpecM E b) ->
            (n : Nat) -> (len : Vec n Bool) -> BVVec n len a ->
            SpecM E (BVVec n len b);
mapBVVecS E a b f n len = mapS E a b f (bvToNat n len);

-- Cast a vector between lengths, testing that those lengths are equal
castVecS : (E:EvType) -> (a : sort 0) -> (n1 : Nat) -> (n2 : Nat) ->
           Vec n1 a -> SpecM E (Vec n2 a);
castVecS E a n1 n2 v =
  maybe
    (Eq Nat n1 n2) (SpecM E (Vec n2 a))
    (errorS E (Vec n2 a) "Could not cast Vec")
    (\ (pf:Eq Nat n1 n2) ->
       retS
         E (Vec n2 a)
         (coerce (Vec n1 a) (Vec n2 a)
                 (eq_cong Nat n1 n2 pf (sort 0) (\ (n:Nat) -> Vec n a))
                 v))
    (proveEqNat n1 n2);

-- Append two BVVecs and cast the resulting size, if possible
appendCastBVVecS : (E:EvType) -> (n : Nat) ->
                   (len1 len2 len3 : Vec n Bool) -> (a : sort 0) ->
                   BVVec n len1 a -> BVVec n len2 a ->
                   SpecM E (BVVec n len3 a);
appendCastBVVecS E n len1 len2 len3 a v1 v2 =
  maybe
    (Eq (Vec n Bool) (bvAdd n len1 len2) len3) (SpecM E (BVVec n len3 a))
    (errorS E (BVVec n len3 a) "Could not cast BVVec")
    (\ (pf:Eq (Vec n Bool) (bvAdd n len1 len2) len3) ->
       retS
         E (BVVec n len3 a)
         (coerce (BVVec n (bvAdd n len1 len2) a) (BVVec n len3 a)
                 (eq_cong (Vec n Bool) (bvAdd n len1 len2) len3 pf
                          (sort 0) (\ (l:Vec n Bool) -> BVVec n l a))
                 (appendBVVec n len1 len2 a v1 v2)))
    (bvEqWithProof n (bvAdd n len1 len2) len3);


--
-- Defining refinement on SpecM computations
--

-- The return relation for refinesS that states that the output values of two
-- SpecM computations are equal
eqRR : (R:sort 0) -> R -> R -> Prop;
eqRR R r1 r2 = Eq R r1 r2;

-- The proposition that one SpecM computation refines another, relative to a
-- relation on their return values
primitive refinesS : (E:EvType) -> (R1:sort 0) -> (R2:sort 0) ->
                     (RR:R1 -> R2 -> Prop) -> SpecM E R1 -> SpecM E R2 -> Prop;
