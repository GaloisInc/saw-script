name: SAWScript
on:
  push:
    branches: [master, "release-**"]
  pull_request:
  workflow_dispatch:
    inputs:
      releaseArtifacts:
        description: 'Set to 1 to upload the release bundles as workflow artifacts'
        required: true
        default: '0'

env:
  CACHE_VERSION: 1

jobs:
  outputs:
    runs-on: ubuntu-18.04
    outputs:
      changed: ${{ steps.outputs.outputs.changed-files }}
      saw-version: ${{ steps.outputs.outputs.saw-version }}
      name: ${{ steps.outputs.outputs.name }}
      release: ${{ steps.env.outputs.release }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: env
        if: |
          startsWith(github.ref, 'refs/heads/release-')
            || (github.event_name == 'pull_request' && startsWith(github.head_ref, 'actions/'))
            || (github.event_name == 'workflow_dispatch' && github.event.inputs.releaseArtifacts == '1')
        run: .github/ci.sh output release 1
      - id: outputs
        run: |
          .github/ci.sh set_files ${{ github.sha }}
          .github/ci.sh set_version
          .github/ci.sh output name saw-$(.github/ci.sh ver)

  build:
    runs-on: ${{ matrix.os }}
    needs: [outputs]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        ghc: ["8.6.5", "8.8.4", "8.10.3"]
        continue-on-error: [false]
        include:
          - os: macos-latest
            ghc: "8.6.5"
            continue-on-error: true
          - os: macos-latest
            ghc: "8.8.4"
            continue-on-error: true
          - os: windows-latest
            ghc: "8.6.5"
            continue-on-error: true
        exclude:
          - os: windows-latest
            ghc: "8.8.4"
    name: SAWScript - GHC v${{ matrix.ghc }} - ${{ matrix.os }}
    env:
      RELEASE: ${{ needs.outputs.outputs.release }}
    continue-on-error: ${{ matrix.continue-on-error }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          git submodule update --init
          git -C deps/abcBridge submodule update --init

      - uses: haskell/actions/setup@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}

      - uses: actions/cache@v2
        name: Cache cabal store
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: ${{ env.CACHE_VERSION }}-cabal-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles(format('cabal.GHC-{0}.config', matrix.ghc)) }}-${{ github.sha }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-cabal-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles(format('cabal.GHC-{0}.config', matrix.ghc)) }}-

      - shell: bash
        run: .github/ci.sh build_abc
        if: runner.os != 'Windows'

      - shell: bash
        run: .github/ci.sh build
        continue-on-error: false

      - shell: bash
        run: .github/ci.sh install_system_deps
        env:
          Z3_VERSION: "4.8.10"
          CVC4_VERSION: "4.1.8"
          YICES_VERSION: "2.6.2"

      - shell: bash
        run: .github/ci.sh setup_dist_bins


      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.5
      - shell: bash
        run: |
          saw-remote-api/scripts/run_rpc_tests.sh
          saw-remote-api/scripts/check_docs.sh
        if: runner.os != 'Windows'

      - uses: actions/setup-java@v1
        with:
          java-version: "8"
          java-package: jdk
          architecture: x64

      - shell: bash
        id: test
        continue-on-error: ${{ matrix.continue-on-error }}
        name: Integration Tests
        run: |
          .github/ci.sh test_dist

      - if: >-
          env.RELEASE && matrix.ghc == '8.6.5'
        run: |
          .github/ci.sh build_cryptol
          .github/ci.sh extract_exe "cryptol" "dist/bin" "deps/cryptol/dist-newstyle"

      - if: >-
          env.RELEASE && matrix.ghc == '8.6.5'
        uses: actions/upload-artifact@v2
        with:
          path: dist/bin
          name: ${{ runner.os }}-bins

      - name: Upload artifacts
        if: "matrix.os == 'ubuntu-18.04'"
        uses: actions/upload-artifact@v2
        with:
          name: "saw-${{ runner.os }}-${{ matrix.ghc }}"
          path: "dist/bin/saw"

  docker:
    runs-on: ubuntu-18.04
    needs: [outputs]
    if: contains(needs.outputs.outputs.changed, 'Dockerfile')
    steps:
      - uses: actions/checkout@v2
      - run: |
          git submodule update --init
          git -C deps/abcBridge submodule update --init
      - name: Publish to Registry
        uses: docker/build-push-action@v1
        with:
          repository: galoisinc/saw
          push: false

  docker-server-test:
    runs-on: ubuntu-latest
    needs: [outputs]
    strategy:
      fail-fast: false
    name: Docker SAW Remote API Test
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - run: git -C deps/abcBridge submodule update --init
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.5
      - shell: bash
        run: saw-remote-api/scripts/build_and_test_docker.sh

  s2n-tests:
    name: "Test s2n proofs"
    timeout-minutes: 60
    needs: build
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        s2n-target:
          - hmac
          - drbg
          - sike
          - bike
          - tls
          - hmac-failure
          - awslc
          - blst
        ghc: ["8.6.5", "8.8.4", "8.10.3"]
    steps:
      - uses: actions/checkout@v2
      - run: |
          mkdir -p s2nTests/bin

      - name: Download previously-built SAW
        uses: actions/download-artifact@v2
        with:
          name: "saw-Linux-${{ matrix.ghc }}"
          path: ./s2nTests/bin

      - shell: bash
        working-directory: s2nTests
        run: |
          docker-compose pull
          grep -h '^FROM' docker/*.dockerfile | sort -u | awk '{print $2}' | xargs -n1 -P8 docker pull

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - shell: bash
        name: "make s2n"
        working-directory: s2nTests
        run: docker-compose build s2n

      - shell: bash
        name: "s2n tests: ${{ matrix.s2n-target }}"
        working-directory: s2nTests
        run: |
          chmod +x bin/saw
          make ${{ matrix.s2n-target }}

  bundle:
    runs-on: ${{ matrix.os }}
    if: needs.outputs.outputs.release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest, windows-latest]
        ghc: ["8.6.5"]
    needs: [outputs, build]
    env:
      VERSION: ${{ needs.outputs.outputs.saw-version }}
      RELEASE: ${{ needs.outputs.outputs.release }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          git submodule update --init
          git -C deps/abcBridge submodule update --init

      - uses: actions/download-artifact@v2
        with:
          path: dist/bin
          name: ${{ runner.os }}-bins

      - shell: bash
        run: .github/ci.sh bundle_files

      - shell: bash
        env:
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: .github/ci.sh zip_dist

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.outputs.outputs.name }}-${{ runner.os }}-x86_64
          path: "${{ needs.outputs.outputs.name }}-${{ runner.os }}-x86_64.tar.gz*"

  # Indicates sufficient CI success for the purposes of mergify merging the pull
  # request, see .github/mergify.yml. This is done instead of enumerating each
  # instance of each job in the mergify configuration for a number of reasons:
  # - continue-on-error is respected, won't block merge
  # - changes to jobs or job instances don't require a mergify config update
  # - dependencies through `needs:` are validated, CI will fail if it's invalid
  mergify:
    runs-on: ubuntu-latest
    needs: [build, s2n-tests]
    steps:
      - run: "true"
