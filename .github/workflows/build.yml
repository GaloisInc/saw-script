name: SAWScript
on:
  push:
    branches: [master, "release-**"]
  pull_request:
  workflow_dispatch:
    inputs:
      releaseArtifacts:
        description: 'Set to 1 to upload the release bundles as workflow artifacts'
        required: true
        default: '0'

env:
  CACHE_VERSION: 1
  TEST_TARGETS: "cryptol-saw-core"

jobs:
  outputs:
    runs-on: ubuntu-18.04
    outputs:
      changed: ${{ steps.outputs.outputs.changed-files }}
      saw-version: ${{ steps.outputs.outputs.saw-version }}
      name: ${{ steps.outputs.outputs.name }}
      release: ${{ steps.env.outputs.release }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: env
        if: |
          startsWith(github.ref, 'refs/heads/release-')
            || (github.event_name == 'pull_request' && startsWith(github.head_ref, 'actions/'))
            || (github.event_name == 'workflow_dispatch' && github.event.inputs.releaseArtifacts == '1')
        run: .github/ci.sh output release 1
      - id: outputs
        run: |
          .github/ci.sh set_files ${{ github.sha }}
          .github/ci.sh set_version
          .github/ci.sh output name saw-$(.github/ci.sh ver)

  build:
    runs-on: ${{ matrix.os }}
    needs: [outputs]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        # ghc: ["8.6.5", "8.8.4", "8.10.3"]
        ghc: ["8.6.5"]
        continue-on-error: [false]
        # include:
        #   - os: macos-latest
        #     ghc: "8.6.5"
        #     continue-on-error: true
        #   - os: macos-latest
        #     ghc: "8.8.4"
        #     continue-on-error: true
        #   - os: windows-latest
        #     ghc: "8.6.5"
        #     continue-on-error: true
        # exclude:
        #   - os: windows-latest
        #     ghc: "8.8.4"
    name: SAWScript - GHC v${{ matrix.ghc }} - ${{ matrix.os }}
    env:
      RELEASE: ${{ needs.outputs.outputs.release }}
    continue-on-error: ${{ matrix.continue-on-error }}
    outputs:
      test-suites: ${{ steps.test-suites.outputs.suites }}
      test-suite-bins: ${{ steps.test-suites.outputs.bins }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          git submodule update --init
          git -C deps/abcBridge submodule update --init

      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - shell: bash
        run: pip3 install virtualenv

      - uses: haskell/actions/setup@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}

      - uses: actions/cache@v2
        name: Cache cabal store
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: ${{ env.CACHE_VERSION }}-cabal-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles(format('cabal.GHC-{0}.config', matrix.ghc)) }}-${{ github.sha }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-cabal-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles(format('cabal.GHC-{0}.config', matrix.ghc)) }}-

      - shell: bash
        run: .github/ci.sh build_abc
        if: runner.os != 'Windows'

      - shell: bash
        run: .github/ci.sh build
        continue-on-error: false

      # - uses: galoisinc/.github/actions/cabal-suites-bins
      #   id: test-suites

      - name: Cabal Suites Bins
        shell: bash
        id: test-suites
        continue-on-error: true  # debug
        run: |
          SUITES=""
          BINS_DIR=test-suite-bins
          mkdir -p $BINS_DIR
          for TARGET in $TEST_TARGETS; do
              export FILE=$(mktemp)
              cabal v2-test --test-wrapper=$PWD/.github/arg2file.sh $TARGET
              while IFS="" read -r BIN; do
                  SUITE=$(basename $BIN)
                  ln -s $BIN $BINS_DIR/$SUITE
                  SUITES="$SUITES $SUITE"
              done < $FILE
              rm $FILE
          done
          .github/ci.sh output suites "$(echo -n $SUITES | jq -Rsc 'split(" ")')"
          .github/ci.sh output bins $BINS_DIR
      - uses: mxschmitt/action-tmate@v3
      - if: "matrix.ghc == '8.6.5'"
        uses: actions/upload-artifact@v2
        with:
          path: ${{ steps.test-suites.outputs.bins }}
          name: test-suite-bins-${{ matrix.os }}

  cabal-test:
    runs-on: ${{ matrix.os }}
    needs: [build]
    name: Cabal Test Suite - ${{ matrix.suite }} - ${{ matrix.os }}
    continue-on-error: true  # debug
    strategy:
      matrix:
        suite: ${{ fromJson(needs.build.outputs.test-suites) }}
        os: [ubuntu-18.04]
    steps:
      - uses: actions/checkout@v2
      - run: |
          git submodule update --init
          git -C deps/abcBridge submodule update --init
      - uses: haskell/actions/setup@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
      - uses: actions/download-artifact@v2
        with:
          name: test-suite-bins-${{ matrix.os }}
          path: test-suite-bins
      - run: |
          chmod -R +x test-suite-bins
          test-suite-bins/${{ matrix.suite }}
        continue-on-error: true  # debug
      - uses: mxschmitt/action-tmate@v3

      # - if: "matrix.ghc == '8.6.5'"
      #   uses: actions/upload-artifact@v2
      #   with:
      #     path: |
      #       dist-newstyle
      #       cabal.project.local
      #       cabal.project.freeze
      #     name: dist-newstyle-${{ runner.os }}-${{ matrix.ghc }}

      # - if: "matrix.ghc == '8.6.5'"
      #   uses: actions/upload-artifact@v2
      #   with:
      #     path: ${{ steps.setup-haskell.outputs.cabal-store }}
      #     name: cabal-store-${{ runner.os }}-${{ matrix.ghc }}

      # - shell: bash
      #   run: .github/ci.sh install_system_deps
      #   env:
      #     Z3_VERSION: "4.8.8"
      #     CVC4_VERSION: "4.1.8"
      #     YICES_VERSION: "2.6.2"

      # - shell: bash
      #   run: .github/ci.sh setup_dist_bins

      # - shell: bash
      #   id: cabal-test
      #   continue-on-error: true
      #   run: cabal v2-test saw-remote-api
      #   env:
      #     SAW_SERVER: ${GITHUB_WORKSPACE}/dist/bin/saw-remote-api

      # - uses: actions/setup-java@v1
      #   with:
      #     java-version: "8"
      #     java-package: jdk
      #     architecture: x64

      # - shell: bash
      #   id: test
      #   continue-on-error: ${{ matrix.continue-on-error }}
      #   name: Integration Tests
      #   run: |
      #     .github/ci.sh test_dist

      # - if: >-
      #     env.RELEASE && matrix.ghc == '8.6.5'
      #   run: |
      #     .github/ci.sh build_cryptol
      #     .github/ci.sh extract_exe "cryptol" "dist/bin" "deps/cryptol/dist-newstyle"

      # - if: >-
      #     env.RELEASE && matrix.ghc == '8.6.5'
      #   uses: actions/upload-artifact@v2
      #   with:
      #     path: dist/bin
      #     name: ${{ runner.os }}-bins

      # - name: Upload artifacts
      #   if: "matrix.os == 'ubuntu-18.04'"
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: "saw-${{ runner.os }}-${{ matrix.ghc }}"
      #     path: "dist/bin/saw"

      # - shell: bash
      #   if: "steps.cabal-test.outcome == 'failure'"
      #   name: Warn if tests failed
      #   run: echo "::error ::Test suite failed for saw-remote-api. Pipeline allowed to pass until tests are reliable."

  # cryptol-saw-core-tests:
  #   runs-on: ${{ matrix.os }}
  #   needs: [build]
  #   strategy:
  #     matrix:
  #       os:
  #         - ubuntu-18.04
  #         # - macos-latest
  #         # - windows-latest
  #       ghc: [8.6.5]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: |
  #         git submodule update --init
  #         git -C deps/abcBridge submodule update --init
  #     - uses: haskell/actions/setup@v1
  #       id: setup-haskell
  #       with:
  #         ghc-version: ${{ matrix.ghc }}
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: dist-newstyle-${{ runner.os }}-${{ matrix.ghc }}
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: cabal-store-${{ runner.os }}-${{ matrix.ghc }}
  #         path: ${{ steps.setup-haskell.outputs.cabal-store }}
  #     - uses: mxschmitt/action-tmate@v3
  #     - shell: bash
  #       run: cabal v2-test cryptol-saw-core

  # docker:
  #   runs-on: ubuntu-18.04
  #   needs: [outputs]
  #   if: contains(needs.outputs.outputs.changed, 'Dockerfile')
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: |
  #         git submodule update --init
  #         git -C deps/abcBridge submodule update --init
  #     - name: Publish to Registry
  #       uses: docker/build-push-action@v1
  #       with:
  #         repository: galoisinc/saw
  #         push: false

  # s2n-tests:
  #   name: "Test s2n proofs"
  #   timeout-minutes: 60
  #   needs: build
  #   runs-on: ubuntu-18.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       s2n-target:
  #         - hmac
  #         - drbg
  #         - sike
  #         - bike
  #         - tls
  #         - hmac-failure
  #         - awslc
  #         - blst
  #       ghc: ["8.6.5", "8.8.4", "8.10.3"]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: |
  #         mkdir -p s2nTests/bin

  #     - name: Download previously-built SAW
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: "saw-Linux-${{ matrix.ghc }}"
  #         path: ./s2nTests/bin

  #     - shell: bash
  #       working-directory: s2nTests
  #       run: |
  #         docker-compose pull
  #         grep -h '^FROM' docker/*.dockerfile | sort -u | awk '{print $2}' | xargs -n1 -P8 docker pull

  #     - uses: satackey/action-docker-layer-caching@v0.0.11
  #       continue-on-error: true

  #     - shell: bash
  #       name: "make s2n"
  #       working-directory: s2nTests
  #       run: docker-compose build s2n

  #     - shell: bash
  #       name: "s2n tests: ${{ matrix.s2n-target }}"
  #       working-directory: s2nTests
  #       run: |
  #         chmod +x bin/saw
  #         make ${{ matrix.s2n-target }}

  # bundle:
  #   runs-on: ${{ matrix.os }}
  #   if: needs.outputs.outputs.release
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-18.04, macos-latest, windows-latest]
  #       ghc: ["8.6.5"]
  #   needs: [outputs, build]
  #   env:
  #     VERSION: ${{ needs.outputs.outputs.saw-version }}
  #     RELEASE: ${{ needs.outputs.outputs.release }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: |
  #         git submodule update --init
  #         git -C deps/abcBridge submodule update --init

  #     - uses: actions/download-artifact@v2
  #       with:
  #         path: dist/bin
  #         name: ${{ runner.os }}-bins

  #     - shell: bash
  #       run: .github/ci.sh bundle_files

  #     - shell: bash
  #       env:
  #         SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
  #         SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
  #       run: .github/ci.sh zip_dist

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ needs.outputs.outputs.name }}-${{ runner.os }}-x86_64
  #         path: "${{ needs.outputs.outputs.name }}-${{ runner.os }}-x86_64.tar.gz*"

  # # Indicates sufficient CI success for the purposes of mergify merging the pull
  # # request, see .github/mergify.yml. This is done instead of enumerating each
  # # instance of each job in the mergify configuration for a number of reasons:
  # # - continue-on-error is respected, won't block merge
  # # - changes to jobs or job instances don't require a mergify config update
  # # - dependencies through `needs:` are validated, CI will fail if it's invalid
  # mergify:
  #   runs-on: ubuntu-latest
  #   needs: [build, s2n-tests]
  #   steps:
  #     - run: "true"
