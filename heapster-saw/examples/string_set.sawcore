
module string_set where

import SpecM;

-- A type description for a string represented as a list of 8-bit characters
StringDesc : TpDesc;
StringDesc = Tp_Ind (Tp_Sum Tp_Unit (Tp_Pair (Tp_bitvector 8) (Tp_Var 0)));

-- The type that StringDesc describes
StringTp : sort 0;
StringTp = indElem (Tp_Sum Tp_Unit (Tp_Pair (Tp_bitvector 8) StringDesc));

-- A type description for a list of strings
StringListDesc : TpDesc;
StringListDesc = Tp_Ind (Tp_Sum Tp_Unit (Tp_Pair StringDesc (Tp_Var 0)));

-- The type that StringDesc describes
StringList : sort 0;
StringList = indElem (Tp_Sum Tp_Unit (Tp_Pair StringDesc StringListDesc));


listInsertM : (a : sort 0) -> List a -> a -> SpecM VoidEv (List a);
listInsertM a l s = retS VoidEv (List a) (Cons a s l);

listRemoveM : (a : sort 0) -> (a -> a -> Bool) -> List a -> a ->
              SpecM VoidEv (List a * a);
listRemoveM a test_eq l s =
  retS
    VoidEv
    (List a * a)
    (List__rec
      a (\ (_:List a) -> List a)
      (Nil a)
      (\ (s':a) (_:List a) (rec:List a) ->
         ite (List a) (test_eq s s') rec (Cons a s' rec))
      l,
     s);

----------------------------------------------------------------------
-- Helper defs for Heapster examples

stringList : sort 0;
stringList = List String;

stringListInsertM : List String -> String -> SpecM VoidEv (List String);
stringListInsertM l s = retS VoidEv (List String) (Cons String s l);

stringListRemoveM : List String -> String ->
                    SpecM VoidEv (stringList * String);
stringListRemoveM l s =
  retS
    VoidEv
    (stringList * String)
    (List__rec
      String (\ (_:List String) -> List String)
      (Nil String)
      (\ (s':String) (_:List String) (rec:List String) ->
         ite (List String) (equalString s s') rec (Cons String s' rec))
      l,
     s);
