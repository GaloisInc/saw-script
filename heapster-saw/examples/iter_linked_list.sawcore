
module iter_linked_list where

import Prelude;

List_def : (a:sort 0) -> sort 0;
List_def a = List a;

appendList : (a:sort 0) -> List a -> List a -> List a;
appendList a l1 l2 =
  List__rec a (\ (_:List a) -> List a) l2
            (\ (x:a) (_:List a) (rec:List a) -> Cons a x rec)
            l1;

data ListF (a b:sort 0) : sort 0 where {
  NilF : b -> ListF a b;
  ConsF : a -> ListF a b -> ListF a b;
}

-- A definition for the List datatype; currently needed as a workaround in Heapster
ListF_def : (a b:sort 0) -> sort 0;
ListF_def a b = ListF a b;

ListF__rec : (a b:sort 0) -> (P : ListF a b -> sort 0) ->
             ((x:b) -> P (NilF a b x)) ->
             ((x:a) -> (l:ListF a b) -> P l -> P (ConsF a b x l)) ->
             (l:ListF a b) -> P l;
ListF__rec a b P f1 f2 l = ListF#rec a b P f1 f2 l;

unfoldListF : (a b:sort 0) -> ListF a b -> Either b #(a, ListF a b);
unfoldListF a b l =
  ListF__rec a b (\ (_:ListF a b) -> Either b #(a, ListF a b))
  (\ (x:b) -> Left b #(a, ListF a b) x)
  (\ (x:a) (l:ListF a b) (_:Either b #(a, ListF a b)) ->
     Right b #(a, ListF a b) (x, l))
  l;

foldListF : (a b:sort 0) -> Either b #(a, ListF a b) -> ListF a b;
foldListF a b =
  either b #(a, ListF a b) (ListF a b)
         (\ (x : b) -> NilF a b x)
         (\ (tup : #(a, ListF a b)) ->
            ConsF a b tup.0 tup.1);

getListF : (a b:sort 0) -> ListF a b -> b;
getListF a b =
  ListF__rec a b (\ (_:ListF a b) -> b)
  (\ (x:b) -> x)
  (\ (_:a) (_:ListF a b) (rec:b) -> rec);

putListF : (a b c:sort 0) -> ListF a b -> c -> ListF a c;
putListF a b c l c_val =
  ListF__rec a b (\ (_:ListF a b) -> ListF a c)
  (\ (_:b) -> NilF a c c_val)
  (\ (x:a) (_:ListF a b) (rec:ListF a c) -> ConsF a c x rec)
  l;

transListF : (a b:sort 0) -> ListF a #() -> ListF a b -> ListF a b;
transListF a b l1 l2 =
  ListF__rec a #() (\ (_:ListF a #()) -> ListF a b)
  (\ (_:#()) -> l2)
  (\ (x:a) (_:ListF a #()) (rec:ListF a b) -> ConsF a b x rec)
  l1;
