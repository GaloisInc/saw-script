
module arrays where

import Prelude;

-- The LetRecType of noErrorsContains0
noErrorsContains0LRT : LetRecType;
noErrorsContains0LRT =
  LRT_Fun (Vec 64 Bool) (\ (len:Vec 64 Bool) ->
  LRT_Fun (Vec 64 Bool) (\ (_:Vec 64 Bool) ->
  LRT_Fun (BVVec 64 len (Vec 64 Bool)) (\ (_:BVVec 64 len (Vec 64 Bool)) ->
  LRT_Ret (BVVec 64 len (Vec 64 Bool) * Vec 64 Bool))));

-- The helper function for noErrorsContains0
--
-- noErrorsContains0H len i v =
--   orS (existsS x. x) (noErrorsContains0H len (i+1) v)
noErrorsContains0H : (len i:Vec 64 Bool) -> BVVec 64 len (Vec 64 Bool) ->
                     SpecM VoidEv emptyFunStack
                           (BVVec 64 len (Vec 64 Bool) * Vec 64 Bool);
noErrorsContains0H =
  multiArgFixS VoidEv emptyFunStack noErrorsContains0LRT
    (\ (f : (len i:Vec 64 Bool) -> BVVec 64 len (Vec 64 Bool) ->
            SpecM VoidEv (pushFunStack (singletonFrame noErrorsContains0LRT) emptyFunStack)
                         (BVVec 64 len (Vec 64 Bool) * Vec 64 Bool)) ->
       (\ (len:Vec 64 Bool) (i:Vec 64 Bool) (v:BVVec 64 len (Vec 64 Bool)) ->
          invariantHint
            (SpecM VoidEv (pushFunStack (singletonFrame noErrorsContains0LRT) emptyFunStack)
                          (BVVec 64 len (Vec 64 Bool) * Vec 64 Bool))
            (and (bvsle 64 0x0000000000000000 i)
                 (bvsle 64 i 0x0fffffffffffffff))
            (orS VoidEv (pushFunStack (singletonFrame noErrorsContains0LRT) emptyFunStack)
                 (BVVec 64 len (Vec 64 Bool) * Vec 64 Bool)
                 (existsS VoidEv (pushFunStack (singletonFrame noErrorsContains0LRT) emptyFunStack)
                          (BVVec 64 len (Vec 64 Bool) * Vec 64 Bool))
                 (f len (bvAdd 64 i 0x0000000000000001) v))));

-- The specification that contains0 has no errors
noErrorsContains0 : (len:Vec 64 Bool) -> BVVec 64 len (Vec 64 Bool) ->
                    SpecM VoidEv emptyFunStack
                          (BVVec 64 len (Vec 64 Bool) * Vec 64 Bool);
noErrorsContains0 len v =
  noErrorsContains0H len 0x0000000000000000 v;
