module SpecPrims where

/* Specification primitives */

// The specification that holds for some element of type a
exists : {a} a
exists = error "Cannot run exists"

// The specification that holds for all elements of type a
forall : {a} a
forall = error "Cannot run forall"

// The specification that a computation has no errors
noErrors : {a} a
noErrors = exists

// The specification which asserts that the first argument is True and then
// returns the second argument
asserting : {a} Bit -> (() -> a) -> a
asserting b x = if b then x () else error "Assertion failed"

// The specification which assumes that the first argument is True and then
// returns the second argument
assuming : {a} Bit -> (() -> a) -> a
assuming _ x = x ()

// A hint to Mr Solver that a recursive function has the given loop invariant
invariantHint : {a} Bit -> a -> a
invariantHint b x = x
