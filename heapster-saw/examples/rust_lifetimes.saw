enable_experimental;
env <- heapster_init_env_from_file "rust_lifetimes.sawcore" "rust_lifetimes.bc";

/***
 *** Types
 ***/

// Integer perms
heapster_define_perm env "int64" " " "llvmptr 64" "exists x:bv 64.eq(llvmword(x))";
heapster_define_perm env "int8" " " "llvmptr 8" "exists x:bv 8.eq(llvmword(x))";
heapster_define_perm env "int1" " " "llvmptr 1" "exists x:bv 1.eq(llvmword(x))";

// Integer shapes
heapster_define_llvmshape env "u64" 64 "" "fieldsh(int64<>)";


/***
 *** Assumed Functions
 ***/

// llvm.uadd.with.overflow.i64
heapster_assume_fun env "llvm.uadd.with.overflow.i64" "().arg0:int64<>, arg1:int64<> -o ret:struct(int64<>,int1<>)" "\\ (x y:Vec 64 Bool) -> returnM (Vec 64 Bool * Vec 1 Bool * #()) (bvAdd 64 x y, gen 1 Bool (\\ (_:Nat) -> bvCarry 64 x y), ())";

// llvm.expect.i1
heapster_assume_fun env "llvm.expect.i1" "().arg0:int1<>, arg1:int1<> -o ret:int1<>" "\\ (x y:Vec 1 Bool) -> returnM (Vec 1 Bool) x";

// core::panicking::panic
//panic_sym <- heapster_find_symbol env "5panic";
//heapster_assume_fun_rename env panic_sym "panic" "().empty -o empty" "returnM (Vec 1 Bool) x";


/***
 *** Type-Checked Functions
 ***/

// mux_mut_refs_u64
mux_mut_refs_u64_sym <- heapster_find_symbol env "16mux_mut_refs_u64";
heapster_typecheck_fun_rename env mux_mut_refs_u64_sym "mux_mut_refs_u64" "(l:lifetime,l1:lifetime,l2:lifetime).l:lowned (arg0:[l]memblock(R,0,8,u64<>), arg1:[l]memblock(R,0,8,u64<>) -o arg0:[l1]memblock(W,0,8,u64<>), arg1:[l2]memblock(W,0,8,u64<>)), arg0:[l]memblock(W,0,8,u64<>), arg1:[l]memblock(W,0,8,u64<>), arg2:int1<> -o l:lowned (ret:[l]memblock(R,0,8,u64<>) -o arg0:[l1]memblock(W,0,8,u64<>), arg1:[l2]memblock(W,0,8,u64<>)), ret:[l]memblock(W,0,8,u64<>)";

// use_mux_mut_refs
use_mux_mut_refs_sym <- heapster_find_symbol env "16use_mux_mut_refs";
heapster_typecheck_fun_rename env use_mux_mut_refs_sym "use_mux_mut_refs" "(). empty -o ret:int64<>";


/***
 *** Export to Coq
 ***/

heapster_export_coq env "rust_lifetimes_gen.v";
