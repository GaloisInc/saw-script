//------------------------------------------------------------------------------
// This file contains the SAW code that runs the Heapster type checking for
// the mbox.c file in Charybdis, and then generates Coq specifications for
// verification.
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Initialization
enable_experimental;
env <- heapster_init_env_from_file "mbox.sawcore" "mbox.bc";


//------------------------------------------------------------------------------
// Permissions abbreviations used in other places

heapster_define_perm env "int8" " " "llvmptr 8" "exists x:bv 8.eq(llvmword(x))";

heapster_define_perm env "int32" " " "llvmptr 32" "exists x:bv 32.eq(llvmword(x))";

heapster_define_perm env "int64" " " "llvmptr 64" "exists x:bv 64.eq(llvmword(x))";

heapster_define_perm env "state_t" " " "llvmptr 64" "array(W, 0, <16, *1, fieldsh(int64<>))";

heapster_define_perm env "aes_sw_ctx"
  "rw1:rwmodality, rw2:rwmodality"
  "llvmptr 64"
  "array(rw1, 0, <240, *1, fieldsh (int64<>)) * ptr((rw2, 1920) |-> int64<>)";

heapster_define_reachability_perm env "mbox"
  "rw:rwmodality, x:llvmptr 64"
  "llvmptr 64"
  "ptr((rw,0) |-> int64<>) * ptr((rw,8) |-> int64<>) * ptr((rw,16) |-> mbox<rw,x>) * \
  \ array(W, 24, <128, *1, fieldsh(8,int8<>))"
  "Mbox_def" "foldMbox" "unfoldMbox" "transMbox";

// heapster_define_perm env "mbox_nonnull"
//   "rw:rwmodality, p:perm (llvmptr 64)"
//   "llvmptr 64"
//   "ptr((rw,0) |-> int64<>) * ptr((rw,8) |-> int64<>) * \
//   \ ptr((rw,16) |-> int64<>) * ptr((rw,24) |-> mbox<rw, p>) * \
//   \ array(32, <128, *1, [(rw,0,8) |-> int8<>])";

heapster_define_perm env "byte_array"
  "rw:rwmodality, len:bv 64"
  "llvmptr 64"
  "array(W, 0, <len, *1, fieldsh(8,int8<>))";

heapster_define_perm env "boolean" " " "llvmptr 1" "exists x:bv 1.eq(llvmword(x))";


//------------------------------------------------------------------------------
// LLVM intrinsics

// memcpy i64
// heapster_assume_fun env "llvm.memcpy.p0i8.p0i8.i64"
//   "(X:perm(llvmptr 64), Y:perm(llvmptr 64)). \
//   \ arg0:(exists x:bv 1.X), arg1:(exists x:bv 1.Y), arg2:true, arg3:true -o \
//   \ arg0:(exists x:bv 1.Y), arg1:(exists x:bv 1.Y)"
//   "\\ (X:sort 0) (Y:sort 0) (_:SigBV1 X) (y:SigBV1 Y) -> \
//     \ returnM (SigBV1 Y * (SigBV1 Y * #())) (y, (y, ()))";

// heapster_assume_fun env "llvm.memcpy.p0i8.p0i8.i64"
//   "(len:bv 64). arg0:byte_array<W,len>, arg1:byte_array<W,len>, \
//               \ arg2:eq(llvmword(len)), arg3:true -o \
//               \ arg0:byte_array<W,len>, arg1:byte_array<W,len>"
//   "\\ (len:Vec 64 Bool) (x y:BVVec 64 len (Vec 8 Bool)) -> \
//     \ returnM (BVVec 64 len (Vec 8 Bool) * (BVVec 64 len (Vec 8 Bool) * #())) (y, (y, ()))";

heapster_assume_fun env "llvm.objectsize.i64.p0i8" "().empty -o empty" "returnM #() ()";

heapster_assume_fun env "__memcpy_chk"
  "(len:bv 64). arg0:byte_array<W,len>, arg1:byte_array<W,len>, arg2:eq(llvmword (len)) -o \
              \ arg0:byte_array<W,len>, arg1:byte_array<W,len>"
  "\\ (len:Vec 64 Bool) (_ src : BVVec 64 len (Vec 8 Bool)) -> \
    \ returnM (BVVec 64 len (Vec 8 Bool) * BVVec 64 len (Vec 8 Bool)) (src, src)";


//------------------------------------------------------------------------------
// Permissions for stdlib functions

heapster_assume_fun env "rand" "().empty -o ret:int32<>" "randSpec";


//------------------------------------------------------------------------------
// mbox.c


heapster_assume_fun env "mbox_all_freed"
  "(). empty -o ret:boolean<>"
  "mboxAllFreedSpec";


heapster_assume_fun env "mbox_new"
  "(). empty -o ret:mbox<W,llvmword(0)>"
  "mboxNewSpec";


heapster_assume_fun env "mbox_free"
  "(). arg0:ptr((W,0) |-> true) * ptr((W,8) |-> true) * ptr((W,16) |-> true) * \
     \      array(W, 24, <128, *1, fieldsh(8,int8<>)) -o \
     \ arg0:true, ret:int32<>"
  "mboxFreeSpec";


heapster_block_entry_hint env "mbox_free_chain" 3
  "top1:llvmptr 64"
  "frm:llvmframe 64"
  "top1:true, \
  \ arg0:ptr((W,0,32) |-> true), arg1:ptr((W,0) |-> mbox<W,llvmword(0)>), \
  \ arg2:ptr((W,0) |-> true), arg3:ptr((W,0,32) |-> true), \
  \ frm:llvmframe [arg3:4,arg2:8,arg1:8,arg0:4]";

heapster_typecheck_fun env "mbox_free_chain"
  "(). arg0:mbox<W,llvmword(0)> -o arg0:true, ret:int32<>";


heapster_block_entry_hint env "mbox_eq" 29
  "top1:llvmptr 64, top2:llvmptr 64"
  "frm:llvmframe 64, x0:llvmptr 64, x1:llvmptr 64"
  "top1:mbox<W,x0>, top2:mbox<W,x1>, \
  \ arg0:ptr((W,0,32) |-> true), arg1:ptr((W,0) |-> eq(x0)), \
  \ arg2:ptr((W,0) |-> eq(x1)), arg3:ptr((W,0) |-> int64<>), arg4:ptr((W,0) |-> int64<>), \
  \ frm:llvmframe [arg4:8, arg3:8, arg2:8, arg1:8, arg0:4], \
  \ x0:mbox<W,llvmword(0)>, x1:mbox<W,llvmword(0)>";

heapster_typecheck_fun env "mbox_eq"
  "(). arg0:mbox<W,llvmword(0)>, arg1:mbox<W,llvmword(0)> -o \
     \ arg0:mbox<W,llvmword(0)>, arg1:mbox<W,llvmword(0)>, ret:int32<>";


heapster_block_entry_hint env "mbox_from_buffer" 24
  "top1:bv 64, top2:llvmptr 64, top3:llvmptr 64"
  "frm:llvmframe 64, ghost0:llvmptr 64, ghost1:bv 64"
  "top1:true, top2:array(W, 0, <top1, *1, fieldsh(8, int8<>)), \
  \ top3:eq(llvmword(top1)), arg0:ptr((W,0) |-> true), \
  \ arg1:ptr((W,0) |-> eq(top2)), arg2:ptr((W,0) |-> eq(llvmword(top1))), \
  \ arg3:ptr((W,0) |-> mbox<W, ghost0>), arg4:ptr((W,0) |-> eq(ghost0)), \
  \ arg5:ptr((W,0) |-> eq(llvmword(ghost1))), arg6:ptr((W,0) |-> true), \
  \ frm:llvmframe [arg6:8, arg5:8, arg4:8, arg3:8, arg2:8, arg1:8, arg0:8], \
  \ ghost0:ptr((W,0) |-> int64<>) * ptr((W,8) |-> int64<>) * \
  \        ptr((W,16) |-> mbox<W, llvmword(0)>) * array(W, 24, <128, *1, fieldsh(8, int8<>)), \
  \ ghost1:true";

heapster_typecheck_fun env "mbox_from_buffer"
  "(len:bv 64). arg0:array(W, 0,<len,*1,fieldsh(8, int8<>)), arg1:eq(llvmword(len)) -o \
              \ arg0:array(W, 0,<len,*1,fieldsh(8, int8<>)), arg1:true, ret:mbox<W,llvmword(0)>";


heapster_block_entry_hint env "mbox_to_buffer" 32
  "top1:bv 64, top2:llvmptr 64, top3:llvmptr 64, top4:llvmptr 64, top5:llvmptr 64"
  "frm:llvmframe 64, ghost0:llvmptr 64"
  "top1:true, top2:array(W, 0, <top1, *1, fieldsh(8, int8<>)), \
  \ top3:eq(llvmword(top1)), top4:mbox<W,ghost0>, \
  \ top5:int64<>, arg0:ptr((W,0) |-> true), \
  \ arg1:ptr((W,0) |-> eq(top2)), arg2:ptr((W,0) |-> eq(top3)), \
  \ arg3:ptr((W,0) |-> eq(ghost0)), arg4:ptr((W,0) |-> int64<>), \
  \ arg5:ptr((W,0) |-> int64<>), arg6:ptr((W,0) |-> true), \
  \ frm:llvmframe [arg6:8, arg5:8, arg4:8, arg3:8, arg2:8, arg1:8, arg0:8], \
  \ ghost0:mbox<W,llvmword(0)>";

heapster_typecheck_fun env "mbox_to_buffer"
  "(len:bv 64). arg0:array(W, 0,<len,*1,fieldsh(8, int8<>)), \
              \ arg1:eq(llvmword(len)), arg2:mbox<W, llvmword(0)>, arg3:int64<> -o \
              \ arg0:array(W, 0,<len,*1,fieldsh(8, int8<>)), \
              \ arg1:true, arg2:mbox<W,llvmword(0)>, arg3:true, ret:int64<>";


heapster_typecheck_fun env "mbox_to_buffer_rec"
  "(len:bv 64). arg0:array(W, 0,<len,*1,fieldsh(8, int8<>)), \
              \ arg1:eq(llvmword(len)), arg2:mbox<W,llvmword(0)> -o \
              \ arg0:array(W, 0,<len,*1,fieldsh(8, int8<>)), \
              \ arg1:true, arg2:mbox<W,llvmword(0)>, ret:true";

// heapster_typecheck_fun env "mbox_to_buffer_rec"
//   "(len:bv 64). arg0:byte_array<W,len>, arg1:eq(llvmword(len)), \
//               \ arg2:mbox<W>, arg3:int64<> -o \
//               \ arg0:byte_array<W,len>, arg1:true, \
//               \ arg2:mbox<W>, arg3:true, ret:int64<>";


heapster_block_entry_hint env "mbox_len" 3
  "top1:llvmptr 64"
  "frm:llvmframe 64, ghost:llvmptr 64"
  "top1:mbox<W,ghost>, \
  \ arg0:ptr((W,0) |-> eq(ghost)), arg1:ptr((W,0) |-> int64<>), \
  \ frm:llvmframe [arg1:8, arg0:8], \
  \ ghost:mbox<W,llvmword(0)>";

heapster_typecheck_fun env "mbox_len"
  "(). arg0:mbox<W,llvmword(0)> -o arg0:mbox<W,llvmword(0)>, ret:int64<>";


heapster_typecheck_fun env "mbox_concat"
  "(). arg0:mbox<W,llvmword(0)>, arg1:mbox<W,llvmword(0)> -o \
     \ arg0:mbox<W,llvmword(0)>, arg1:true";


heapster_block_entry_hint env "mbox_concat_chains" 16
  "top1:llvmptr 64, top2:llvmptr 64"
  "frm:llvmframe 64, x0:llvmptr 64"
  "top1:mbox<W,x0>, top2:mbox<W,llvmword(0)>, \
  \ arg0:ptr((W,0) |-> eq(x0)), arg1:ptr((W,0) |-> eq(top2)), \
  \ frm:llvmframe [arg1:8, arg0:8], \
  \ x0:ptr((W,0) |-> int64<>) * ptr((W,8) |-> int64<>) * \
  \    ptr((W,16) |-> mbox<W,llvmword(0)>) * array(W, 24, <128, *1, fieldsh(8, int8<>))";

heapster_typecheck_fun env "mbox_concat_chains"
  "(). arg0:mbox<W,llvmword(0)>, arg1:mbox<W,llvmword(0)> -o \
     \ arg0:mbox<W,llvmword(0)>";


heapster_typecheck_fun env "mbox_split_at"
  "(). arg0:ptr((W,0) |-> mbox<W,llvmword(0)>), arg1:int64<> -o \
     \ arg0:ptr((W,0) |-> mbox<W,llvmword(0)>), arg1:true, ret:mbox<W,llvmword(0)>";


heapster_typecheck_fun env "mbox_copy"
  "(). arg0:mbox<W,llvmword(0)> -o \
     \ arg0:mbox<W,llvmword(0)>, ret:mbox<W,llvmword(0)>";

// heapster_typecheck_fun env "mbox_copy"
//   "(). arg0:mbox_nonnull<W,mbox<W>> -o arg0:true, ret:mbox<W>";


// heapster_block_entry_hint env "mbox_copy_chain" 51
//   "top1:llvmptr 64, top2:llvmptr 64"
//   "frm:llvmframe 64"
//   "top1:true, top2:true, \
//   \ arg0:ptr((W,0) |-> eq(llvmword(true))), \
//   \ arg1:ptr((W,0) |-> eq(top2)), \
//   \ frm:llvmframe [arg1:8,arg0:8], \
//   \ x0:mbox<W>";

// heapster_block_entry_hint env "mbox_copy_chain" 7
//   "top1:llvmptr 64, top2:llvmptr 64"
//   "frm:llvmframe 64"
//   "top1:mbox<W>, top2:mbox<W>, frm:llvmframe []";

heapster_typecheck_fun env "mbox_copy_chain"
  "(). arg0:mbox<W,llvmword(0)>, arg1:int64<> -o \
     \ arg0:mbox<W,llvmword(0)>, arg1:true, ret:mbox<W,llvmword(0)>";


heapster_typecheck_fun env "mbox_detach"
  "(). arg0:ptr((W,0) |-> mbox<W,llvmword(0)>) -o \
     \ arg0:ptr((W,0) |-> mbox<W,llvmword(0)>), ret:mbox<W,llvmword(0)>";


heapster_typecheck_fun env "mbox_detach_from_end"
  "(). arg0:ptr((W,0) |-> mbox<W,llvmword(0)>), arg1:int64<> -o \
     \ arg0:ptr((W,0) |-> mbox<W,llvmword(0)>), arg1:true, ret:mbox<W,llvmword(0)>";


heapster_typecheck_fun env "mbox_increment"
  "(). arg0:mbox<W,llvmword(0)> -o arg0:mbox<W,llvmword(0)>, ret:int32<>";


heapster_block_entry_hint env "mbox_randomize" 16
  "top1:llvmptr 64"
  "frm:llvmframe 64"
  "top1:ptr((W,0) |-> int64<>) * ptr((W,8) |-> int64<>) * \
  \     ptr((W,16) |-> mbox<W,llvmword(0)>) * array(W, 24, <128, *1, fieldsh(8, int8<>)), \
  \ arg0:ptr((W,0,32) |-> true), arg1:ptr((W,0) |-> eq(top1)), arg2:ptr((W,0) |-> int64<>), \
  \ frm:llvmframe [arg2:8, arg1:8, arg0:4]";

heapster_typecheck_fun env "mbox_randomize"
  "(). arg0:mbox<W,llvmword(0)> -o arg0:mbox<W,llvmword(0)>, ret:int32<>";


heapster_typecheck_fun env "mbox_drop"
  "(). arg0:mbox<W,llvmword(0)>, arg1:int64<> -o \
     \ arg0:mbox<W,llvmword(0)>, arg1:true";


//------------------------------------------------------------------------------
// Export to coq for verification
heapster_export_coq env "mbox_gen.v";
