enable_experimental;
env <- heapster_init_env_from_file "arrays.sawcore" "arrays.bc";

// Integer types
heapster_define_perm env "int64" " " "llvmptr 64" "exists x:bv 64.eq(llvmword(x))";
heapster_define_perm env "int8" " " "llvmptr 8" "exists x:bv 8.eq(llvmword(x))";

heapster_define_perm env "int64array" "len:bv 64" "llvmptr 64" "array(W,0,<len,*8,fieldsh(int64<>))";


heapster_typecheck_fun env "contains0_rec_"
  "(len:bv 64). arg0:eq(llvmword(len)), arg1:int64array<len>, arg2:int64<> -o \
              \ arg0:true, arg1:int64array<len>, arg2:true, ret:int64<>";

// the old way using a block entry hint
// heapster_block_entry_hint env "contains0" 9
//   "top0:bv 64, top1:llvmptr 64, top2:llvmptr 64"
//   "frm:llvmframe 64, x0:llvmptr 64, x1:llvmptr 64"
//   "top0:true, top1:array(0,<top0,*1,[(W,0) |-> int64<>]),
//   \ top2:eq(llvmword(top0)), arg0:ptr((W,0) |-> true), \
//   \ arg1:ptr((W,0) |-> eq(x1)), arg2:ptr((W,0) |-> eq(x0)), arg3:ptr((W,0) |-> int64<>), \
//   \ frm:llvmframe [arg3:8, arg2:8, arg1:8, arg0:8], x0:eq(top2), x1:eq(top1)";
// heapster_typecheck_fun env "contains0"
//   "(len:bv 64). arg0:array(0,<len,*1,[(W,0) |-> int64<>]), arg1:eq(llvmword(len)) -o \
//               \ arg0:array(0,<len,*1,[(W,0) |-> int64<>]), arg1:true, ret:int64<>";

heapster_typecheck_fun env "contains0"
  "(len:bv 64). arg0:int64array<len>, arg1:eq(llvmword(len)) -o \
              \ arg0:int64array<len>, arg1:true, ret:int64<>";

heapster_typecheck_fun env "zero_array"
  "(len:bv 64). arg0:int64array<len>, arg1:eq(llvmword(len)) -o \
              \ arg0:int64array<len>, arg1:true, ret:true";

heapster_typecheck_fun env "zero_array_from"
  "(len:bv 64, off:bv 64). arg0:int64array<len>, arg1:eq(llvmword(len)), arg2:eq(llvmword(off)) -o \
                         \ arg0:int64array<len>, arg1:true, arg2:true, ret:true";

heapster_join_point_hint env "filter_and_sum_pos" [];
heapster_typecheck_fun env "filter_and_sum_pos"
  "(len:bv 64). arg0:int64array<len>, arg1:eq(llvmword(len)) -o \
              \ arg0:int64array<len>, arg1:true, ret:int64<>";

heapster_typecheck_fun env "sum_2d"
  "(l1:bv 64,l2:bv 64). arg0:array(W,0,<l1,*8,fieldsh(array(W,0,<l2,*8,fieldsh(int64<>)))), \
                      \ arg1:eq(llvmword(l1)), arg2:eq(llvmword(l2)) -o \
                      \ arg0:array(W,0,<l1,*8,fieldsh(array(W,0,<l2,*8,fieldsh(int64<>)))), \
                      \ arg1:true, arg2:true, ret:int64<>";

heapster_typecheck_fun env "sum_inc_ptr"
  "(len:bv 64). arg0:array(W,0,<len,*1,fieldsh(8,int8<>)), arg1:eq(llvmword(len)) -o \
              \ arg0:array(W,0,<len,*1,fieldsh(8,int8<>)), arg1:true, ret:int64<>";

heapster_typecheck_fun env "sum_inc_ptr_64"
  "(len:bv 64). arg0:array(W,0,<len,*8,fieldsh(int64<>)), arg1:eq(llvmword(len)) -o \
              \ arg0:array(W,0,<len,*8,fieldsh(int64<>)), arg1:true, ret:int64<>";

// Notably, this works even without heapster widening the permissions of `i` to
//  `eq(2*x+1)` for some ghost `x` (currently, it sees `eq(1)` and `eq(3)` and
//  widens them to just `eq(x)` for some ghost `x`)
heapster_typecheck_fun env "even_odd_sums_diff"
  "(l:bv 64). arg0:array(W,0,<2*l,*8,fieldsh(int64<>)), arg1:eq(llvmword(2*l)) -o \
            \ arg0:array(W,0,<2*l,*8,fieldsh(int64<>)), arg1:true, ret:int64<>";

heapster_typecheck_fun env "alloc_sum_array_test" "(). empty -o ret:int64<>";

heapster_export_coq env "arrays_gen.v";
