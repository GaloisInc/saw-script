enable_experimental;
env <- heapster_init_env "SHA512" "sha512.bc";

// heapster_set_debug_level env 1;

heapster_define_perm env "int64" " " "llvmptr 64" "exists x:bv 64.eq(llvmword(x))";
heapster_define_perm env "int32" " " "llvmptr 32" "exists x:bv 32.eq(llvmword(x))";
heapster_define_perm env "int8" " " "llvmptr 8" "exists x:bv 8.eq(llvmword(x))";

// FIXME: We always have rw=W, but without the rw arguments below Heapster
// doesn't realize the perm is not copyable (it needs to unfold named perms).
heapster_define_perm env "int64_ptr" "rw:rwmodality" "llvmptr 64" "ptr((rw,0) |-> int64<>)";
heapster_define_perm env "true_ptr" "rw:rwmodality" "llvmptr 64" "ptr((rw,0) |-> true)";

heapster_assume_fun env "CRYPTO_load_u64_be"
  "(). arg0:ptr((R,0) |-> int64<>) -o \
     \ arg0:ptr((R,0) |-> int64<>), ret:int64<>"
  "\\ (x:Vec 64 Bool) -> returnM (Vec 64 Bool * Vec 64 Bool) (x, x)";

/*
heapster_typecheck_fun env "return_state"
  "(). arg0:array(W,0,<8,*8,fieldsh(int64<>)) -o \
     \ arg0:array(W,0,<8,*8,fieldsh(int64<>))";

heapster_set_translation_checks env false;
heapster_typecheck_fun env "sha512_block_data_order"
  "(num:bv 64). arg0:array(W,0,<8,*8,fieldsh(int64<>)), \
              \ arg1:array(R,0,<16*num,*8,fieldsh(int64<>)), \
              \ arg2:eq(llvmword(num)) -o \
              \ arg0:array(W,0,<8,*8,fieldsh(int64<>)), \
              \ arg1:array(R,0,<16*num,*8,fieldsh(int64<>)), \
              \ arg2:true, ret:true";
*/

heapster_typecheck_fun env "round_00_15"
 "(). arg0:int64<>, \
    \ arg1:int64_ptr<W>, arg2:int64_ptr<W>, arg3:int64_ptr<W>, arg4:int64_ptr<W>, \
    \ arg5:int64_ptr<W>, arg6:int64_ptr<W>, arg7:int64_ptr<W>, arg8:int64_ptr<W>, \
    \ arg9:int64_ptr<W> -o \
    \ arg1:int64_ptr<W>, arg2:int64_ptr<W>, arg3:int64_ptr<W>, arg4:int64_ptr<W>, \
    \ arg5:int64_ptr<W>, arg6:int64_ptr<W>, arg7:int64_ptr<W>, arg8:int64_ptr<W>, \
    \ arg9:int64_ptr<W>, ret:true";

heapster_typecheck_fun env "round_16_80"
 "(). arg0:int64<>, arg1:int64<>, \
    \ arg2:int64_ptr<W>, arg3:int64_ptr<W>, arg4:int64_ptr<W>, arg5:int64_ptr<W>, \
    \ arg6:int64_ptr<W>, arg7:int64_ptr<W>, arg8:int64_ptr<W>, arg9:int64_ptr<W>, \
    \ arg10:array(W,0,<16,*8,fieldsh(int64<>)), \
    \ arg11:true_ptr<W>, arg12:true_ptr<W>, arg13:int64_ptr<W> -o \
    \ arg2:int64_ptr<W>, arg3:int64_ptr<W>, arg4:int64_ptr<W>, arg5:int64_ptr<W>, \
    \ arg6:int64_ptr<W>, arg7:int64_ptr<W>, arg8:int64_ptr<W>, arg9:int64_ptr<W>, \
    \ arg10:array(W,0,<16,*8,fieldsh(int64<>)), \
    \ arg11:int64_ptr<W>, arg12:int64_ptr<W>, arg13:int64_ptr<W>, ret:true";

heapster_typecheck_fun env "return_X"
  "(). arg0:array(W,0,<16,*8,fieldsh(int64<>)) -o \
     \ arg0:array(W,0,<16,*8,fieldsh(int64<>))";

heapster_set_translation_checks env false;
heapster_typecheck_fun env "processBlock"
  "(). arg0:int64_ptr<W>, arg1:int64_ptr<W>, arg2:int64_ptr<W>, \
     \ arg3:int64_ptr<W>, arg4:int64_ptr<W>, arg5:int64_ptr<W>, \
     \ arg6:int64_ptr<W>, arg7:int64_ptr<W>, \
     \ arg8:array(R,0,<16,*8,fieldsh(int64<>)) -o \
     \ arg0:int64_ptr<W>, arg1:int64_ptr<W>, arg2:int64_ptr<W>, \
     \ arg3:int64_ptr<W>, arg4:int64_ptr<W>, arg5:int64_ptr<W>, \
     \ arg6:int64_ptr<W>, arg7:int64_ptr<W>, \
     \ arg8:array(R,0,<16,*8,fieldsh(int64<>)), ret:true";

heapster_set_translation_checks env false;
heapster_typecheck_fun env "processBlocks"
  "(num:bv 64). arg0:array(W,0,<8,*8,fieldsh(int64<>)), \
              \ arg1:array(R,0,<16*num,*8,fieldsh(int64<>)), \
              \ arg2:eq(llvmword(num)) -o \
              \ arg0:array(W,0,<8,*8,fieldsh(int64<>)), \
              \ arg1:array(R,0,<16*num,*8,fieldsh(int64<>)), \
              \ arg2:true, ret:true";

heapster_export_coq env "sha512_gen.v";
