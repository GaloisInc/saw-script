include "arrays.saw";

let eq_bool b1 b2 =
  if b1 then
    if b2 then true else false
  else
    if b2 then false else true;

let fail = do { print "Test failed"; exit 1; };
let run_test name test expected =
  do { if expected then print (str_concat "Test: " name) else
         print (str_concat (str_concat "Test: " name) " (expecting failure)");
       actual <- test;
       if eq_bool actual expected then print "Success\n" else
         do { print "Test failed\n"; exit 1; }; };

// Test that contains0 |= contains0
contains0 <- parse_core_mod "arrays" "contains0";
// run_test "contains0 |= contains0" (mr_solver contains0 contains0) true;

noErrorsContains0 <- parse_core_mod "arrays" "noErrorsContains0";
run_test "contains0 |= noErrorsContains0"
  (mr_solver_debug 0 contains0 noErrorsContains0) true;

include "specPrims.saw";
import "arrays.cry";

zero_array <- parse_core_mod "arrays" "zero_array";
run_test "zero_array |= zero_array_spec"
//  (mr_solver_debug 0 zero_array {{ zero_array_loop_spec }}) true;
  (mr_solver_debug 0 zero_array {{ zero_array_spec }}) true;
