diff -ruN dilithium/ref/Makefile dilithium-modified/ref/Makefile
--- dilithium/ref/Makefile	2024-01-23 19:23:52
+++ dilithium-modified/ref/Makefile	2024-01-23 19:28:48
@@ -1,6 +1,7 @@
-CC ?= /usr/bin/cc
+CC = wllvm
 CFLAGS += -Wall -Wextra -Wpedantic -Wmissing-prototypes -Wredundant-decls \
   -Wshadow -Wvla -Wpointer-arith -O3 -fomit-frame-pointer
+BCFLAGS = -O0 -g
 NISTFLAGS += -Wno-unused-result -O3 -fomit-frame-pointer
 SOURCES = sign.c packing.c polyvec.c poly.c ntt.c reduce.c rounding.c
 HEADERS = config.h params.h api.h sign.h packing.h polyvec.h poly.h ntt.h \
@@ -37,16 +38,24 @@
 	$(CC) -shared -fPIC $(CFLAGS) -o $@ $<
 
 libpqcrystals_dilithium2_ref.so: $(SOURCES) $(HEADERS) symmetric-shake.c
-	$(CC) -shared -fPIC $(CFLAGS) -DDILITHIUM_MODE=2 \
+	$(CC) -shared -fPIC $(BCFLAGS) -DDILITHIUM_MODE=2 \
 	  -o $@ $(SOURCES) symmetric-shake.c
 
 libpqcrystals_dilithium3_ref.so: $(SOURCES) $(HEADERS) symmetric-shake.c
-	$(CC) -shared -fPIC $(CFLAGS) -DDILITHIUM_MODE=3 \
+	$(CC) -shared -fPIC $(BCFLAGS) -DDILITHIUM_MODE=3 \
 	  -o $@ $(SOURCES) symmetric-shake.c
 
 libpqcrystals_dilithium5_ref.so: $(SOURCES) $(HEADERS) symmetric-shake.c
-	$(CC) -shared -fPIC $(CFLAGS) -DDILITHIUM_MODE=5 \
+	$(CC) -shared -fPIC $(BCFLAGS) -DDILITHIUM_MODE=5 \
 	  -o $@ $(SOURCES) symmetric-shake.c
+
+%.bc: %
+	extract-bc $<
+
+bitcode: \
+	libpqcrystals_dilithium2_ref.so.bc \
+	libpqcrystals_dilithium3_ref.so.bc \
+	libpqcrystals_dilithium5_ref.so.bc \
 
 test/test_dilithium2: test/test_dilithium.c randombytes.c $(KECCAK_SOURCES) \
   $(KECCAK_HEADERS)
diff -ruN dilithium/ref/sign.c dilithium-modified/ref/sign.c
--- dilithium/ref/sign.c	2024-01-23 19:23:52
+++ dilithium-modified/ref/sign.c	2024-01-23 19:28:48
@@ -1,4 +1,5 @@
 #include <stdint.h>
+#include <string.h>
 #include "params.h"
 #include "sign.h"
 #include "packing.h"
@@ -22,6 +23,7 @@
 **************************************************/
 int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
   uint8_t seedbuf[2*SEEDBYTES + CRHBYTES];
+  uint8_t seedbuf_rand[SEEDBYTES];
   uint8_t tr[TRBYTES];
   const uint8_t *rho, *rhoprime, *key;
   polyvecl mat[K];
@@ -29,11 +31,11 @@
   polyveck s2, t1, t0;
 
   /* Get randomness for rho, rhoprime and key */
-  randombytes(seedbuf, SEEDBYTES);
-  shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
+  randombytes(seedbuf_rand, SEEDBYTES);
+  shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf_rand, SEEDBYTES);
   rho = seedbuf;
-  rhoprime = rho + SEEDBYTES;
-  key = rhoprime + CRHBYTES;
+  rhoprime = seedbuf + SEEDBYTES;
+  key = seedbuf + SEEDBYTES + CRHBYTES;
 
   /* Expand matrix */
   polyvec_matrix_expand(mat, rho);
@@ -83,21 +85,17 @@
                           size_t mlen,
                           const uint8_t *sk)
 {
+  uint8_t sig_w1_packedbytes[K*POLYW1_PACKEDBYTES];
+  uint8_t sig_ctildebytes[CTILDEBYTES];
   unsigned int n;
-  uint8_t seedbuf[2*SEEDBYTES + TRBYTES + RNDBYTES + 2*CRHBYTES];
-  uint8_t *rho, *tr, *key, *mu, *rhoprime, *rnd;
+  uint8_t rho[SEEDBYTES], tr[TRBYTES], key[SEEDBYTES],
+          rnd[RNDBYTES], mu[CRHBYTES], rhoprime[CRHBYTES];
   uint16_t nonce = 0;
   polyvecl mat[K], s1, y, z;
   polyveck t0, s2, w1, w0, h;
   poly cp;
   keccak_state state;
 
-  rho = seedbuf;
-  tr = rho + SEEDBYTES;
-  key = tr + TRBYTES;
-  rnd = key + SEEDBYTES;
-  mu = rnd + RNDBYTES;
-  rhoprime = mu + CRHBYTES;
   unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 
 
@@ -111,10 +109,17 @@
 #ifdef DILITHIUM_RANDOMIZED_SIGNING
   randombytes(rnd, RNDBYTES);
 #else
-  for(n=0;n<RNDBYTES;n++)
-    rnd[n] = 0;
+  // for(n=0;n<RNDBYTES;n++)
+  //   rnd[n] = 0;
+  memset(rnd, 0, RNDBYTES);
 #endif
-  shake256(rhoprime, CRHBYTES, key, SEEDBYTES + RNDBYTES + CRHBYTES);
+  // shake256(rhoprime, CRHBYTES, key, SEEDBYTES + RNDBYTES + CRHBYTES);
+  shake256_init(&state);
+  shake256_absorb(&state, key, SEEDBYTES);
+  shake256_absorb(&state, rnd, RNDBYTES);
+  shake256_absorb(&state, mu, CRHBYTES);
+  shake256_finalize(&state);
+  shake256_squeeze(rhoprime, CRHBYTES, &state);
 
   /* Expand matrix and transform vectors */
   polyvec_matrix_expand(mat, rho);
@@ -136,14 +141,14 @@
   /* Decompose w and call the random oracle */
   polyveck_caddq(&w1);
   polyveck_decompose(&w1, &w0, &w1);
-  polyveck_pack_w1(sig, &w1);
+  polyveck_pack_w1(sig_w1_packedbytes, &w1);
 
   shake256_init(&state);
   shake256_absorb(&state, mu, CRHBYTES);
-  shake256_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
+  shake256_absorb(&state, sig_w1_packedbytes, K*POLYW1_PACKEDBYTES);
   shake256_finalize(&state);
-  shake256_squeeze(sig, CTILDEBYTES, &state);
-  poly_challenge(&cp, sig); /* uses only the first SEEDBYTES bytes of sig */
+  shake256_squeeze(sig_ctildebytes, CTILDEBYTES, &state);
+  poly_challenge(&cp, sig_ctildebytes); /* uses only the first SEEDBYTES bytes of sig */
   poly_ntt(&cp);
 
   /* Compute z, reject if it reveals secret */
@@ -176,7 +181,7 @@
     goto rej;
 
   /* Write signature */
-  pack_sig(sig, sig, &z, &h);
+  pack_sig(sig, sig_ctildebytes, &z, &h);
   *siglen = CRYPTO_BYTES;
   return 0;
 }
@@ -203,10 +208,11 @@
                 size_t mlen,
                 const uint8_t *sk)
 {
-  size_t i;
+  // size_t i;
 
-  for(i = 0; i < mlen; ++i)
-    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
+  // for(i = 0; i < mlen; ++i)
+  //   sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
+  memmove(sm + CRYPTO_BYTES, m, mlen);
   crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
   *smlen += mlen;
   return 0;
@@ -239,7 +245,7 @@
   uint8_t c2[CTILDEBYTES];
   poly cp;
   polyvecl mat[K], z;
-  polyveck t1, w1, h;
+  polyveck t1_prime, t1, w1, h;
   keccak_state state;
 
   if(siglen != CRYPTO_BYTES)
@@ -269,9 +275,9 @@
   poly_ntt(&cp);
   polyveck_shiftl(&t1);
   polyveck_ntt(&t1);
-  polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
+  polyveck_pointwise_poly_montgomery(&t1_prime, &cp, &t1);
 
-  polyveck_sub(&w1, &w1, &t1);
+  polyveck_sub(&w1, &w1, &t1_prime);
   polyveck_reduce(&w1);
   polyveck_invntt_tomont(&w1);
 
@@ -313,7 +319,7 @@
                      size_t smlen,
                      const uint8_t *pk)
 {
-  size_t i;
+  // size_t i;
 
   if(smlen < CRYPTO_BYTES)
     goto badsig;
@@ -323,16 +329,18 @@
     goto badsig;
   else {
     /* All good, copy msg, return 0 */
-    for(i = 0; i < *mlen; ++i)
-      m[i] = sm[CRYPTO_BYTES + i];
+    // for(i = 0; i < *mlen; ++i)
+    //   m[i] = sm[CRYPTO_BYTES + i];
+    memmove(m, sm + CRYPTO_BYTES, *mlen);
     return 0;
   }
 
 badsig:
   /* Signature verification failed */
   *mlen = -1;
-  for(i = 0; i < smlen; ++i)
-    m[i] = 0;
+  // for(i = 0; i < smlen; ++i)
+  //   m[i] = 0;
+  memset(m, 0, smlen);
 
   return -1;
 }
