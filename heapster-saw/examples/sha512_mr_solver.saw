enable_experimental;
env <- heapster_init_env "SHA512" "sha512.bc";

// Heapster

heapster_define_perm env "int64" " " "llvmptr 64" "exists x:bv 64.eq(llvmword(x))";
heapster_define_perm env "int32" " " "llvmptr 32" "exists x:bv 32.eq(llvmword(x))";
heapster_define_perm env "int8" " " "llvmptr 8" "exists x:bv 8.eq(llvmword(x))";

// FIXME: We always have rw=W, but without the rw arguments below Heapster
// doesn't realize the perm is not copyable (it needs to unfold named perms).
heapster_define_perm env "int64_ptr" "rw:rwmodality" "llvmptr 64" "ptr((rw,0) |-> int64<>)";
heapster_define_perm env "true_ptr" "rw:rwmodality" "llvmptr 64" "ptr((rw,0) |-> true)";

heapster_assume_fun env "CRYPTO_load_u64_be"
  "(). arg0:ptr((R,0) |-> int64<>) -o \
     \ arg0:ptr((R,0) |-> int64<>), ret:int64<>"
  "\\ (x:Vec 64 Bool) -> returnM (Vec 64 Bool * Vec 64 Bool) (x, x)";

heapster_typecheck_fun env "round_00_15"
 "(). arg0:int64<>, \
    \ arg1:int64_ptr<W>, arg2:int64_ptr<W>, arg3:int64_ptr<W>, arg4:int64_ptr<W>, \
    \ arg5:int64_ptr<W>, arg6:int64_ptr<W>, arg7:int64_ptr<W>, arg8:int64_ptr<W>, \
    \ arg9:int64_ptr<W> -o \
    \ arg1:int64_ptr<W>, arg2:int64_ptr<W>, arg3:int64_ptr<W>, arg4:int64_ptr<W>, \
    \ arg5:int64_ptr<W>, arg6:int64_ptr<W>, arg7:int64_ptr<W>, arg8:int64_ptr<W>, \
    \ arg9:int64_ptr<W>, ret:true";

heapster_typecheck_fun env "round_16_80"
 "(). arg0:int64<>, arg1:int64<>, \
    \ arg2:int64_ptr<W>, arg3:int64_ptr<W>, arg4:int64_ptr<W>, arg5:int64_ptr<W>, \
    \ arg6:int64_ptr<W>, arg7:int64_ptr<W>, arg8:int64_ptr<W>, arg9:int64_ptr<W>, \
    \ arg10:array(W,0,<16,*8,fieldsh(int64<>)), \
    \ arg11:true_ptr<W>, arg12:true_ptr<W>, arg13:int64_ptr<W> -o \
    \ arg2:int64_ptr<W>, arg3:int64_ptr<W>, arg4:int64_ptr<W>, arg5:int64_ptr<W>, \
    \ arg6:int64_ptr<W>, arg7:int64_ptr<W>, arg8:int64_ptr<W>, arg9:int64_ptr<W>, \
    \ arg10:array(W,0,<16,*8,fieldsh(int64<>)), \
    \ arg11:int64_ptr<W>, arg12:int64_ptr<W>, arg13:int64_ptr<W>, ret:true";

heapster_typecheck_fun env "return_X"
  "(). arg0:array(W,0,<16,*8,fieldsh(int64<>)) -o \
     \ arg0:array(W,0,<16,*8,fieldsh(int64<>))";

heapster_set_translation_checks env false;
heapster_typecheck_fun env "processBlock"
  "(). arg0:int64_ptr<W>, arg1:int64_ptr<W>, arg2:int64_ptr<W>, \
     \ arg3:int64_ptr<W>, arg4:int64_ptr<W>, arg5:int64_ptr<W>, \
     \ arg6:int64_ptr<W>, arg7:int64_ptr<W>, \
     \ arg8:array(R,0,<16,*8,fieldsh(int64<>)) -o \
     \ arg0:int64_ptr<W>, arg1:int64_ptr<W>, arg2:int64_ptr<W>, \
     \ arg3:int64_ptr<W>, arg4:int64_ptr<W>, arg5:int64_ptr<W>, \
     \ arg6:int64_ptr<W>, arg7:int64_ptr<W>, \
     \ arg8:array(R,0,<16,*8,fieldsh(int64<>)), ret:true";

// FIXME: This translation contains errors
heapster_set_translation_checks env false;
heapster_typecheck_fun env "processBlocks"
  "(num:bv 64). arg0:array(W,0,<8,*8,fieldsh(int64<>)), \
              \ arg1:array(R,0,<16*num,*8,fieldsh(int64<>)), \
              \ arg2:eq(llvmword(num)) -o \
              \ arg0:array(W,0,<8,*8,fieldsh(int64<>)), \
              \ arg1:array(R,0,<16*num,*8,fieldsh(int64<>)), \
              \ arg2:true, ret:true";

heapster_export_coq env "sha512_mr_solver_gen.v";

// Mr. Solver

let eq_bool b1 b2 =
  if b1 then
    if b2 then true else false
  else
    if b2 then false else true;

let fail = do { print "Test failed"; exit 1; };
let run_test name test expected =
  do { if expected then print (str_concat "Test: " name) else
         print (str_concat (str_concat "Test: " name) " (expecting failure)");
       actual <- test;
       if eq_bool actual expected then print "Success\n" else
         do { print "Test failed\n"; exit 1; }; };

round_00_15 <- parse_core_mod "SHA512" "round_00_15";
round_16_80 <- parse_core_mod "SHA512" "round_16_80";
processBlock <- parse_core_mod "SHA512" "processBlock";
processBlocks <- parse_core_mod "SHA512" "processBlocks";

// Test that every function refines itself
// run_test "processBlocks |= processBlocks" (mr_solver processBlocks processBlocks) true;
// run_test "processBlock |= processBlock" (mr_solver processBlock processBlock) true;
// run_test "round_16_80 |= round_16_80" (mr_solver round_16_80 round_16_80) true;
// run_test "round_00_15 |= round_00_15" (mr_solver round_00_15 round_00_15) true;

import "sha512.cry";
// FIXME: Why aren't we monadifying these automatically when they're used?
monadify_term {{ K }};
monadify_term {{ SIGMA_0 }};
monadify_term {{ SIGMA_1 }};
monadify_term {{ sigma_0 }};
monadify_term {{ sigma_1 }};
monadify_term {{ Ch }};
monadify_term {{ Maj }};

// FIXME: Why does monadification fail without this line while running
// "round_16_80 |= round_16_80_spec"?
monadify_term {{ round_00_15_spec }};

run_test "round_00_15 |= round_00_15_spec" (mr_solver round_00_15 {{ round_00_15_spec }}) true;
run_test "round_16_80 |= round_16_80_spec" (mr_solver round_16_80 {{ round_16_80_spec }}) true;
