import "Salsa20.cry";

let alloc_init ty v = do {
    p <- llvm_alloc ty;
    llvm_points_to p (llvm_term v);
    return p;
};

let ptr_to_fresh n ty = do {
    x <- llvm_fresh_var n ty;
    p <- alloc_init ty x;
    return (x, p);
};

let oneptr_update_func n ty f = do {
    (x, p) <- ptr_to_fresh n ty;
    llvm_execute_func [p];
    llvm_points_to p (llvm_term {{ f x }});
};

let quarterround_setup : CrucibleSetup () = do {
    //ys <- llvm_fresh_var "ys" (llvm_array 4 (llvm_int 32));
    y0 <- llvm_fresh_var "y0" (llvm_int 32);
    y1 <- llvm_fresh_var "y1" (llvm_int 32);
    y2 <- llvm_fresh_var "y2" (llvm_int 32);
    y3 <- llvm_fresh_var "y3" (llvm_int 32);
    p0 <- alloc_init (llvm_int 32) {{ y0 }};
    p1 <- alloc_init (llvm_int 32) {{ y1 }};
    p2 <- alloc_init (llvm_int 32) {{ y2 }};
    p3 <- alloc_init (llvm_int 32) {{ y3 }};

    llvm_execute_func [p0, p1, p2, p3];

    let zs = {{ quarterround [y0,y1,y2,y3] }};
    llvm_points_to p0 (llvm_term {{ zs@0 }});
    llvm_points_to p1 (llvm_term {{ zs@1 }});
    llvm_points_to p2 (llvm_term {{ zs@2 }});
    llvm_points_to p3 (llvm_term {{ zs@3 }});
};

let rowround_setup =
  oneptr_update_func "y" (llvm_array 16 (llvm_int 32)) {{ rowround }};

let columnround_setup =
  oneptr_update_func "x" (llvm_array 16 (llvm_int 32)) {{ columnround }};

let doubleround_setup =
  oneptr_update_func "x" (llvm_array 16 (llvm_int 32)) {{ doubleround }};

let salsa20_setup =
  oneptr_update_func "seq" (llvm_array 64 (llvm_int 8)) {{ Salsa20 }};

let salsa20_djb_setup = do {
    (input, ip) <- ptr_to_fresh "input" (llvm_array 16 (llvm_int 32));
    (_, op) <- ptr_to_fresh "output" (llvm_array 64 (llvm_int 8));
    llvm_execute_func [op, ip];
    llvm_points_to op (llvm_term {{
        Salsa20 (join [ littleendian_inverse x | x <- input ])
    }});
};

let salsa20_expansion_32 = do {
    // (k, pk) <- ptr_to_fresh "k" (llvm_array 32 (llvm_int 8));
    // (n, pn) <- ptr_to_fresh "n" (llvm_array 16 (llvm_int 8));
    k <- llvm_fresh_var "k" (llvm_array 32 (llvm_int 8));
    pk <- llvm_alloc_readonly (llvm_array 32 (llvm_int 8));
    llvm_points_to pk (llvm_term k);
    n <- llvm_fresh_var "n" (llvm_array 16 (llvm_int 8));
    pn <- llvm_alloc_readonly (llvm_array 16 (llvm_int 8));
    llvm_points_to pn (llvm_term n);
    pks <- llvm_alloc (llvm_array 64 (llvm_int 8));
    llvm_execute_func [pk, pn, pks];
    let rks = {{ Salsa20_expansion`{a=2}(k, n)}};
    llvm_points_to pks (llvm_term rks);
};

let s20_encrypt32 n = do {
    (key, pkey) <- ptr_to_fresh "key" (llvm_array 32 (llvm_int 8));
    (v, pv) <- ptr_to_fresh "nonce" (llvm_array 8 (llvm_int 8));
    (m, pm) <- ptr_to_fresh "buf" (llvm_array n (llvm_int 8));
    llvm_execute_func [ pkey
                      , pv
                      , llvm_term {{ 0 : [32] }}
                      , pm
                      , llvm_term {{ `n : [32] }}
                      ];
    llvm_points_to pm (llvm_term {{ Salsa20_encrypt (key, v, m) }});
    llvm_return (llvm_term {{ 0 : [32] }});
};

let main : TopLevel () = do {
    m      <- llvm_load_module "salsa20.bc";
    qr     <- llvm_verify m "s20_quarterround" []      false quarterround_setup   yices;
    rr     <- llvm_verify m "s20_rowround"     [qr]    false rowround_setup       yices;
    cr     <- llvm_verify m "s20_columnround"  [qr]    false columnround_setup    yices;
    dr     <- llvm_verify m "s20_doubleround"  [cr,rr] false doubleround_setup    yices;
    s20    <- llvm_verify m "s20_hash"         [dr]    false salsa20_setup        yices;
    s20e32 <- llvm_verify m "s20_expand32"     [s20]   true  salsa20_expansion_32 yices;
    s20encrypt_63 <- llvm_verify m "s20_crypt32" [s20e32] true (s20_encrypt32 63) yices;
    s20encrypt_64 <- llvm_verify m "s20_crypt32" [s20e32] true (s20_encrypt32 64) yices;
    s20encrypt_65 <- llvm_verify m "s20_crypt32" [s20e32] true (s20_encrypt32 65) yices;

    djb    <- llvm_load_module "djb/salsa20.bc";
    s20djb <- llvm_verify djb "salsa20_wordtobyte" [] false salsa20_djb_setup     w4_abc_verilog;
    print "Done!";
};
