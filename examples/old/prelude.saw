/* Built-in monads used here: Model, LLVMSetup, JavaSetup, ProofSetup */

/* Abstract types: Format, Rule, ProofResult, () */

/* Abstract parameterized types: TargetType, Var, Ref */

/* Built-in types: Array n t, Bit, Quoted */

return : a -> m a
bind : m a -> (a -> m b) -> m b

/*
We declare that the result of model extraction has a specific type,
and it's a runtime error if it does not. (Runtime from the point of
view of the type system. Checking happens before execution of the
script.)
*/
extractCryptol : Quoted -> Quoted -> Model a
extractJava : Quoted -> JavaSetup () -> Model a
extractLLVM : Quoted -> Quoted -> LLVMSetup () -> Model a

/*
The Quoted in 'var' is the language-specific name of the variable
we want a reference to. We declare that it has a specific type, as in
the extraction commands.
*/
var : Quoted -> TargetType a -> SimulatorSetup (Var a)
input  : Var a -> SimulatorSetup ()
output : Var a -> SimulatorSetup ()
modify : Var a -> SimulatorSetup ()
valueOf : Var a -> SimulatorSetup a
mayAlias : Var (Ref a) -> Var (Ref a) -> SimulatorSetup ()

/* We declare the result to have a particular type, as in model extraction. */
load : Format -> Quoted -> Model a
export : Format -> a -> Quoted -> Model ()

eq : a -> a -> Bit

thm : Bit -> Thm
forall : (a -> Thm) -> Thm
exists : (a -> Thm) -> Thm

/*
Example:
  forall (\a -> exists (\b -> thm (eq a b)))
*/

/*
If the parameters to 'rule' are of function types, it's like the
forAll in the old version of SAWScript. If they have non-function
types, they describe how to replace constants.
*/
rule : a -> a -> Rule

/* A special rewrite rule that expands the given sub-expression one level. */
expand : a -> Rule

/* Rewrite a term given an array of rewrite rules. */
rewrite : Array n Rule -> a -> Model a

sat : Thm -> ProofSetup () -> Model ProofResult
prove : Thm -> ProofSetup () -> Model ProofResult
quickcheck : Thm -> ProofSetup () -> Model ProofResult

/*
These all have an implicit goal behind the scenes, hence the existence
of both rewrite and rewriteProof.
*/
yices : ProofSetup ()
abc : ProofSetup ()
rewriteProof : Array n Rule -> ProofSetup ()
exportProof : Format -> Quoted -> ProofSetup ()
exhaustProof : ProofSetup ()
quickcheckProof : ProofSetup ()
