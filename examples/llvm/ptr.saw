let alloc_init ty v = do {
    p <- crucible_alloc ty;
    crucible_points_to p v;
    return p;
};

let ptr_to_fresh n ty = do {
    x <- crucible_fresh_var n ty;
    p <- alloc_init ty (crucible_term x);
    return (x, p);
};

let add_setup = do {
    (x, xp) <- ptr_to_fresh "x" (llvm_int 32);
    (y, yp) <- ptr_to_fresh "y" (llvm_int 32);
    crucible_execute_func [xp, yp];
    crucible_return (crucible_term {{ x + y : [32] }});
};

let clear_setup = do {
    (a, ap) <- ptr_to_fresh "a" (llvm_array 10 (llvm_int 32));
    crucible_execute_func [ap];
    crucible_points_to ap (crucible_term {{ zero : [10][32] }}); 
};

let copy_setup = do {
    (a, ap) <- ptr_to_fresh "a" (llvm_array 10 (llvm_int 32));
    (b, bp) <- ptr_to_fresh "b" (llvm_array 10 (llvm_int 32));
    crucible_execute_func [ap, bp];
    crucible_points_to ap (crucible_term b);
};

let main : TopLevel () = do {
    m <- llvm_load_module "ptr.bc";
    add_ms <- crucible_llvm_verify m "add" [] false add_setup abc;
    clear_ms <- crucible_llvm_verify m "clear" [] false clear_setup abc;
    copy_ms <- crucible_llvm_verify m "copy" [] false copy_setup abc;
    print "Done.";
};
