
module Monadify where

import SpecPrims

my_abs : [64] -> [64]
my_abs x = if x < 0 then -x else x

err_if_lt0 : [64] -> [64]
err_if_lt0 x =
  if x < 0 then error "x < 0" else x

sha1 : ([8], [32], [32], [32]) -> [32]
sha1 (t, x, y, z) =
  if (0 <= t)  && (t <= 19) then (x && y) ^ (~x && z)
   | (20 <= t) && (t <= 39) then x ^ y ^ z
   | (40 <= t) && (t <= 59) then (x && y) ^ (x && z) ^ (y && z)
   | (60 <= t) && (t <= 79) then x ^ y ^ z
   else error "sha1: t out of range"

fib : [64] -> [64]
fib x = if x == 0 then 1 else x * fib (x - 1)

fibSpecNoErrors : [64] -> [64]
fibSpecNoErrors _ = noErrors
