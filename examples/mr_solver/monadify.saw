
enable_experimental;
import "SpecPrims.cry" as SpecPrims;
import "monadify.cry";
set_monadification "SpecPrims::exists" "Prelude.existsM";
set_monadification "SpecPrims::forall" "Prelude.forallM";

my_abs <- unfold_term ["my_abs"] {{ my_abs }};
print "[my_abs] original term:";
print_term my_abs;
my_absM <- monadify_term my_abs;
print "[my_abs] monadified term:";
print_term my_absM;

/*
err_if_lt0 <- unfold_term ["err_if_lt0"] {{ err_if_lt0 }};
print "[err_if_lt0] original term:";
err_if_lt0M <- monadify_term err_if_lt0;
print "[err_if_lt0] monadified term:";
print_term err_if_lt0M;
*/

/*
sha1 <- {{ sha1 }};
print "[SHA1] original term:";
print_term sha1;
mtrm <- monadify_term sha1;
print "[SHA1] monadified term:";
print_term mtrm;
*/

fib <- unfold_term ["fib"] {{ fib }};
print "[fib] original term:";
print_term fib;
fibM <- monadify_term fib;
print "[fib] monadified term:";
print_term fibM;

noErrors <- unfold_term ["noErrors"] {{ SpecPrims::noErrors }};
print "[noErrors] original term:";
print_term noErrors;
noErrorsM <- monadify_term noErrors;
print "[noErrors] monadified term:";
print_term noErrorsM;

fibSpecNoErrors <- unfold_term ["fibSpecNoErrors"] {{ fibSpecNoErrors }};
print "[fibSpecNoErrors] original term:";
print_term fibSpecNoErrors;
fibSpecNoErrorsM <- monadify_term fibSpecNoErrors;
print "[fibSpecNoErrors] monadified term:";
print_term fibSpecNoErrorsM;
