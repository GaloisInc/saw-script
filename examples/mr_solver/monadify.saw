
enable_experimental;
enable_deprecated;
import "SpecPrims.cry" as SpecPrims;
import "monadify.cry";
// load_sawcore_from_file "../../cryptol-saw-core/saw/CryptolM.sawcore";

// Set the monadification of the Cryptol exists and forall functions
set_monadification "SpecPrims::exists" "SpecM.existsS" true;
set_monadification "SpecPrims::forall" "SpecM.forallS" true;

let run_test name cry_term mon_term_expected =
  do { print (str_concat "Test: " name);
       print "Original term:";
       print_term cry_term;
       mon_term <- monadify_term cry_term;
       print "Monadified term:";
       print_term mon_term;
       success <- is_convertible mon_term mon_term_expected;
       if success then print "Success - monadified term matched expected\n" else
         do { print "Test failed - did not match expected monadified term:";
              print_term mon_term_expected;
              exit 1; }; };

let my_abs = unfold_term ["my_abs"] {{ my_abs }};
let my_abs_M = parse_core_mod "CryptolM" "\
\ \\(x : (mseq VoidEv (TCNum 64) Bool)) -> \
\   bindS VoidEv (isFinite (TCNum 64)) \
\         (mseq VoidEv (TCNum 64) Bool) \
\         (assertFiniteS VoidEv (TCNum 64)) \
\     (\\(x' : (isFinite (TCNum 64))) -> \
\        bindS VoidEv (isFinite (TCNum 64)) \
\              (mseq VoidEv (TCNum 64) Bool) \
\              (assertFiniteS VoidEv (TCNum 64)) \
\          (\\(x'' : (isFinite (TCNum 64))) -> \
\             ite (SpecM VoidEv (mseq VoidEv (TCNum 64) Bool)) \
\               (ecLt (mseq VoidEv (TCNum 64) Bool) (PCmpMSeqBool VoidEv (TCNum 64) x') x \
\                  (ecNumber (TCNum 0) (mseq VoidEv (TCNum 64) Bool) (PLiteralSeqBoolM VoidEv (TCNum 64) x''))) \
\               (bindS VoidEv (isFinite (TCNum 64)) \
\                      (mseq VoidEv (TCNum 64) Bool) \
\                      (assertFiniteS VoidEv (TCNum 64)) \
\                  (\\(x''' : (isFinite (TCNum 64))) -> \
\                     retS VoidEv \
\                             (mseq VoidEv (TCNum 64) Bool) \
\                             (ecNeg (mseq VoidEv (TCNum 64) Bool) (PRingMSeqBool VoidEv (TCNum 64) x''') x))) \
\               (retS VoidEv (mseq VoidEv (TCNum 64) Bool) x)))";
run_test "my_abs" my_abs my_abs_M;

let err_if_lt0 = unfold_term ["err_if_lt0"] {{ err_if_lt0 }};
let err_if_lt0_M = parse_core_mod "CryptolM" "\
\ \\(x : (mseq VoidEv (TCNum 64) Bool)) -> \
\   bindS VoidEv (isFinite (TCNum 64)) (mseq VoidEv (TCNum 64) Bool) (assertFiniteS VoidEv (TCNum 64)) \
\     (\\(x' : (isFinite (TCNum 64))) -> \
\        bindS VoidEv (isFinite (TCNum 64)) (mseq VoidEv (TCNum 64) Bool) (assertFiniteS VoidEv (TCNum 64)) \
\          (\\(x'' : (isFinite (TCNum 64))) -> \
\             ite (SpecM VoidEv (mseq VoidEv (TCNum 64) Bool)) \
\               (ecLt (mseq VoidEv (TCNum 64) Bool) (PCmpMSeqBool VoidEv (TCNum 64) x') x \
\                  (ecNumber (TCNum 0) (mseq VoidEv (TCNum 64) Bool) (PLiteralSeqBoolM VoidEv (TCNum 64) x''))) \
\               (bindS VoidEv (isFinite (TCNum 8)) (mseq VoidEv (TCNum 64) Bool) (assertFiniteS VoidEv (TCNum 8)) \
\                  (\\(x''' : (isFinite (TCNum 8))) -> \
\                     ecErrorM VoidEv (mseq VoidEv (TCNum 64) Bool) (TCNum 5) \
\                       (seqToMseq VoidEv (TCNum 5) (mseq VoidEv (TCNum 8) Bool) \
\                          [ ecNumber (TCNum 120) (mseq VoidEv (TCNum 8) Bool) (PLiteralSeqBoolM VoidEv (TCNum 8) x''') \
\                          , (ecNumber (TCNum 32) (mseq VoidEv (TCNum 8) Bool) (PLiteralSeqBoolM VoidEv (TCNum 8) x''')) \
\                          , ecNumber (TCNum 60) (mseq VoidEv (TCNum 8) Bool) (PLiteralSeqBoolM VoidEv (TCNum 8) x''') \
\                          , (ecNumber (TCNum 32) (mseq VoidEv (TCNum 8) Bool) (PLiteralSeqBoolM VoidEv (TCNum 8) x''')) \
\                          , ecNumber (TCNum 48) (mseq VoidEv (TCNum 8) Bool) (PLiteralSeqBoolM VoidEv (TCNum 8) x''') ]))) \
\               (retS VoidEv (mseq VoidEv (TCNum 64) Bool) x)))";
run_test "err_if_lt0" err_if_lt0 err_if_lt0_M;

/*
sha1 <- {{ sha1 }};
print "Test: sha1";
print "Original term:";
print_term sha1;
sha1M <- monadify_term sha1;
print "Monadified term:";
print_term sha1M;
*/

let fib = unfold_term ["fib"] {{ fib }};
let fibM = parse_core_mod "CryptolM" "\
\ \\(_x : Vec 64 Bool) -> \
\    FixS VoidEv (Tp_Arr (Tp_bitvector 64) (Tp_M (Tp_bitvector 64))) \
\      (\\(fib : (Vec 64 Bool -> SpecM VoidEv (Vec 64 Bool))) -> \
\        \\(x : Vec 64 Bool) -> \
\           bindS VoidEv (isFinite (TCNum 64)) (Vec 64 Bool) (assertFiniteS VoidEv (TCNum 64)) \
\             (\\(x1 : isFinite (TCNum 64)) -> \
\                bindS VoidEv (isFinite (TCNum 64)) (Vec 64 Bool) \
\                             (assertFiniteS VoidEv (TCNum 64)) \
\                  (\\(x2 : isFinite (TCNum 64)) -> \
\                     ite (SpecM VoidEv (Vec 64 Bool)) \
\                       (ecEq (Vec 64 Bool) (PEqMSeqBool VoidEv (TCNum 64) x1) x \
\                          (ecNumber (TCNum 0) (Vec 64 Bool) \
\                                    (PLiteralSeqBoolM VoidEv (TCNum 64) x2))) \
\                       (bindS VoidEv (isFinite (TCNum 64)) (Vec 64 Bool) \
\                              (assertFiniteS VoidEv (TCNum 64)) \
\                          (\\(x3 : (isFinite (TCNum 64))) -> \
\                             retS VoidEv (Vec 64 Bool) \
\                               (ecNumber (TCNum 1) (Vec 64 Bool) \
\                                         (PLiteralSeqBoolM VoidEv (TCNum 64) x3)))) \
\                       (bindS VoidEv (isFinite (TCNum 64)) (Vec 64 Bool) \
\                              (assertFiniteS VoidEv (TCNum 64)) \
\                          (\\(x3 : (isFinite (TCNum 64))) -> \
\                             bindS VoidEv (isFinite (TCNum 64)) (Vec 64 Bool) \
\                                   (assertFiniteS VoidEv (TCNum 64)) \
\                               (\\(x4 : (isFinite (TCNum 64))) -> \
\                                  bindS VoidEv (Vec 64 Bool) (Vec 64 Bool) \
\                                    (fib \
\                                       (ecMinus (Vec 64 Bool) (PRingMSeqBool VoidEv (TCNum 64) x3) x \
\                                          (ecNumber (TCNum 1) (Vec 64 Bool) \
\                                                    (PLiteralSeqBoolM VoidEv (TCNum 64) x4)))) \
\                                    (\\(x5 : Vec 64 Bool) -> \
\                                       retS VoidEv (Vec 64 Bool) (ecMul (Vec 64 Bool) \
\                                            (PRingMSeqBool VoidEv (TCNum 64) x3) x x5)))))))) \
\      _x";
run_test "fib" fib fibM;

let noErrors = unfold_term ["noErrors"] {{ SpecPrims::noErrors }};
let noErrorsM = parse_core_mod "CryptolM" "\\(a : sort 0) -> existsS VoidEv a";
run_test "noErrors" noErrors noErrorsM;

let fibSpecNoErrors = unfold_term ["fibSpecNoErrors"] {{ fibSpecNoErrors }};
let fibSpecNoErrorsM = parse_core_mod "CryptolM" "\
\ \\(__p1 : (mseq VoidEv (TCNum 64) Bool)) -> \
\   existsS VoidEv (mseq VoidEv (TCNum 64) Bool)";
run_test "fibSpecNoErrors" fibSpecNoErrors fibSpecNoErrorsM;
