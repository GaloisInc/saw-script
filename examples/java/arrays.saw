enable_deprecated;
let copy_setup : JavaSetup () = do {
    a <- java_var "a" (java_array 10 java_int);
    java_var "b" (java_array 10 java_int);
    java_ensure_eq "b" {{ a : [10][32] }};
    java_verify_tactic abc;
};

let unit_setup : JavaSetup () = do {
    java_var "a" (java_array 10 java_int);
    java_ensure_eq "a" {{ [1, 0, 0, 0, 0, 0, 0, 0, 0, 0] : [10][32] }};
    java_verify_tactic abc;
};

let clear_setup : JavaSetup () = do {
    java_requires_class "java.util.Arrays";
    java_var "a" (java_array 10 java_int);
    java_ensure_eq "a" {{ zero : [10][32] }};
    java_verify_tactic abc;
};

let sum_setup : JavaSetup () = do {
    a <- java_var "a" (java_array 10 java_int);
    // Silly way to write it, but works as a test.
    java_return {{ (a@0) + (a@1) + (a@2) + (a@3) + (a@4) +
                   (a@5) + (a@6) + (a@7) + (a@8) + (a@9)  }};
    java_verify_tactic abc;
};

let sum_setup' : JavaSetup () = do { java_var "a" (java_array 10 java_int); return (); };

let id_setup : JavaSetup () = do { java_var "a" (java_array 10 java_int); return (); };

let comp_setup : JavaSetup () = do {
    java_var "a" (java_array 10 java_int);
    java_ensure_eq "a" {{ [1, 0, 0, 0, 0, 0, 0, 0, 0, 0] : [10][32] }};
    java_verify_tactic abc;
};

let main : TopLevel () = do {
    c <- java_load_class "ArrayTest";
    copy_ms <- java_verify c "copy" [] copy_setup;
    unit_ms <- java_verify c "unit" [] unit_setup;
    clear_ms <- java_verify c "clear" [] clear_setup;
    sum_ms <- java_verify c "sum" [] sum_setup;
    comp_ms <- java_verify c "comp" [unit_ms] comp_setup;
    print "Extracting model of sum, which has type:";
    sum_tm <- java_extract c "sum" sum_setup';
    id_tm <- java_extract c "arr_id" id_setup;
    check_term sum_tm;
    print "Running sum on ten 1 inputs:";
    print {{ sum_tm [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] }};
    check_term id_tm;
    print "Running arr_id on ten increasing inputs:";
    print {{ id_tm [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] }};
    print "Done.";
};
