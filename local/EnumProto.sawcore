module EnumProto where

-- import Eithers;

-------------------------------------------------------------------
-- Translation
-------------------------------------------------------------------

---- Cryptol: ------------------------------------------------------
{-
- Cryptol
enum EnumType as = C1 CT1
                 | C2 CT2
                 | C3 CT3a CT3b
                 -- 'as' can be free in CT1, CT2 types
-}

---- SawCore: ------------------------------------------------------
-- types:

-- Just Like EnumLib3, but let's inline things:

-- NOTE all the 'base types' (elements of the sum) should all be parameterized by 'as':
EnumType__ArgType_C1 (as : sort 0) : sort 0 = as;
EnumType__ArgType_C2 (as : sort 0) : sort 0 = Bool;
EnumType__ArgType_C3 (as : sort 0) : sort 0 = PairType UnitType as;

  -- TODO: or Right Nest onto the UnitType??

--
EnumType__TypeList : sort 0 -> ListSort;
EnumType__TypeList as = LS_Cons (EnumType__ArgType_C1 as) (LS_Cons (EnumType__ArgType_C2 as) LS_Nil);

-- Define the type:
EnumType : (as : sort 0) -> sort 0;
EnumType as = Eithers' (
   LS_Cons (EnumType__ArgType_C1 as) (LS_Cons (EnumType__ArgType_C2 as) LS_Nil)
                       );

-- constructors (these aren't new, already in Cryptol, and AFAIK mapped into SawCore),
-- thus straightforward names.
C1 : (as : sort 0) -> EnumType__ArgType_C1 as -> EnumType as;
C1 as x = Left (EnumType__ArgType_C1 as) (Eithers' (LS_Cons (EnumType__ArgType_C2 as) LS_Nil)) x;

C2 : (as : sort 0) -> EnumType__ArgType_C2 as -> EnumType as;
C2 as x = Right (EnumType__ArgType_C1 as) (Eithers' (LS_Cons (EnumType__ArgType_C2 as) LS_Nil))
                    (Left (EnumType__ArgType_C2 as) (Eithers' LS_Nil)
                      x);

EnumType_eithers : (as : sort 0)
                -> (b: sort 0)
                -> (EnumType__ArgType_C1 as -> b) -> (EnumType__ArgType_C2 as -> b)
                -> EnumType as
                -> b;
EnumType_eithers as b f1 f2 =
  either (EnumType__ArgType_C1 as) (Eithers' (LS_Cons (EnumType__ArgType_C2 as) LS_Nil)) b f1
    (either (EnumType__ArgType_C2 as) Void b f2
       (elimVoid b));

-- case for EnumType:
{-
EnumType_eithers  :  (b: sort 0)
               -> MapRightArrow b EnumType__TypeList
               -> Eithers EnumType__TypeList  -- AKA EnumType
               -> b;

EnumType_eithers = eithers' EnumType__TypeList
-}

---- examples of EnumType -----------------------------------------------------

val1 : EnumType  Nat;
val1 = C1 Nat 5;

val2 : (as : sort 0) -> EnumType  as;
val2 as = C2 as True;
