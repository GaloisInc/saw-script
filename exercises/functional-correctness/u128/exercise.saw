///////////////////////////////////////////////////////////////////////////////
// Exercise: 128-bit Unsigned Int Functional Correctness
///////////////////////////////////////////////////////////////////////////////

include "../../common/helpers.saw";

m <- llvm_load_module "u128.bc";

///////////////////////////////////////////////////////////////////////////////
// Part 1: Fix increment_u128
///////////////////////////////////////////////////////////////////////////////

// Below you'll find a correct specification of increment_u128.  However, the C
// implementation contains an error.  To help diagnose the issue, uncomment the
// llvm_verify command and run SAW to see the error.
// Use `simplify (cryptol_ss())` and `print_goal` to aid in debugging.
// Correct the C code, recompile `u128.bc`, and verify that the proof goes
// through.

let increment_u128_spec = do {
    (x, x_ptr) <- ptr_to_fresh "x" (llvm_int 128);

    llvm_execute_func [x_ptr];

    llvm_points_to x_ptr (llvm_term {{ x + 1 }});
};

/*
llvm_verify m "increment_u128"
    []
    true
    increment_u128_spec
    z3;
*/

////////////////////////////////////////////////////////////////////////////////
// Part 2: eq_u128 proofs
////////////////////////////////////////////////////////////////////////////////

// Turn the memory safety specs below into functional correctness specs.  Ensure
// the corresponding llvm_verify command passes.  To simplify the specs, you may
// assume that bcmp returns 1 for non-equal inputs.

// "The bcmp() function compares the two byte sequences s1 and s2 of length n
// each. If they are equal, and in particular if n is zero, bcmp() returns 0.
// Otherwise it returns a nonzero result."
let bcmp_spec size = do {
    (s1, s1_ptr) <- ptr_to_fresh_readonly "s1" (llvm_array size (llvm_int 8));
    (s2, s2_ptr) <- ptr_to_fresh_readonly "s2" (llvm_array size (llvm_int 8));

    llvm_execute_func [ s1_ptr, s2_ptr, llvm_term {{ `size : [64]}} ];

    ret <- llvm_fresh_var "ret" (llvm_int 32);
    llvm_return (llvm_term ret);
};

bcmp_16_ov <- llvm_unsafe_assume_spec m "bcmp" (bcmp_spec 16);

let eq_u128_spec = do {
    (x, x_ptr) <- ptr_to_fresh_readonly "x" (llvm_int 128);
    (y, y_ptr) <- ptr_to_fresh_readonly "y" (llvm_int 128);

    llvm_execute_func [x_ptr, y_ptr];

    ret <- llvm_fresh_var "ret" (llvm_int 1);
    llvm_return (llvm_term ret);
};

llvm_verify m "eq_u128"
    [bcmp_16_ov]
    true
    eq_u128_spec
    z3;
