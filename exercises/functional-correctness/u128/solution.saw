include "../../common/helpers.saw";

m <- llvm_load_module "u128.bc";

let increment_u128_spec = do {
    (x, x_ptr) <- ptr_to_fresh "x" (llvm_int 128);

    llvm_execute_func [x_ptr];

    llvm_points_to x_ptr (llvm_term {{ x + 1 }});
};

// NOTE: Solution below is commented out because you need to fix the C code by
// changing `x[1]` to `x[0]` on line 7, and `x[0]` to `x[1]` on line 8.  Then
// the proof below will go through.
/*
llvm_verify m "increment_u128"
    []
    true
    increment_u128_spec
    (do {
        simplify (cryptol_ss());
        print_goal;
        w4_unint_z3 [];
});
*/

////////////////////////////////////////////////////////////////////////////////
// eq_u128 proofs
////////////////////////////////////////////////////////////////////////////////

// "The bcmp() function compares the two byte sequences s1 and s2 of length n
// each. If they are equal, and in particular if n is zero, bcmp() returns 0.
// Otherwise it returns a nonzero result."
let bcmp_spec size = do {
    (s1, s1_ptr) <- ptr_to_fresh "s1" (llvm_array size (llvm_int 8));
    (s2, s2_ptr) <- ptr_to_fresh "s2" (llvm_array size (llvm_int 8));

    llvm_execute_func [ s1_ptr, s2_ptr, llvm_term {{ `size : [64]}} ];

    llvm_return (llvm_term {{ zext`{32} [s1 != s2] }});
};

bcmp_16_ov <- llvm_unsafe_assume_spec m "bcmp" (bcmp_spec 16);

let eq_u128_spec = do {
    (x, x_ptr) <- ptr_to_fresh "x" (llvm_int 128);
    (y, y_ptr) <- ptr_to_fresh "y" (llvm_int 128);

    llvm_execute_func [x_ptr, y_ptr];

    llvm_return (llvm_term {{ [x == y] : [1] }});
};

llvm_verify m "eq_u128"
    [bcmp_16_ov]
    true
    eq_u128_spec
    (do {
        //print_goal;
        w4_unint_z3 [];
});
