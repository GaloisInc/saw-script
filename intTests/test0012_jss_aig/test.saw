include "../support/prove_or_die.saw";

// Many of these Cryptol functions have types more specific than
// necessary. The point is to document the behavior of JSS using the
// SAW backend.
let {{
  run_pred : ([16] -> [1]) -> [8] -> [8] -> [1]
  run_pred f x y = f (x # y)

  run_term : ([16] -> [32]) -> [8] -> [8] -> [32]
  run_term f x y = f (x # y)

  bit_to_int : {a} (fin a, a >= 1) => Bit -> [a]
  bit_to_int b = if b then 1 else 0

  sign_extend : [8] -> [32]
  sign_extend x = (if (x && 0b10000000) == 0 then zero else ~zero) # x
}};

let check_pred name f r = do {
  prove_or_die name {{ \x -> \y -> run_pred f x y == r }};
};

let check_terms_eq name f g = do {
  prove_or_die name {{ \x -> \y -> f x y == g x y }};
};

let check_x_irrel name f = do {
  prove_or_die name {{ \x1 -> \x2 -> \y -> run_term f x1 y == run_term f x2 y }};
};

let check_y_irrel name f = do {
  prove_or_die name {{ \x -> \y1 -> \y2 -> run_term f x y1 == run_term f x y2 }};
};

x__x <- read_aig "tmp/x__x.aig";
check_pred "x__x" x__x {{ 1 }};

x__x1 <- read_aig "tmp/x__x1.aig";
check_pred "x__x1" x__x1 {{ 0 }};

x__y <- read_aig "tmp/x__y.aig";
check_terms_eq "x__y" {{ run_pred x__y }} {{ \x -> \y -> bit_to_int (x == y) }};

xx <- read_aig "tmp/xx.aig";
x2 <- read_aig "tmp/2x.aig";
check_terms_eq "xx 2x" {{ run_term xx }} {{ run_term x2 }};
check_terms_eq "xx (2 * x) extended"
  {{ run_term xx }}
  {{ \x -> \y -> (2 * (sign_extend x)) }};
check_y_irrel "xx y irrel" xx;
check_y_irrel "2x y irrel" x2;

yy <- read_aig "tmp/yy.aig";
y2 <- read_aig "tmp/2y.aig";
check_terms_eq "yy 2y" {{ run_term yy }} {{ run_term y2 }};
check_terms_eq "2y (y + y) extended"
  {{ run_term y2 }}
  {{ \x -> \y -> sign_extend y + sign_extend y }};
check_x_irrel "yy x irrel" yy;
check_x_irrel "2y x irrel" y2;
