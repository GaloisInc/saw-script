let pre_counter (counter : Ghost) = do {
  n <- llvm_fresh_var "n" (llvm_int 32);
  llvm_precond {{n < 128}};
  llvm_ghost_value counter n;
  return n;
};

let post_counter (counter : Ghost) n = do {
  llvm_ghost_value counter {{n+1}};
};

let get_and_increment_spec (counter : Ghost) : CrucibleSetup () = do {
  n <- pre_counter counter;
  llvm_execute_func [];
  post_counter counter n;
  llvm_return (llvm_term {{n}});
};

let f_spec (counter : Ghost) : CrucibleSetup () = do {
  n <- pre_counter counter;
  i <- llvm_fresh_var "i" (llvm_int 32);
  llvm_precond {{i < 512}};
  llvm_execute_func [llvm_term i];
  post_counter counter n;
  llvm_return (llvm_term {{i*n}});
};

let main : TopLevel () = do {
  counter <- declare_ghost_state "counter";
  m <- llvm_load_module "test.bc";
  get_and_increment_ov <-
    llvm_unsafe_assume_spec m "get_and_increment" (get_and_increment_spec counter);
  llvm_verify m "f" [get_and_increment_ov] false (f_spec counter) z3;
  print "done";
};
