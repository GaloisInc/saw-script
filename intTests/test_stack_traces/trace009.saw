enable_experimental;

// Arguments to SAWScript functions that are monadic callbacks should
// behave the same way as arguments to builtins. Alas, not for now...
print "------------------------------------------------------------";
print "monadic callback argument";
let f1 m = do { m; return (); };
f1 print_stack;

// A bind/return pair should produce the same trace behavior as a let.
print "------------------------------------------------------------";
print "bind/return";
f2 <- return print_stack;
f2;

// If you cons a tuple of actions and push it around, ideally that
// should also result in trace frames. Currently, though, it does
// not.
print "------------------------------------------------------------";
print "tuple with let";
let pair1 = (print_stack, print_stack);
let pair2 = pair1;
let (f3, _) = pair2;
f3;

print "------------------------------------------------------------";
print "tuple with bind";
let pair3 = (print_stack, print_stack);
let pair4 = pair3;
(f4, _) <- return pair4;
f4;

// Things are simpler for tuples that don't get pushed around.
print "------------------------------------------------------------";
print "one-step tuple with let";
let (f5, _) = (print_stack, print_stack);
f5;

print "------------------------------------------------------------";
print "one-step tuple with bind";
(f6, _) <- return (print_stack, print_stack);
f6;

// Repeat the tuple cases inside a do-block.
do {
   print "------------------------------------------------------------";
   print "tuple with let, in do-block";
   let pair5 = (print_stack, print_stack);
   let pair6 = pair5;
   let (f7, _) = pair6;
   f7;

   print "------------------------------------------------------------";
   print "tuple with bind, in do-block";
   let pair7 = (print_stack, print_stack);
   let pair8 = pair7;
   (f8, _) <- return pair8;
   f8;

   print "------------------------------------------------------------";
   print "one-step tuple with let, in do-block";
   let (f9, _) = (print_stack, print_stack);
   f9;

   print "------------------------------------------------------------";
   print "one-step tuple with bind";
   (f10, _) <- return (print_stack, print_stack);
   f10;

   return ();
};
