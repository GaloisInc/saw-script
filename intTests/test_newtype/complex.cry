// This is a development of rational complex numbers

type Int = Integer

// Complex rational numbers in rectangular coordinates
newtype CplxInt =
  { real : Int, imag : Int }

embedQ : Int -> CplxInt
embedQ x = CplxInt{ real = x, imag = 0 }

cplxAdd : CplxInt -> CplxInt -> CplxInt
cplxAdd x y = CplxInt { real = r, imag = i }
  where
  r = x.real + y.real
  i = x.imag + y.imag

cplxMul : CplxInt -> CplxInt -> CplxInt
cplxMul x y = CplxInt { real = r, imag = i }
  where
  r = x.real * y.real - x.imag * y.imag
  i = x.real * y.imag + x.imag * y.real

cplxEq : CplxInt -> CplxInt -> Bit
cplxEq x y = (x.real == y.real) && (x.imag == y.imag)

cplxAddAssoc : CplxInt -> CplxInt -> CplxInt -> Bit
cplxAddAssoc x y z =
  cplxEq (cplxAdd (cplxAdd x y) z)
         (cplxAdd x (cplxAdd y z))

cplxMulAssoc : CplxInt -> CplxInt -> CplxInt -> Bit
cplxMulAssoc x y z =
  cplxEq (cplxMul (cplxMul x y) z)
         (cplxMul x (cplxMul y z))

cplxMulDistrib : CplxInt -> CplxInt -> CplxInt -> Bit
cplxMulDistrib x y z =
  cplxEq (cplxMul x (cplxAdd y z))
         (cplxAdd (cplxMul x y) (cplxMul x z))