// a variety of Cryptol terms
let c = {{ 17 : [8] }};
x <- fresh_symbolic "x" {| [64] |};
y <- fresh_symbolic "y" {| [64] |};
let t1 = {{ x + y }};
let t2 = {{ \z -> z }};
let t3 = {{ \(z : [32]) -> z }};
let t4 = {{ [1 .. 10] }};
let t5 = {{ [1 .. 10] : [10][32] }};

// reading/writing is consistent, i.e. writing a term to file and immediately
// reading it back into memory does not change the term
write_core "c.out" c;
c_in <- read_core "c.out";
let thm_c = {{ c_in == c }};
prove z3 thm_c;

write_core "x.out" x;
x_in <- read_core "x.out";
let thm_x = {{ x_in == x }};
prove z3 thm_x;

write_core "t1.out" t1;
t1_in<- read_core "t1.out";
let thm_t1 = {{ t1_in == t1 }};
prove z3 thm_t1;

// N.B. This test currently crashes SAW due to bug #780
// write_core "t2.out" t2;
// t2_in <- read_core "t2.out";
// let thm_t2 = {{ \x -> t2_in x == t2 x }};
// prove z3 thm_t2;

write_core "t3.out" t3;
t3_in <- read_core "t3.out";
let thm_t3 = {{ \x -> t3_in x == t3 x }};
prove z3 thm_t3;

// N.B. This test currently crashes SAW due to bug #780
// write_core "t4.out" t4;
// t4_in <- read_core "t4.out";
// let thm_t4 = {{ t4_in == t4 }};
// prove z3 thm_t4;

write_core "t5.out" t5;
t5_in <- read_core "t5.out";
let thm_t5 = {{ t5_in == t5 }};
prove z3 thm_t5;
