module Comp where

// Specification for a functional AND gate. First output bit is the ready bit,
// second bit is the result
andSpec : ((), (Bit, Bit)) -> ((), (Bit, Bit))
andSpec (_, (x, y)) = ((), (True, x && y))

// Specification for a functional NAND gate. First output bit is the ready bit,
// second bit is the result
nandSpec : ((), (Bit, Bit)) -> ((), (Bit, Bit))
nandSpec (_, (x, y)) = ((), (True, ~ (andSpec ((), (x, y))).1.1))

// State for a stateful AND gate that first loads its inputs into memory, then
// computes logical AND over them. `loaded` indicates whether the inputs have
// been loaded into `origX` and `origY`.
type andState = { loaded : Bit, origX : Bit, origY : Bit }

// A stateful AND gate.  First output bit is the ready bit, second bit is the
// result.  This gate takes 2 cycles to compute.  It restarts when the input
// changes.
andImp : (andState, (Bit, Bit)) -> (andState, (Bit, Bit))
andImp (s, (x, y)) =
  if s.loaded /\ x == s.origX /\ y == s.origY
  then (s, (True, s.origX && s.origY))
  else ({ loaded = True, origX = x, origY = y }, (False, 0))

// Relation between `andImp` and `andSpec`.  Checks that outputs are
// equivalent, given that `andImp` is ready to be read.
andRel : (andState, (Bit, Bit)) -> ((), (Bit, Bit)) -> Bit
andRel (s, (impReady, impO)) ((), (_, specO)) =
  if impReady then impO == specO else True

// Stateful NAND gate holds `andState`. It has no additional state.
type nandState = andState

// A stateful NAND gate.  First output bit is the ready bit, second bit is the
// result.  This gate takes 2 cycles to compute.  It restarts when the input
// changes.
nandImp : (nandState, (Bit, Bit)) -> (nandState, (Bit, Bit))
nandImp x = (s, (andReady, ~andRes))
  where
    (s ,(andReady, andRes)) = andImp x

// Relation between `nandImp` and `nandSpec`.  Checks that outputs are
// equivalent, given that `nandImp` is ready to be read.
nandRel : (nandState, (Bit, Bit)) -> ((), (Bit, Bit)) -> Bit
nandRel (s, (impReady, impO)) ((), (_, specO)) =
  if impReady then impO == specO else True
