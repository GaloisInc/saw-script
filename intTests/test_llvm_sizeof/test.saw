// This test checks that the `llvm_sizeof` function works as expected.

// https://github.com/GaloisInc/saw-script/issues/803

bc1 <- llvm_load_module "test1.bc";
bc2 <- llvm_load_module "test2.bc";

let s1 = llvm_sizeof bc1 (llvm_int 8);
let s2 = llvm_sizeof bc1 (llvm_int 16);
let s3 = llvm_sizeof bc1 (llvm_int 32);
let s4 = llvm_sizeof bc1 (llvm_int 64);
let s5 = llvm_sizeof bc1 (llvm_alias "struct.foo");
let s6 = llvm_sizeof bc1 (llvm_alias "struct.bar");
let s7 = llvm_sizeof bc1 (llvm_array 2 (llvm_alias "struct.foo"));
let s8 = llvm_sizeof bc2 (llvm_alias "struct.baz");
let s9 = llvm_sizeof bc2 (llvm_array 8 (llvm_alias "struct.baz"));
let s0 = llvm_sizeof bc2 (llvm_type "void*");

// This is a workaround to delay evaluation of a pure function
// so that `fails` can catch any errors raised.
let apply f x = do { () <- return (); return (f x); };

fails (apply (llvm_sizeof bc1) (llvm_type "void"));
fails (apply (llvm_sizeof bc1) (llvm_alias "baz"));
fails (apply (llvm_sizeof bc2) (llvm_alias "foo"));

prove_print z3 {{
  `s1 == (1 : Integer) /\
  `s2 == (2 : Integer) /\
  `s3 == (4 : Integer) /\
  `s4 == (8 : Integer) /\
  `s5 == (8 : Integer) /\
  `s6 == (84 : Integer) /\
  `s7 == (16 : Integer) /\
  `s8 == (8  : Integer) /\
  `s9 == (64 : Integer) /\
  `s0 == (8  : Integer)
  }};
