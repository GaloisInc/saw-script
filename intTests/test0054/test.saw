// construct some fresh symbolic variables to play with
x <- fresh_symbolic "x" {| [32] |};
y <- fresh_symbolic "y" {| [32] |};

let t = {{ x + y }};

// various abstractions over `t` that should be operationally equivalent
let f1 = abstract_symbolic t;
let f2 = lambda y (lambda x t);
let f3 = lambdas [y, x] t;

// degenerate case of `lambdas`
let f4 = lambdas [] t;

let thm1 = {{ \z w -> f1 z w == f2 z w}};
let thm2 = {{ \z w -> f2 z w == f3 z w}};
let thm3 = {{ t == f4 }};

prove z3 thm1;
prove z3 thm2;
prove z3 thm3;
