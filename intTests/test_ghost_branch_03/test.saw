let get_spec (x : Ghost) : CrucibleSetup () = do {
  i <- llvm_fresh_var "i" (llvm_int 32);
  llvm_ghost_value x i;
  llvm_execute_func [];
  llvm_ghost_value x i;
  llvm_return (llvm_term i);
};

let f_spec (x : Ghost) : CrucibleSetup () = do {
  i <- llvm_fresh_var "i" (llvm_int 32);
  llvm_execute_func [llvm_term i];
  llvm_ghost_value x i;
};

let g_spec (x : Ghost) : CrucibleSetup () = do {
  i <- llvm_fresh_var "i" (llvm_int 32);
  llvm_execute_func [llvm_term i];
  llvm_ghost_value x {{ True : Bit }}; // should be [32]
};

let h_spec : CrucibleSetup () = do {
  i <- llvm_fresh_var "i" (llvm_int 32);
  llvm_precond {{i < 512}};
  llvm_execute_func [llvm_term i];
  ret <- llvm_fresh_var "ret" (llvm_int 32);
  llvm_return (llvm_term ret);
  llvm_postcond {{ ret == i }};
};

let main : TopLevel () = do {
  x <- declare_ghost_state "x";
  m <- llvm_load_module "test.bc";
  get_ov <- llvm_unsafe_assume_spec m "get" (get_spec x);
  f_ov <- llvm_unsafe_assume_spec m "f" (f_spec x);
  g_ov <- llvm_unsafe_assume_spec m "g" (g_spec x);
  fails (llvm_verify m "h" [get_ov, f_ov, g_ov] false h_spec z3);
  print "done";
};
