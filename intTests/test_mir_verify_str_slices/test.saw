enable_experimental;

let hello = mir_term {{ "hello" : [5][8] }};

// Alternatively we could define it like this:
//
// let hello = mir_term {{ [104, 101, 108, 108, 111] : [5][8] }};

let f_spec_1 = do {
  a <- mir_alloc (mir_array 5 mir_u8);
  mir_points_to a hello;

  mir_execute_func [mir_str_slice_value a];

  mir_return (mir_term {{ 205 : [8] }});
};

let f_spec_2 = do {
  a <- mir_alloc (mir_array 5 mir_u8);
  mir_points_to a hello;

  mir_execute_func [mir_str_slice_range_value a 1 3];

  mir_return (mir_term {{ 209 : [8] }});
};

// mir_str_slice_value must take an array reference as an argument.
// Passing a bare array constitutes a type error.
let f_fail_spec_1 = do {
  let arr = mir_array_value mir_u8 [mir_term {{ 1 : [8] }}];
  mir_execute_func [mir_str_slice_value arr];

  mir_return (mir_term {{ 0 : [8] }});
};

// The end value of the range given to mir_slice_range_value must not
// exceed the length of the slice.
let f_fail_spec_2 = do {
  a <- mir_alloc (mir_array 5 mir_u8);
  mir_points_to a hello;

  mir_execute_func [mir_str_slice_range_value a 0 6];

  mir_return (mir_term {{ 205 : [8] }});
};

// The start value of the range given to mir_slice_range_value must not
// exceed the end value.
let f_fail_spec_3 = do {
  a <- mir_alloc (mir_array 5 mir_u8);
  mir_points_to a hello;

  mir_execute_func [mir_str_slice_range_value a 6 5];

  mir_return (mir_term {{ 0 : [8] }});
};

// Indexing into a length-0 slice is disallowed.
let f_fail_spec_4 = do {
  a <- mir_alloc (mir_array 5 mir_u8);
  mir_points_to a hello;

  mir_execute_func [mir_str_slice_range_value a 0 0];

  mir_return (mir_term {{ 0 : [8] }});
};

// f requires a slice of length at least two.
let f_fail_spec_5 = do {
  a <- mir_alloc (mir_array 5 mir_u8);
  mir_points_to a hello;

  mir_execute_func [mir_str_slice_range_value a 0 1];

  mir_return (mir_term {{ 0 : [8] }});
};

// f specifically requires a value of type &str as an argument. Passing a value
// of type &[u8] instead should yield a type error.
let f_fail_spec_6 = do {
  a <- mir_alloc (mir_array 5 mir_u8);
  mir_points_to a hello;

  mir_execute_func [mir_slice_value a];

  mir_return (mir_term {{ 205 : [8] }});
};

// mir_str_slice_value must take a &[u8; N] value as an argument. Passing a
// value of another type (e.g., &[u32; N]) constitutes a type error.
let f_fail_spec_7 = do {
  a <- mir_alloc (mir_array 5 mir_u32);
  mir_points_to a (mir_term {{ map zext`{32,8} "hello" }});

  mir_execute_func [mir_str_slice_value a];

  mir_return (mir_term {{ 205 : [8] }});
};

m <- mir_load_module "test.linked-mir.json";

f_ov_1 <- mir_verify m "test::f" [] false f_spec_1 z3;
f_ov_2 <- mir_verify m "test::f" [] false f_spec_2 z3;

fails (
  mir_verify m "test::f" [] false f_fail_spec_1 z3
);
fails (
  mir_verify m "test::f" [] false f_fail_spec_2 z3
);
fails (
  mir_verify m "test::f" [] false f_fail_spec_3 z3
);
fails (
  mir_verify m "test::f" [] false f_fail_spec_4 z3
);
fails (
  mir_verify m "test::f" [] false f_fail_spec_5 z3
);
fails (
  mir_verify m "test::f" [] false f_fail_spec_6 z3
);
fails (
  mir_verify m "test::f" [] false f_fail_spec_7 z3
);

mir_verify m "test::g" [f_ov_1] false f_spec_1 z3;
mir_verify m "test::g" [f_ov_2] false f_spec_2 z3;
