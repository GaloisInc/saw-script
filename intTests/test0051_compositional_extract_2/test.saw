enable_experimental;

m <- llvm_load_module "test.bc";

let ptr_to_fresh nm ty = do {
    x <- crucible_fresh_var nm ty;
    p <- crucible_alloc ty;
    crucible_points_to p (crucible_term x);
    return (x, p);
};

let add_spec = do {
  r_p <- crucible_alloc (llvm_struct "struct.uint128_t");
  (_, a_p) <- ptr_to_fresh "a" (llvm_struct "struct.uint128_t");
  (_, b_p) <- ptr_to_fresh "b" (llvm_struct "struct.uint128_t");
  crucible_execute_func [r_p, a_p, b_p];
  r <- crucible_fresh_var "r" (llvm_struct "struct.uint128_t");
  crucible_points_to r_p (crucible_term r);
};

let sum_spec n = do {
  s_p <- crucible_alloc (llvm_struct "struct.uint128_t");
  (_, a_p) <- ptr_to_fresh "a" (llvm_array n (llvm_struct "struct.uint128_t"));
  crucible_execute_func [s_p, a_p, (crucible_term {{ `n:[64] }})];
  s <- crucible_fresh_var "s" (llvm_struct "struct.uint128_t");
  crucible_points_to s_p (crucible_term s);
};

add_ov <- crucible_llvm_compositional_extract m "add" "add" [] false add_spec abc;
_ <- crucible_llvm_compositional_extract m "sum" "sum" [add_ov] false (sum_spec 10) abc;

add_thm <- prove_print abc
  {{ \a b -> add a b == reverse (split ((join (reverse a)) + (join (reverse b)))) }};
prove_print (do { simplify (addsimps [add_thm] empty_ss); simplify (cryptol_ss ()); abc; })
  {{ \a -> sum a == reverse (split (foldl (+) (0:[128]) (map join (map reverse a)))) }};

