 Loading file "files.saw"
 Loading file "include/test.saw"
 Hello from the included file!
 [104, 101, 108, 108, 111, 10]
 dump_file_AST:
 Loading file "include/syntax.saw"
StmtImport include/syntax.saw:5:1-5:30 (Import {iIsSubmodule = False, iModule = Left "Foo.cry", iAs = Just (ModName "Foo" NormalName), iSpec = Just (Only [Ident False NormalName "foo"]), iPos = include/syntax.saw:5:8-5:30})
StmtImport include/syntax.saw:6:1-6:30 (Import {iIsSubmodule = False, iModule = Left "Bar.cry", iAs = Nothing, iSpec = Just (Hiding [Ident False NormalName "bar"]), iPos = include/syntax.saw:6:8-6:30})
StmtBind include/syntax.saw:8:1-8:4 (PWild include/syntax.saw:8:1-8:1 Nothing) (Int include/syntax.saw:8:1-8:4 123)
StmtBind include/syntax.saw:9:1-9:16 (PVar include/syntax.saw:9:1-9:2 include/syntax.saw:9:1-9:2 "a" Nothing) (Application include/syntax.saw:9:6-9:16 (Var include/syntax.saw:9:6-9:12 "return") (Int include/syntax.saw:9:13-9:16 456))
StmtLet include/syntax.saw:11:1-11:12 ReadOnlyVar (NonRecursive (Decl {dPos = include/syntax.saw:11:5-11:12, dPat = PVar include/syntax.saw:11:5-11:6 include/syntax.saw:11:5-11:6 "f" Nothing, dType = Nothing, dDef = Lambda include/syntax.saw:11:7-11:12 (Just "f") (PVar include/syntax.saw:11:7-11:8 include/syntax.saw:11:7-11:8 "x" Nothing) (Var include/syntax.saw:11:11-11:12 "x")}))
StmtLet include/syntax.saw:13:1-14:14 ReadOnlyVar (Recursive [Decl {dPos = include/syntax.saw:13:5-13:12, dPat = PVar include/syntax.saw:13:5-13:6 include/syntax.saw:13:5-13:6 "g" Nothing, dType = Nothing, dDef = Lambda include/syntax.saw:13:7-13:12 (Just "g") (PVar include/syntax.saw:13:7-13:8 include/syntax.saw:13:7-13:8 "x" Nothing) (Var include/syntax.saw:13:11-13:12 "x")},Decl {dPos = include/syntax.saw:14:5-14:14, dPat = PVar include/syntax.saw:14:5-14:6 include/syntax.saw:14:5-14:6 "h" Nothing, dType = Nothing, dDef = Lambda include/syntax.saw:14:7-14:14 (Just "h") (PVar include/syntax.saw:14:7-14:8 include/syntax.saw:14:7-14:8 "x" Nothing) (Application include/syntax.saw:14:11-14:14 (Var include/syntax.saw:14:11-14:12 "g") (Var include/syntax.saw:14:13-14:14 "x"))}])
StmtBind include/syntax.saw:16:1-23:2 (PWild include/syntax.saw:16:1-16:1 Nothing) (Block include/syntax.saw:16:1-23:2 ([StmtCode include/syntax.saw:17:3-17:22 include/syntax.saw:17:7-17:22 " b = False ",StmtLet include/syntax.saw:18:3-18:51 ReadOnlyVar (NonRecursive (Decl {dPos = include/syntax.saw:18:7-18:51, dPat = PVar include/syntax.saw:18:7-18:8 include/syntax.saw:18:7-18:8 "c" Nothing, dType = Nothing, dDef = IfThenElse include/syntax.saw:18:11-18:51 (Var include/syntax.saw:18:14-18:18 "true") (Code include/syntax.saw:18:24-18:35 " False ") (Code include/syntax.saw:18:41-18:51 " True ")})),StmtLet include/syntax.saw:19:3-19:22 ReadOnlyVar (NonRecursive (Decl {dPos = include/syntax.saw:19:7-19:22, dPat = PTuple include/syntax.saw:19:7-19:13 [PVar include/syntax.saw:19:8-19:9 include/syntax.saw:19:8-19:9 "d" Nothing,PVar include/syntax.saw:19:11-19:12 include/syntax.saw:19:11-19:12 "e" Nothing], dType = Nothing, dDef = Tuple include/syntax.saw:19:16-19:22 [Var include/syntax.saw:19:17-19:18 "b",Var include/syntax.saw:19:20-19:21 "c"]})),StmtTypedef include/syntax.saw:21:3-21:18 include/syntax.saw:21:11-21:12 "t" (TyCon include/syntax.saw:21:15-21:18 IntCon [])],Application include/syntax.saw:22:3-22:12 (Var include/syntax.saw:22:3-22:9 "return") (Tuple include/syntax.saw:22:10-22:12 [])))
StmtBind include/syntax.saw:25:1-25:21 (PWild include/syntax.saw:25:1-25:1 Nothing) (Application include/syntax.saw:25:1-25:21 (Var include/syntax.saw:25:1-25:7 "return") (Application include/syntax.saw:25:9-25:21 (Application include/syntax.saw:25:9-25:19 (Var include/syntax.saw:25:9-25:15 "concat") (String include/syntax.saw:25:16-25:19 "x")) (Int include/syntax.saw:25:20-25:21 3)))
 parser_printer_roundtrip:
 Loading file "include/syntax.saw"
import "Foo.cry" as Foo (foo);
import "Bar.cry" hiding (bar);
123;
a <- (return 456);
let f x = x;
rec g x = x and h x = (g x);
do {
   let {{ b = False }};
   let c = if true then {{ False }} else {{ True }};
   let (d, e) = (b, c);
   typedef t Int;
   (return ());
};
(return ((concat "x") 3));
